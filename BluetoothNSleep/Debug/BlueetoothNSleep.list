
BlueetoothNSleep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a78  08009a78  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009a78  08009a78  00019a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a80  08009a80  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009a80  08009a80  00019a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009a88  08009a88  00019a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000090  08009b20  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  08009b20  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000237e0  00000000  00000000  000200c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e47  00000000  00000000  000438a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001428  00000000  00000000  000476f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001298  00000000  00000000  00048b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f52d  00000000  00000000  00049db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014caa  00000000  00000000  000792dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011487c  00000000  00000000  0008df87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a2803  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aac  00000000  00000000  001a2880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000090 	.word	0x20000090
 8000214:	00000000 	.word	0x00000000
 8000218:	080095b4 	.word	0x080095b4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000094 	.word	0x20000094
 8000234:	080095b4 	.word	0x080095b4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	; 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000386:	f1a4 0401 	sub.w	r4, r4, #1
 800038a:	d1e9      	bne.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_d2f>:
 80005c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005c8:	bf24      	itt	cs
 80005ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005d2:	d90d      	bls.n	80005f0 <__aeabi_d2f+0x30>
 80005d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005e8:	bf08      	it	eq
 80005ea:	f020 0001 	biceq.w	r0, r0, #1
 80005ee:	4770      	bx	lr
 80005f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005f4:	d121      	bne.n	800063a <__aeabi_d2f+0x7a>
 80005f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005fa:	bfbc      	itt	lt
 80005fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000600:	4770      	bxlt	lr
 8000602:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000606:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800060a:	f1c2 0218 	rsb	r2, r2, #24
 800060e:	f1c2 0c20 	rsb	ip, r2, #32
 8000612:	fa10 f30c 	lsls.w	r3, r0, ip
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	bf18      	it	ne
 800061c:	f040 0001 	orrne.w	r0, r0, #1
 8000620:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000624:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000628:	fa03 fc0c 	lsl.w	ip, r3, ip
 800062c:	ea40 000c 	orr.w	r0, r0, ip
 8000630:	fa23 f302 	lsr.w	r3, r3, r2
 8000634:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000638:	e7cc      	b.n	80005d4 <__aeabi_d2f+0x14>
 800063a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800063e:	d107      	bne.n	8000650 <__aeabi_d2f+0x90>
 8000640:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000644:	bf1e      	ittt	ne
 8000646:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800064a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800064e:	4770      	bxne	lr
 8000650:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000654:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000658:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_uldivmod>:
 8000660:	b953      	cbnz	r3, 8000678 <__aeabi_uldivmod+0x18>
 8000662:	b94a      	cbnz	r2, 8000678 <__aeabi_uldivmod+0x18>
 8000664:	2900      	cmp	r1, #0
 8000666:	bf08      	it	eq
 8000668:	2800      	cmpeq	r0, #0
 800066a:	bf1c      	itt	ne
 800066c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000670:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000674:	f000 b97c 	b.w	8000970 <__aeabi_idiv0>
 8000678:	f1ad 0c08 	sub.w	ip, sp, #8
 800067c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000680:	f000 f806 	bl	8000690 <__udivmoddi4>
 8000684:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068c:	b004      	add	sp, #16
 800068e:	4770      	bx	lr

08000690 <__udivmoddi4>:
 8000690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000694:	468c      	mov	ip, r1
 8000696:	9d08      	ldr	r5, [sp, #32]
 8000698:	4604      	mov	r4, r0
 800069a:	468a      	mov	sl, r1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d14a      	bne.n	8000736 <__udivmoddi4+0xa6>
 80006a0:	428a      	cmp	r2, r1
 80006a2:	4617      	mov	r7, r2
 80006a4:	d962      	bls.n	800076c <__udivmoddi4+0xdc>
 80006a6:	fab2 f682 	clz	r6, r2
 80006aa:	b14e      	cbz	r6, 80006c0 <__udivmoddi4+0x30>
 80006ac:	f1c6 0e20 	rsb	lr, r6, #32
 80006b0:	fa01 f306 	lsl.w	r3, r1, r6
 80006b4:	40b7      	lsls	r7, r6
 80006b6:	40b4      	lsls	r4, r6
 80006b8:	fa20 fe0e 	lsr.w	lr, r0, lr
 80006bc:	ea4e 0a03 	orr.w	sl, lr, r3
 80006c0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006c4:	0c23      	lsrs	r3, r4, #16
 80006c6:	fa1f f987 	uxth.w	r9, r7
 80006ca:	fbba fef8 	udiv	lr, sl, r8
 80006ce:	fb08 aa1e 	mls	sl, r8, lr, sl
 80006d2:	fb0e f209 	mul.w	r2, lr, r9
 80006d6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80006da:	429a      	cmp	r2, r3
 80006dc:	d90b      	bls.n	80006f6 <__udivmoddi4+0x66>
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80006e4:	bf2c      	ite	cs
 80006e6:	2001      	movcs	r0, #1
 80006e8:	2000      	movcc	r0, #0
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d902      	bls.n	80006f4 <__udivmoddi4+0x64>
 80006ee:	2800      	cmp	r0, #0
 80006f0:	f000 812a 	beq.w	8000948 <__udivmoddi4+0x2b8>
 80006f4:	468e      	mov	lr, r1
 80006f6:	1a9a      	subs	r2, r3, r2
 80006f8:	b2a3      	uxth	r3, r4
 80006fa:	fbb2 f0f8 	udiv	r0, r2, r8
 80006fe:	fb08 2210 	mls	r2, r8, r0, r2
 8000702:	fb00 f909 	mul.w	r9, r0, r9
 8000706:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 800070a:	45a1      	cmp	r9, r4
 800070c:	d907      	bls.n	800071e <__udivmoddi4+0x8e>
 800070e:	193c      	adds	r4, r7, r4
 8000710:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000714:	d202      	bcs.n	800071c <__udivmoddi4+0x8c>
 8000716:	45a1      	cmp	r9, r4
 8000718:	f200 8110 	bhi.w	800093c <__udivmoddi4+0x2ac>
 800071c:	4618      	mov	r0, r3
 800071e:	eba4 0409 	sub.w	r4, r4, r9
 8000722:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000726:	2100      	movs	r1, #0
 8000728:	b11d      	cbz	r5, 8000732 <__udivmoddi4+0xa2>
 800072a:	40f4      	lsrs	r4, r6
 800072c:	2300      	movs	r3, #0
 800072e:	e9c5 4300 	strd	r4, r3, [r5]
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	428b      	cmp	r3, r1
 8000738:	d908      	bls.n	800074c <__udivmoddi4+0xbc>
 800073a:	2d00      	cmp	r5, #0
 800073c:	f000 80f2 	beq.w	8000924 <__udivmoddi4+0x294>
 8000740:	2100      	movs	r1, #0
 8000742:	e9c5 0c00 	strd	r0, ip, [r5]
 8000746:	4608      	mov	r0, r1
 8000748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074c:	fab3 f183 	clz	r1, r3
 8000750:	2900      	cmp	r1, #0
 8000752:	d14e      	bne.n	80007f2 <__udivmoddi4+0x162>
 8000754:	4563      	cmp	r3, ip
 8000756:	f0c0 80e8 	bcc.w	800092a <__udivmoddi4+0x29a>
 800075a:	4282      	cmp	r2, r0
 800075c:	f240 80e5 	bls.w	800092a <__udivmoddi4+0x29a>
 8000760:	4608      	mov	r0, r1
 8000762:	2d00      	cmp	r5, #0
 8000764:	d0e5      	beq.n	8000732 <__udivmoddi4+0xa2>
 8000766:	e9c5 4a00 	strd	r4, sl, [r5]
 800076a:	e7e2      	b.n	8000732 <__udivmoddi4+0xa2>
 800076c:	b902      	cbnz	r2, 8000770 <__udivmoddi4+0xe0>
 800076e:	deff      	udf	#255	; 0xff
 8000770:	fab2 f682 	clz	r6, r2
 8000774:	2e00      	cmp	r6, #0
 8000776:	f040 8099 	bne.w	80008ac <__udivmoddi4+0x21c>
 800077a:	1a8b      	subs	r3, r1, r2
 800077c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000780:	fa1f f882 	uxth.w	r8, r2
 8000784:	2101      	movs	r1, #1
 8000786:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800078a:	fbb3 f2fe 	udiv	r2, r3, lr
 800078e:	fb0e 3012 	mls	r0, lr, r2, r3
 8000792:	fb08 f902 	mul.w	r9, r8, r2
 8000796:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 800079a:	45e1      	cmp	r9, ip
 800079c:	d908      	bls.n	80007b0 <__udivmoddi4+0x120>
 800079e:	eb17 0c0c 	adds.w	ip, r7, ip
 80007a2:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80007a6:	d202      	bcs.n	80007ae <__udivmoddi4+0x11e>
 80007a8:	45e1      	cmp	r9, ip
 80007aa:	f200 80ca 	bhi.w	8000942 <__udivmoddi4+0x2b2>
 80007ae:	461a      	mov	r2, r3
 80007b0:	ebac 0c09 	sub.w	ip, ip, r9
 80007b4:	b2a3      	uxth	r3, r4
 80007b6:	fbbc f0fe 	udiv	r0, ip, lr
 80007ba:	fb0e cc10 	mls	ip, lr, r0, ip
 80007be:	fb08 f800 	mul.w	r8, r8, r0
 80007c2:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
 80007c6:	45a0      	cmp	r8, r4
 80007c8:	d90e      	bls.n	80007e8 <__udivmoddi4+0x158>
 80007ca:	193c      	adds	r4, r7, r4
 80007cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007d0:	bf2c      	ite	cs
 80007d2:	f04f 0c01 	movcs.w	ip, #1
 80007d6:	f04f 0c00 	movcc.w	ip, #0
 80007da:	45a0      	cmp	r8, r4
 80007dc:	d903      	bls.n	80007e6 <__udivmoddi4+0x156>
 80007de:	f1bc 0f00 	cmp.w	ip, #0
 80007e2:	f000 80a8 	beq.w	8000936 <__udivmoddi4+0x2a6>
 80007e6:	4618      	mov	r0, r3
 80007e8:	eba4 0408 	sub.w	r4, r4, r8
 80007ec:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80007f0:	e79a      	b.n	8000728 <__udivmoddi4+0x98>
 80007f2:	f1c1 0420 	rsb	r4, r1, #32
 80007f6:	408b      	lsls	r3, r1
 80007f8:	fa02 fe01 	lsl.w	lr, r2, r1
 80007fc:	fa0c f601 	lsl.w	r6, ip, r1
 8000800:	40e2      	lsrs	r2, r4
 8000802:	fa20 f704 	lsr.w	r7, r0, r4
 8000806:	fa2c fc04 	lsr.w	ip, ip, r4
 800080a:	fa00 f801 	lsl.w	r8, r0, r1
 800080e:	4313      	orrs	r3, r2
 8000810:	433e      	orrs	r6, r7
 8000812:	0c1f      	lsrs	r7, r3, #16
 8000814:	0c32      	lsrs	r2, r6, #16
 8000816:	fa1f f983 	uxth.w	r9, r3
 800081a:	fbbc f0f7 	udiv	r0, ip, r7
 800081e:	fb07 cc10 	mls	ip, r7, r0, ip
 8000822:	fb00 fa09 	mul.w	sl, r0, r9
 8000826:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 800082a:	45e2      	cmp	sl, ip
 800082c:	d908      	bls.n	8000840 <__udivmoddi4+0x1b0>
 800082e:	eb13 0c0c 	adds.w	ip, r3, ip
 8000832:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000836:	d202      	bcs.n	800083e <__udivmoddi4+0x1ae>
 8000838:	45e2      	cmp	sl, ip
 800083a:	f200 8089 	bhi.w	8000950 <__udivmoddi4+0x2c0>
 800083e:	4610      	mov	r0, r2
 8000840:	ebac 0c0a 	sub.w	ip, ip, sl
 8000844:	b2b6      	uxth	r6, r6
 8000846:	fbbc faf7 	udiv	sl, ip, r7
 800084a:	fb07 cc1a 	mls	ip, r7, sl, ip
 800084e:	fb0a f909 	mul.w	r9, sl, r9
 8000852:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
 8000856:	4591      	cmp	r9, r2
 8000858:	d906      	bls.n	8000868 <__udivmoddi4+0x1d8>
 800085a:	189a      	adds	r2, r3, r2
 800085c:	f10a 36ff 	add.w	r6, sl, #4294967295	; 0xffffffff
 8000860:	d201      	bcs.n	8000866 <__udivmoddi4+0x1d6>
 8000862:	4591      	cmp	r9, r2
 8000864:	d87a      	bhi.n	800095c <__udivmoddi4+0x2cc>
 8000866:	46b2      	mov	sl, r6
 8000868:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
 800086c:	eba2 0209 	sub.w	r2, r2, r9
 8000870:	fba0 670e 	umull	r6, r7, r0, lr
 8000874:	42ba      	cmp	r2, r7
 8000876:	46b4      	mov	ip, r6
 8000878:	46b9      	mov	r9, r7
 800087a:	d302      	bcc.n	8000882 <__udivmoddi4+0x1f2>
 800087c:	d107      	bne.n	800088e <__udivmoddi4+0x1fe>
 800087e:	45b0      	cmp	r8, r6
 8000880:	d205      	bcs.n	800088e <__udivmoddi4+0x1fe>
 8000882:	ebb6 0c0e 	subs.w	ip, r6, lr
 8000886:	eb67 0303 	sbc.w	r3, r7, r3
 800088a:	3801      	subs	r0, #1
 800088c:	4699      	mov	r9, r3
 800088e:	2d00      	cmp	r5, #0
 8000890:	d06b      	beq.n	800096a <__udivmoddi4+0x2da>
 8000892:	ebb8 030c 	subs.w	r3, r8, ip
 8000896:	eb62 0209 	sbc.w	r2, r2, r9
 800089a:	fa02 f404 	lsl.w	r4, r2, r4
 800089e:	40cb      	lsrs	r3, r1
 80008a0:	40ca      	lsrs	r2, r1
 80008a2:	2100      	movs	r1, #0
 80008a4:	431c      	orrs	r4, r3
 80008a6:	e9c5 4200 	strd	r4, r2, [r5]
 80008aa:	e742      	b.n	8000732 <__udivmoddi4+0xa2>
 80008ac:	40b7      	lsls	r7, r6
 80008ae:	f1c6 0220 	rsb	r2, r6, #32
 80008b2:	fa01 f306 	lsl.w	r3, r1, r6
 80008b6:	40b4      	lsls	r4, r6
 80008b8:	fa21 fc02 	lsr.w	ip, r1, r2
 80008bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008c0:	fa20 f202 	lsr.w	r2, r0, r2
 80008c4:	fa1f f887 	uxth.w	r8, r7
 80008c8:	fbbc f1fe 	udiv	r1, ip, lr
 80008cc:	431a      	orrs	r2, r3
 80008ce:	fb0e cc11 	mls	ip, lr, r1, ip
 80008d2:	fb01 f008 	mul.w	r0, r1, r8
 80008d6:	0c13      	lsrs	r3, r2, #16
 80008d8:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 80008dc:	4560      	cmp	r0, ip
 80008de:	d907      	bls.n	80008f0 <__udivmoddi4+0x260>
 80008e0:	eb17 0c0c 	adds.w	ip, r7, ip
 80008e4:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
 80008e8:	d201      	bcs.n	80008ee <__udivmoddi4+0x25e>
 80008ea:	4560      	cmp	r0, ip
 80008ec:	d833      	bhi.n	8000956 <__udivmoddi4+0x2c6>
 80008ee:	4619      	mov	r1, r3
 80008f0:	ebac 0c00 	sub.w	ip, ip, r0
 80008f4:	b292      	uxth	r2, r2
 80008f6:	fbbc f0fe 	udiv	r0, ip, lr
 80008fa:	fb0e cc10 	mls	ip, lr, r0, ip
 80008fe:	fb00 f308 	mul.w	r3, r0, r8
 8000902:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8000906:	4563      	cmp	r3, ip
 8000908:	d907      	bls.n	800091a <__udivmoddi4+0x28a>
 800090a:	eb17 0c0c 	adds.w	ip, r7, ip
 800090e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000912:	d201      	bcs.n	8000918 <__udivmoddi4+0x288>
 8000914:	4563      	cmp	r3, ip
 8000916:	d825      	bhi.n	8000964 <__udivmoddi4+0x2d4>
 8000918:	4610      	mov	r0, r2
 800091a:	ebac 0303 	sub.w	r3, ip, r3
 800091e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000922:	e730      	b.n	8000786 <__udivmoddi4+0xf6>
 8000924:	4629      	mov	r1, r5
 8000926:	4628      	mov	r0, r5
 8000928:	e703      	b.n	8000732 <__udivmoddi4+0xa2>
 800092a:	1a84      	subs	r4, r0, r2
 800092c:	eb6c 0303 	sbc.w	r3, ip, r3
 8000930:	2001      	movs	r0, #1
 8000932:	469a      	mov	sl, r3
 8000934:	e715      	b.n	8000762 <__udivmoddi4+0xd2>
 8000936:	3802      	subs	r0, #2
 8000938:	443c      	add	r4, r7
 800093a:	e755      	b.n	80007e8 <__udivmoddi4+0x158>
 800093c:	3802      	subs	r0, #2
 800093e:	443c      	add	r4, r7
 8000940:	e6ed      	b.n	800071e <__udivmoddi4+0x8e>
 8000942:	3a02      	subs	r2, #2
 8000944:	44bc      	add	ip, r7
 8000946:	e733      	b.n	80007b0 <__udivmoddi4+0x120>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443b      	add	r3, r7
 800094e:	e6d2      	b.n	80006f6 <__udivmoddi4+0x66>
 8000950:	3802      	subs	r0, #2
 8000952:	449c      	add	ip, r3
 8000954:	e774      	b.n	8000840 <__udivmoddi4+0x1b0>
 8000956:	3902      	subs	r1, #2
 8000958:	44bc      	add	ip, r7
 800095a:	e7c9      	b.n	80008f0 <__udivmoddi4+0x260>
 800095c:	f1aa 0a02 	sub.w	sl, sl, #2
 8000960:	441a      	add	r2, r3
 8000962:	e781      	b.n	8000868 <__udivmoddi4+0x1d8>
 8000964:	3802      	subs	r0, #2
 8000966:	44bc      	add	ip, r7
 8000968:	e7d7      	b.n	800091a <__udivmoddi4+0x28a>
 800096a:	4629      	mov	r1, r5
 800096c:	e6e1      	b.n	8000732 <__udivmoddi4+0xa2>
 800096e:	bf00      	nop

08000970 <__aeabi_idiv0>:
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <BSP_LED_Init>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <BSP_LED_Init+0x64>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <BSP_LED_Init+0x64>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <BSP_LED_Init+0x64>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800099e:	2301      	movs	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 80009a2:	2302      	movs	r3, #2
 80009a4:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <BSP_LED_Init+0x68>)
 80009aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ae:	f107 020c 	add.w	r2, r7, #12
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fbf9 	bl	80011ac <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <BSP_LED_Init+0x68>)
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	2180      	movs	r1, #128	; 0x80
 80009c4:	2200      	movs	r2, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fe76 	bl	80016b8 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	20000000 	.word	0x20000000

080009e0 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <BSP_LED_Toggle+0x28>)
 80009ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fe76 	bl	80016e8 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000000 	.word	0x20000000

08000a0c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	460a      	mov	r2, r1
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000a20:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <BSP_PB_Init+0xec>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	4a34      	ldr	r2, [pc, #208]	; (8000af8 <BSP_PB_Init+0xec>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2c:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <BSP_PB_Init+0xec>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61fb      	str	r3, [r7, #28]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10c      	bne.n	8000a66 <BSP_PB_Init+0x5a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <BSP_PB_Init+0xf0>)
 8000a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a58:	f107 0210 	add.w	r2, r7, #16
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fba4 	bl	80011ac <HAL_GPIO_Init>
 8000a64:	e043      	b.n	8000aee <BSP_PB_Init+0xe2>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {      
    /* Configure Button pin as input with External interrupt */    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <BSP_PB_Init+0xf4>)
 8000a68:	617b      	str	r3, [r7, #20]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	4a23      	ldr	r2, [pc, #140]	; (8000afc <BSP_PB_Init+0xf0>)
 8000a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a72:	f107 0210 	add.w	r2, r7, #16
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fb97 	bl	80011ac <HAL_GPIO_Init>
    
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <BSP_PB_Init+0xf8>)
 8000a8a:	1898      	adds	r0, r3, r2
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <BSP_PB_Init+0xfc>)
 8000a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f000 fb2d 	bl	80010f4 <HAL_EXTI_GetHandle>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <BSP_PB_Init+0x9c>
	{
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000aa0:	f06f 0303 	mvn.w	r3, #3
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa6:	e022      	b.n	8000aee <BSP_PB_Init+0xe2>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8000aa8:	79fa      	ldrb	r2, [r7, #7]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <BSP_PB_Init+0xf8>)
 8000ab4:	1898      	adds	r0, r3, r2
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <BSP_PB_Init+0x100>)
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f000 faee 	bl	80010a2 <HAL_EXTI_RegisterCallback>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <BSP_PB_Init+0xc8>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000acc:	f06f 0303 	mvn.w	r3, #3
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad2:	e00c      	b.n	8000aee <BSP_PB_Init+0xe2>
    }
	else
	{
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000ad4:	2018      	movs	r0, #24
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <BSP_PB_Init+0x104>)
 8000ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f000 faaa 	bl	800103a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000ae6:	2318      	movs	r3, #24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fac0 	bl	800106e <HAL_NVIC_EnableIRQ>
	}
  }
  
  return ret;
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40021000 	.word	0x40021000
 8000afc:	20000004 	.word	0x20000004
 8000b00:	10110000 	.word	0x10110000
 8000b04:	20000008 	.word	0x20000008
 8000b08:	08009978 	.word	0x08009978
 8000b0c:	0800997c 	.word	0x0800997c
 8000b10:	08009980 	.word	0x08009980

08000b14 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <BSP_PB_GetState+0x34>)
 8000b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 fdab 	bl	8001688 <HAL_GPIO_ReadPin>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf0c      	ite	eq
 8000b38:	2301      	moveq	r3, #1
 8000b3a:	2300      	movne	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000004 	.word	0x20000004

08000b4c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f006 fa4f 	bl	8006ff4 <BSP_PB_Callback>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM) 
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  
  if(COM > COMn)
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d903      	bls.n	8000b78 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b70:	f06f 0301 	mvn.w	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	e022      	b.n	8000bbe <BSP_COM_Init+0x62>
  }
  else
  {  
     hcom_uart[COM].Instance = COM_USART[COM];
 8000b78:	79fa      	ldrb	r2, [r7, #7]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4912      	ldr	r1, [pc, #72]	; (8000bc8 <BSP_COM_Init+0x6c>)
 8000b7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b82:	4912      	ldr	r1, [pc, #72]	; (8000bcc <BSP_COM_Init+0x70>)
 8000b84:	208c      	movs	r0, #140	; 0x8c
 8000b86:	fb00 f303 	mul.w	r3, r0, r3
 8000b8a:	440b      	add	r3, r1
 8000b8c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    LPUART1_MspInit(&hcom_uart[COM]);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	228c      	movs	r2, #140	; 0x8c
 8000b92:	fb02 f303 	mul.w	r3, r2, r3
 8000b96:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <BSP_COM_Init+0x70>)
 8000b98:	4413      	add	r3, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f886 	bl	8000cac <LPUART1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
  
    if (MX_LPUART1_UART_Init(&hcom_uart[COM]))
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	228c      	movs	r2, #140	; 0x8c
 8000ba4:	fb02 f303 	mul.w	r3, r2, r3
 8000ba8:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <BSP_COM_Init+0x70>)
 8000baa:	4413      	add	r3, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f80f 	bl	8000bd0 <MX_LPUART1_UART_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000bb8:	f06f 0303 	mvn.w	r3, #3
 8000bbc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000014 	.word	0x20000014
 8000bcc:	200004dc 	.word	0x200004dc

08000bd0 <MX_LPUART1_UART_Init>:
 */

/* LPUART1 init function */ 

__weak HAL_StatusTypeDef MX_LPUART1_UART_Init(UART_HandleTypeDef* hlpuart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]
  hlpuart->Instance = LPUART1;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <MX_LPUART1_UART_Init+0xa0>)
 8000be0:	601a      	str	r2, [r3, #0]
  hlpuart->Init.BaudRate = 115200;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  hlpuart->Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hlpuart->Init.StopBits = UART_STOPBITS_1;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hlpuart->Init.Parity = UART_PARITY_NONE;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hlpuart->Init.Mode = UART_MODE_TX_RX;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  hlpuart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hlpuart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  hlpuart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart->FifoMode = UART_FIFOMODE_DISABLE;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(hlpuart) != HAL_OK)
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f002 f9bf 	bl	8002fa4 <HAL_UART_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_LPUART1_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(hlpuart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f003 ff29 	bl	8004a8a <HAL_UARTEx_SetTxFifoThreshold>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_LPUART1_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(hlpuart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f003 ff5e 	bl	8004b06 <HAL_UARTEx_SetRxFifoThreshold>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_LPUART1_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(hlpuart) != HAL_OK)
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f003 fedf 	bl	8004a18 <HAL_UARTEx_DisableFifoMode>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_LPUART1_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40008000 	.word	0x40008000

08000c74 <__io_putchar>:
#ifdef __GNUC__ 
 int __io_putchar (int ch) 
#else 
 int fputc (int ch, FILE *f) 
#endif /* __GNUC__ */ 
{ 
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <__io_putchar+0x30>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	238c      	movs	r3, #140	; 0x8c
 8000c84:	fb03 f302 	mul.w	r3, r3, r2
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <__io_putchar+0x34>)
 8000c8a:	1898      	adds	r0, r3, r2
 8000c8c:	1d39      	adds	r1, r7, #4
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	2201      	movs	r2, #1
 8000c94:	f002 f9e0 	bl	8003058 <HAL_UART_Transmit>
  return ch;
 8000c98:	687b      	ldr	r3, [r7, #4]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000ac 	.word	0x200000ac
 8000ca8:	200004dc 	.word	0x200004dc

08000cac <LPUART1_MspInit>:
 * @param  huart LPUART1 handle
 * @retval None
 */

static void LPUART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <LPUART1_MspInit+0x68>)
 8000cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cb8:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <LPUART1_MspInit+0x68>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <LPUART1_MspInit+0x68>)
 8000cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <LPUART1_MspInit+0x68>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <LPUART1_MspInit+0x68>)
 8000cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <LPUART1_MspInit+0x68>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000ce4:	f000 fdb8 	bl	8001858 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ce8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <LPUART1_MspInit+0x6c>)
 8000d06:	f000 fa51 	bl	80011ac <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
 8000d18:	42021800 	.word	0x42021800

08000d1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000d26:	2004      	movs	r0, #4
 8000d28:	f000 f97c 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000d2c:	f007 fb2c 	bl	8008388 <SystemCoreClockUpdate>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 f80d 	bl	8000d50 <HAL_InitTick>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	e001      	b.n	8000d46 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d42:	f007 f941 	bl	8007fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_InitTick+0x68>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d022      	beq.n	8000daa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_InitTick+0x6c>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <HAL_InitTick+0x68>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f986 	bl	800108a <HAL_SYSTICK_Config>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10f      	bne.n	8000da4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b07      	cmp	r3, #7
 8000d88:	d809      	bhi.n	8000d9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d92:	f000 f952 	bl	800103a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_InitTick+0x70>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	e007      	b.n	8000dae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e004      	b.n	8000dae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e001      	b.n	8000dae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000001c 	.word	0x2000001c
 8000dbc:	20000024 	.word	0x20000024
 8000dc0:	20000018 	.word	0x20000018

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x1c>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x20>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <HAL_IncTick+0x1c>)
 8000dd4:	6013      	str	r3, [r2, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	20000568 	.word	0x20000568
 8000de4:	2000001c 	.word	0x2000001c

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000568 	.word	0x20000568

08000e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff ffee 	bl	8000de8 <HAL_GetTick>
 8000e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e18:	d004      	beq.n	8000e24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_Delay+0x40>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4413      	add	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e24:	bf00      	nop
 8000e26:	f7ff ffdf 	bl	8000de8 <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d8f7      	bhi.n	8000e26 <HAL_Delay+0x26>
  {
  }
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000001c 	.word	0x2000001c

08000e44 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_SuspendTick+0x1c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_SuspendTick+0x1c>)
 8000e4e:	f023 0302 	bic.w	r3, r3, #2
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_ResumeTick+0x1c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_ResumeTick+0x1c>)
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4907      	ldr	r1, [pc, #28]	; (8000f20 <__NVIC_EnableIRQ+0x38>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0152      	lsls	r2, r2, #5
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0152      	lsls	r2, r2, #5
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	bf28      	it	cs
 8000f96:	2303      	movcs	r3, #3
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3303      	adds	r3, #3
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b04      	subs	r3, #4
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	2107      	movs	r1, #7
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff29 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff40 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff90 	bl	8000f78 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5f 	bl	8000f24 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff33 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffa4 	bl	8000fe0 <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80010a2:	b480      	push	{r7}
 80010a4:	b087      	sub	sp, #28
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	460b      	mov	r3, r1
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d00a      	beq.n	80010d0 <HAL_EXTI_RegisterCallback+0x2e>
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d00c      	beq.n	80010d8 <HAL_EXTI_RegisterCallback+0x36>
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10e      	bne.n	80010e0 <HAL_EXTI_RegisterCallback+0x3e>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	609a      	str	r2, [r3, #8]
      break;
 80010ce:	e00a      	b.n	80010e6 <HAL_EXTI_RegisterCallback+0x44>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]
      break;
 80010d6:	e006      	b.n	80010e6 <HAL_EXTI_RegisterCallback+0x44>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
      break;
 80010de:	e002      	b.n	80010e6 <HAL_EXTI_RegisterCallback+0x44>

    default:
      status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	75fb      	strb	r3, [r7, #23]
      break;
 80010e4:	bf00      	nop
  }

  return status;
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	371c      	adds	r7, #28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e003      	b.n	8001110 <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0c1b      	lsrs	r3, r3, #16
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	2201      	movs	r2, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	015a      	lsls	r2, r3, #5
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_EXTI_IRQHandler+0x88>)
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d009      	beq.n	800116e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	015a      	lsls	r2, r3, #5
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_EXTI_IRQHandler+0x8c>)
 8001174:	4413      	add	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d009      	beq.n	800119c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	4798      	blx	r3
    }
  }
}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	4002f40c 	.word	0x4002f40c
 80011a8:	4002f410 	.word	0x4002f410

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011ba:	e158      	b.n	800146e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	4013      	ands	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 814a 	beq.w	8001468 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d00b      	beq.n	80011f4 <HAL_GPIO_Init+0x48>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d007      	beq.n	80011f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e8:	2b11      	cmp	r3, #17
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b12      	cmp	r3, #18
 80011f2:	d130      	bne.n	8001256 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800122a:	2201      	movs	r2, #1
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	f003 0201 	and.w	r2, r3, #1
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0xea>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b12      	cmp	r3, #18
 8001294:	d123      	bne.n	80012de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3208      	adds	r2, #8
 800129e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	6939      	ldr	r1, [r7, #16]
 80012da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0203 	and.w	r2, r3, #3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 80a4 	beq.w	8001468 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001320:	4a5a      	ldr	r2, [pc, #360]	; (800148c <HAL_GPIO_Init+0x2e0>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3318      	adds	r3, #24
 8001328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	220f      	movs	r2, #15
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a52      	ldr	r2, [pc, #328]	; (8001490 <HAL_GPIO_Init+0x2e4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d025      	beq.n	8001398 <HAL_GPIO_Init+0x1ec>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a51      	ldr	r2, [pc, #324]	; (8001494 <HAL_GPIO_Init+0x2e8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d01f      	beq.n	8001394 <HAL_GPIO_Init+0x1e8>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a50      	ldr	r2, [pc, #320]	; (8001498 <HAL_GPIO_Init+0x2ec>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d019      	beq.n	8001390 <HAL_GPIO_Init+0x1e4>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a4f      	ldr	r2, [pc, #316]	; (800149c <HAL_GPIO_Init+0x2f0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d013      	beq.n	800138c <HAL_GPIO_Init+0x1e0>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a4e      	ldr	r2, [pc, #312]	; (80014a0 <HAL_GPIO_Init+0x2f4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d00d      	beq.n	8001388 <HAL_GPIO_Init+0x1dc>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a4d      	ldr	r2, [pc, #308]	; (80014a4 <HAL_GPIO_Init+0x2f8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d007      	beq.n	8001384 <HAL_GPIO_Init+0x1d8>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a4c      	ldr	r2, [pc, #304]	; (80014a8 <HAL_GPIO_Init+0x2fc>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d101      	bne.n	8001380 <HAL_GPIO_Init+0x1d4>
 800137c:	2306      	movs	r3, #6
 800137e:	e00c      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001380:	2307      	movs	r3, #7
 8001382:	e00a      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001384:	2305      	movs	r3, #5
 8001386:	e008      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001388:	2304      	movs	r3, #4
 800138a:	e006      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 800138c:	2303      	movs	r3, #3
 800138e:	e004      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001390:	2302      	movs	r3, #2
 8001392:	e002      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001398:	2300      	movs	r3, #0
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	f002 0203 	and.w	r2, r2, #3
 80013a0:	00d2      	lsls	r2, r2, #3
 80013a2:	4093      	lsls	r3, r2
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80013aa:	4938      	ldr	r1, [pc, #224]	; (800148c <HAL_GPIO_Init+0x2e0>)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3318      	adds	r3, #24
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013b8:	4b34      	ldr	r3, [pc, #208]	; (800148c <HAL_GPIO_Init+0x2e0>)
 80013ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013de:	4a2b      	ldr	r2, [pc, #172]	; (800148c <HAL_GPIO_Init+0x2e0>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80013e6:	4b29      	ldr	r3, [pc, #164]	; (800148c <HAL_GPIO_Init+0x2e0>)
 80013e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800140c:	4a1f      	ldr	r2, [pc, #124]	; (800148c <HAL_GPIO_Init+0x2e0>)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_GPIO_Init+0x2e0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <HAL_GPIO_Init+0x2e0>)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <HAL_GPIO_Init+0x2e0>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <HAL_GPIO_Init+0x2e0>)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3301      	adds	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	f47f ae9f 	bne.w	80011bc <HAL_GPIO_Init+0x10>
  }
}
 800147e:	bf00      	nop
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	4002f400 	.word	0x4002f400
 8001490:	42020000 	.word	0x42020000
 8001494:	42020400 	.word	0x42020400
 8001498:	42020800 	.word	0x42020800
 800149c:	42020c00 	.word	0x42020c00
 80014a0:	42021000 	.word	0x42021000
 80014a4:	42021400 	.word	0x42021400
 80014a8:	42021800 	.word	0x42021800

080014ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80014ba:	e0c7      	b.n	800164c <HAL_GPIO_DeInit+0x1a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80014bc:	2201      	movs	r2, #1
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80ba 	beq.w	8001646 <HAL_GPIO_DeInit+0x19a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      temp = EXTI->EXTICR[position >> 2U];
 80014d2:	4a65      	ldr	r2, [pc, #404]	; (8001668 <HAL_GPIO_DeInit+0x1bc>)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3318      	adds	r3, #24
 80014da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014de:	60fb      	str	r3, [r7, #12]
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a5d      	ldr	r2, [pc, #372]	; (800166c <HAL_GPIO_DeInit+0x1c0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d025      	beq.n	8001548 <HAL_GPIO_DeInit+0x9c>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a5c      	ldr	r2, [pc, #368]	; (8001670 <HAL_GPIO_DeInit+0x1c4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d01f      	beq.n	8001544 <HAL_GPIO_DeInit+0x98>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a5b      	ldr	r2, [pc, #364]	; (8001674 <HAL_GPIO_DeInit+0x1c8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d019      	beq.n	8001540 <HAL_GPIO_DeInit+0x94>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a5a      	ldr	r2, [pc, #360]	; (8001678 <HAL_GPIO_DeInit+0x1cc>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d013      	beq.n	800153c <HAL_GPIO_DeInit+0x90>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a59      	ldr	r2, [pc, #356]	; (800167c <HAL_GPIO_DeInit+0x1d0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00d      	beq.n	8001538 <HAL_GPIO_DeInit+0x8c>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a58      	ldr	r2, [pc, #352]	; (8001680 <HAL_GPIO_DeInit+0x1d4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_DeInit+0x88>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a57      	ldr	r2, [pc, #348]	; (8001684 <HAL_GPIO_DeInit+0x1d8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_DeInit+0x84>
 800152c:	2306      	movs	r3, #6
 800152e:	e00c      	b.n	800154a <HAL_GPIO_DeInit+0x9e>
 8001530:	2307      	movs	r3, #7
 8001532:	e00a      	b.n	800154a <HAL_GPIO_DeInit+0x9e>
 8001534:	2305      	movs	r3, #5
 8001536:	e008      	b.n	800154a <HAL_GPIO_DeInit+0x9e>
 8001538:	2304      	movs	r3, #4
 800153a:	e006      	b.n	800154a <HAL_GPIO_DeInit+0x9e>
 800153c:	2303      	movs	r3, #3
 800153e:	e004      	b.n	800154a <HAL_GPIO_DeInit+0x9e>
 8001540:	2302      	movs	r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_DeInit+0x9e>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_GPIO_DeInit+0x9e>
 8001548:	2300      	movs	r3, #0
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	00d2      	lsls	r2, r2, #3
 8001552:	4093      	lsls	r3, r2
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	429a      	cmp	r2, r3
 8001558:	d136      	bne.n	80015c8 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800155a:	4b43      	ldr	r3, [pc, #268]	; (8001668 <HAL_GPIO_DeInit+0x1bc>)
 800155c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	4940      	ldr	r1, [pc, #256]	; (8001668 <HAL_GPIO_DeInit+0x1bc>)
 8001566:	4013      	ands	r3, r2
 8001568:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800156c:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <HAL_GPIO_DeInit+0x1bc>)
 800156e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	43db      	mvns	r3, r3
 8001576:	493c      	ldr	r1, [pc, #240]	; (8001668 <HAL_GPIO_DeInit+0x1bc>)
 8001578:	4013      	ands	r3, r2
 800157a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800157e:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <HAL_GPIO_DeInit+0x1bc>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	4938      	ldr	r1, [pc, #224]	; (8001668 <HAL_GPIO_DeInit+0x1bc>)
 8001588:	4013      	ands	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800158c:	4b36      	ldr	r3, [pc, #216]	; (8001668 <HAL_GPIO_DeInit+0x1bc>)
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	4934      	ldr	r1, [pc, #208]	; (8001668 <HAL_GPIO_DeInit+0x1bc>)
 8001596:	4013      	ands	r3, r2
 8001598:	604b      	str	r3, [r1, #4]

        temp = (0x0FUL) << (8U * (position & 0x03U));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~temp;
 80015aa:	4a2f      	ldr	r2, [pc, #188]	; (8001668 <HAL_GPIO_DeInit+0x1bc>)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3318      	adds	r3, #24
 80015b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43da      	mvns	r2, r3
 80015ba:	482b      	ldr	r0, [pc, #172]	; (8001668 <HAL_GPIO_DeInit+0x1bc>)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	400a      	ands	r2, r1
 80015c2:	3318      	adds	r3, #24
 80015c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2103      	movs	r1, #3
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	08d2      	lsrs	r2, r2, #3
 80015fc:	4019      	ands	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3208      	adds	r2, #8
 8001602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2103      	movs	r1, #3
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	401a      	ands	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	2101      	movs	r1, #1
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	401a      	ands	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2103      	movs	r1, #3
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	401a      	ands	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	f47f af31 	bne.w	80014bc <HAL_GPIO_DeInit+0x10>
  }
}
 800165a:	bf00      	nop
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	4002f400 	.word	0x4002f400
 800166c:	42020000 	.word	0x42020000
 8001670:	42020400 	.word	0x42020400
 8001674:	42020800 	.word	0x42020800
 8001678:	42020c00 	.word	0x42020c00
 800167c:	42021000 	.word	0x42021000
 8001680:	42021400 	.word	0x42021400
 8001684:	42021800 	.word	0x42021800

08001688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != 0U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e001      	b.n	80016aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001700:	887a      	ldrh	r2, [r7, #2]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001706:	e002      	b.n	800170e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001708:	887a      	ldrh	r2, [r7, #2]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10c      	bne.n	8001748 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_PWR_EnterSLEEPMode+0x60>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800173a:	d10e      	bne.n	800175a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800173c:	f000 f8ac 	bl	8001898 <HAL_PWREx_DisableLowPowerRunMode>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8001746:	e016      	b.n	8001776 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_PWR_EnterSLEEPMode+0x60>)
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001754:	d001      	beq.n	800175a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8001756:	f000 f88f 	bl	8001878 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_PWR_EnterSLEEPMode+0x64>)
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800176c:	bf30      	wfi
 800176e:	e002      	b.n	8001776 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001770:	bf40      	sev
    __WFE();
 8001772:	bf20      	wfe
    __WFE();
 8001774:	bf20      	wfe
  }

}
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40007000 	.word	0x40007000
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <HAL_PWREx_GetVoltageRange+0x18>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40007000 	.word	0x40007000

080017a0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017b0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80017b2:	f000 f8c1 	bl	8001938 <HAL_PWREx_SMPS_GetEffectiveMode>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017bc:	d101      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e03e      	b.n	8001840 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ce:	d101      	bne.n	80017d4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e035      	b.n	8001840 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d101      	bne.n	80017e0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	e02f      	b.n	8001840 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80017e8:	4917      	ldr	r1, [pc, #92]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xac>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	095b      	lsrs	r3, r3, #5
 80017f6:	4a16      	ldr	r2, [pc, #88]	; (8001850 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	09db      	lsrs	r3, r3, #7
 80017fe:	2232      	movs	r2, #50	; 0x32
 8001800:	fb02 f303 	mul.w	r3, r2, r3
 8001804:	4a13      	ldr	r2, [pc, #76]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	3301      	adds	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001810:	e002      	b.n	8001818 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3b01      	subs	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001824:	d102      	bne.n	800182c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f2      	bne.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001838:	d101      	bne.n	800183e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e000      	b.n	8001840 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40007000 	.word	0x40007000
 800184c:	20000024 	.word	0x20000024
 8001850:	0a7c5ac5 	.word	0x0a7c5ac5
 8001854:	cccccccd 	.word	0xcccccccd

08001858 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_PWREx_EnableVddIO2+0x1c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001866:	6053      	str	r3, [r2, #4]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40007000 	.word	0x40007000

08001878 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8001882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40007000 	.word	0x40007000

08001898 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a19      	ldr	r2, [pc, #100]	; (8001908 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 80018a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018a8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_REGLP_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_PWREx_DisableLowPowerRunMode+0x74>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_PWREx_DisableLowPowerRunMode+0x78>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	09db      	lsrs	r3, r3, #7
 80018b8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <HAL_PWREx_DisableLowPowerRunMode+0x7c>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	08db      	lsrs	r3, r3, #3
 80018c8:	3301      	adds	r3, #1
 80018ca:	607b      	str	r3, [r7, #4]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80018cc:	e002      	b.n	80018d4 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    wait_loop_index--;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e0:	d102      	bne.n	80018e8 <HAL_PWREx_DisableLowPowerRunMode+0x50>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f2      	bne.n	80018ce <HAL_PWREx_DisableLowPowerRunMode+0x36>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018f4:	d101      	bne.n	80018fa <HAL_PWREx_DisableLowPowerRunMode+0x62>
  {
    return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e000      	b.n	80018fc <HAL_PWREx_DisableLowPowerRunMode+0x64>
  }

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40007000 	.word	0x40007000
 800190c:	20000024 	.word	0x20000024
 8001910:	0a7c5ac5 	.word	0x0a7c5ac5
 8001914:	cccccccd 	.word	0xcccccccd

08001918 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @brief Disable dead battery behavior.
  * @note  This feature is secured by secured UCPD1 when system implements security (TZEN=1).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* Disable dead battery behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001926:	6093      	str	r3, [r2, #8]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40007000 	.word	0x40007000

08001938 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800194e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	e00a      	b.n	800196c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d103      	bne.n	8001968 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	e001      	b.n	800196c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001968:	2300      	movs	r3, #0
 800196a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800196c:	687b      	ldr	r3, [r7, #4]
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40007000 	.word	0x40007000

08001980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	f000 bc5c 	b.w	800224c <HAL_RCC_OscConfig+0x8cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001994:	4ba4      	ldr	r3, [pc, #656]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800199e:	4ba2      	ldr	r3, [pc, #648]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80e2 	beq.w	8001b7a <HAL_RCC_OscConfig+0x1fa>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <HAL_RCC_OscConfig+0x4c>
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	f040 8089 	bne.w	8001ad6 <HAL_RCC_OscConfig+0x156>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	f040 8085 	bne.w	8001ad6 <HAL_RCC_OscConfig+0x156>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019cc:	4b96      	ldr	r3, [pc, #600]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_RCC_OscConfig+0x66>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	f000 bc33 	b.w	800224c <HAL_RCC_OscConfig+0x8cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ea:	4b8f      	ldr	r3, [pc, #572]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <HAL_RCC_OscConfig+0x80>
 80019f6:	4b8c      	ldr	r3, [pc, #560]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019fe:	e005      	b.n	8001a0c <HAL_RCC_OscConfig+0x8c>
 8001a00:	4b89      	ldr	r3, [pc, #548]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d224      	bcs.n	8001a5a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fe15 	bl	8002644 <RCC_SetFlashLatencyFromMSIRange>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	f000 bc13 	b.w	800224c <HAL_RCC_OscConfig+0x8cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a26:	4b80      	ldr	r3, [pc, #512]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a7f      	ldr	r2, [pc, #508]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b7d      	ldr	r3, [pc, #500]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	497a      	ldr	r1, [pc, #488]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a44:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	4975      	ldr	r1, [pc, #468]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
 8001a58:	e025      	b.n	8001aa6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a5a:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a72      	ldr	r2, [pc, #456]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a60:	f043 0308 	orr.w	r3, r3, #8
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b70      	ldr	r3, [pc, #448]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	496d      	ldr	r1, [pc, #436]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a78:	4b6b      	ldr	r3, [pc, #428]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	4968      	ldr	r1, [pc, #416]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_CFGR_SWS_MSI)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fdd4 	bl	8002644 <RCC_SetFlashLatencyFromMSIRange>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e3d2      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 fcff 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8001aaa:	4601      	mov	r1, r0
 8001aac:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	4a5d      	ldr	r2, [pc, #372]	; (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	5cd3      	ldrb	r3, [r2, r3]
 8001aba:	fa21 f303 	lsr.w	r3, r1, r3
 8001abe:	4a5c      	ldr	r2, [pc, #368]	; (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001ac0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff f944 	bl	8000d50 <HAL_InitTick>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d052      	beq.n	8001b78 <HAL_RCC_OscConfig+0x1f8>
        {
          return status;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	e3ba      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d032      	beq.n	8001b44 <HAL_RCC_OscConfig+0x1c4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ade:	4b52      	ldr	r3, [pc, #328]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a51      	ldr	r2, [pc, #324]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aea:	f7ff f97d 	bl	8000de8 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x184>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af2:	f7ff f979 	bl	8000de8 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x184>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e3a3      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b04:	4b48      	ldr	r3, [pc, #288]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x172>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b10:	4b45      	ldr	r3, [pc, #276]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	493f      	ldr	r1, [pc, #252]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2e:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	493a      	ldr	r1, [pc, #232]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
 8001b42:	e01a      	b.n	8001b7a <HAL_RCC_OscConfig+0x1fa>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b44:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a37      	ldr	r2, [pc, #220]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b50:	f7ff f94a 	bl	8000de8 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x1ea>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b58:	f7ff f946 	bl	8000de8 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1ea>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e370      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x1d8>
 8001b76:	e000      	b.n	8001b7a <HAL_RCC_OscConfig+0x1fa>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d072      	beq.n	8001c6c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_OscConfig+0x218>
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d10e      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x230>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d10b      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x230>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d062      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2ea>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d15e      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e34d      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x248>
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1a      	ldr	r2, [pc, #104]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e01d      	b.n	8001c04 <HAL_RCC_OscConfig+0x284>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x26c>
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0x284>
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_RCC_OscConfig+0x2a8>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01a      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f8ec 	bl	8000de8 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c12:	e00f      	b.n	8001c34 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff f8e8 	bl	8000de8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d908      	bls.n	8001c34 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e312      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08009984 	.word	0x08009984
 8001c30:	20000024 	.word	0x20000024
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c34:	4baa      	ldr	r3, [pc, #680]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0e9      	beq.n	8001c14 <HAL_RCC_OscConfig+0x294>
 8001c40:	e014      	b.n	8001c6c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff f8d1 	bl	8000de8 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x2dc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4a:	f7ff f8cd 	bl	8000de8 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b64      	cmp	r3, #100	; 0x64
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e2f7      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5c:	4ba0      	ldr	r3, [pc, #640]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2ca>
 8001c68:	e000      	b.n	8001c6c <HAL_RCC_OscConfig+0x2ec>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d060      	beq.n	8001d3a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x30a>
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	d119      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x338>
        ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d116      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c8a:	4b95      	ldr	r3, [pc, #596]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x322>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e2d4      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b8f      	ldr	r3, [pc, #572]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	061b      	lsls	r3, r3, #24
 8001cb0:	498b      	ldr	r1, [pc, #556]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb6:	e040      	b.n	8001d3a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d023      	beq.n	8001d08 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a86      	ldr	r2, [pc, #536]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f88c 	bl	8000de8 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x366>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f888 	bl	8000de8 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e2b2      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce6:	4b7e      	ldr	r3, [pc, #504]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b7b      	ldr	r3, [pc, #492]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	061b      	lsls	r3, r3, #24
 8001d00:	4977      	ldr	r1, [pc, #476]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
 8001d06:	e018      	b.n	8001d3a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d08:	4b75      	ldr	r3, [pc, #468]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a74      	ldr	r2, [pc, #464]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001d0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff f868 	bl	8000de8 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f864 	bl	8000de8 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e28e      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d2e:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d051      	beq.n	8001dea <HAL_RCC_OscConfig+0x46a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d031      	beq.n	8001db2 <HAL_RCC_OscConfig+0x432>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d108      	bne.n	8001d68 <HAL_RCC_OscConfig+0x3e8>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001d56:	4b62      	ldr	r3, [pc, #392]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5c:	4a60      	ldr	r2, [pc, #384]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001d5e:	f023 0310 	bic.w	r3, r3, #16
 8001d62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d66:	e007      	b.n	8001d78 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001d68:	4b5d      	ldr	r3, [pc, #372]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6e:	4a5c      	ldr	r2, [pc, #368]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001d70:	f043 0310 	orr.w	r3, r3, #16
 8001d74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d78:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f82e 	bl	8000de8 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x422>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff f82a 	bl	8000de8 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b07      	cmp	r3, #7
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x422>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e254      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da2:	4b4f      	ldr	r3, [pc, #316]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ef      	beq.n	8001d90 <HAL_RCC_OscConfig+0x410>
 8001db0:	e01b      	b.n	8001dea <HAL_RCC_OscConfig+0x46a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db2:	4b4b      	ldr	r3, [pc, #300]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db8:	4a49      	ldr	r2, [pc, #292]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc2:	f7ff f811 	bl	8000de8 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x45c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dca:	f7ff f80d 	bl	8000de8 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b07      	cmp	r3, #7
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e237      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ddc:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ef      	bne.n	8001dca <HAL_RCC_OscConfig+0x44a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8109 	beq.w	800200a <HAL_RCC_OscConfig+0x68a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dfc:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10d      	bne.n	8001e24 <HAL_RCC_OscConfig+0x4a4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6593      	str	r3, [r2, #88]	; 0x58
 8001e14:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e20:	2301      	movs	r3, #1
 8001e22:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e24:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <HAL_RCC_OscConfig+0x564>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d118      	bne.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e30:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_RCC_OscConfig+0x564>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2b      	ldr	r2, [pc, #172]	; (8001ee4 <HAL_RCC_OscConfig+0x564>)
 8001e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3c:	f7fe ffd4 	bl	8000de8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x4d6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e44:	f7fe ffd0 	bl	8000de8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x4d6>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1fa      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_RCC_OscConfig+0x564>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x4c4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d01f      	beq.n	8001eae <HAL_RCC_OscConfig+0x52e>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d010      	beq.n	8001e9c <HAL_RCC_OscConfig+0x51c>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e90:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e9a:	e018      	b.n	8001ece <HAL_RCC_OscConfig+0x54e>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eac:	e00f      	b.n	8001ece <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec4:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <HAL_RCC_OscConfig+0x560>)
 8001ec6:	f023 0304 	bic.w	r3, r3, #4
 8001eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d058      	beq.n	8001f88 <HAL_RCC_OscConfig+0x608>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7fe ff87 	bl	8000de8 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001edc:	e00f      	b.n	8001efe <HAL_RCC_OscConfig+0x57e>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7fe ff7e 	bl	8000de8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1a6      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	4bb1      	ldr	r3, [pc, #708]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ed      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x568>
        }
      }

      /* Enable LSESYS additionnally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <HAL_RCC_OscConfig+0x5d0>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f18:	4baa      	ldr	r3, [pc, #680]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	4aa9      	ldr	r2, [pc, #676]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8001f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x5c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7fe ff5d 	bl	8000de8 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e185      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f40:	4ba0      	ldr	r3, [pc, #640]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0ed      	beq.n	8001f2a <HAL_RCC_OscConfig+0x5aa>
 8001f4e:	e053      	b.n	8001ff8 <HAL_RCC_OscConfig+0x678>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f50:	4b9c      	ldr	r3, [pc, #624]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	4a9b      	ldr	r2, [pc, #620]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8001f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x5f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe ff41 	bl	8000de8 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x5f8>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e169      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f78:	4b92      	ldr	r3, [pc, #584]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1ed      	bne.n	8001f62 <HAL_RCC_OscConfig+0x5e2>
 8001f86:	e037      	b.n	8001ff8 <HAL_RCC_OscConfig+0x678>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7fe ff2e 	bl	8000de8 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x626>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f90:	f7fe ff2a 	bl	8000de8 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x626>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e152      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa6:	4b87      	ldr	r3, [pc, #540]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ed      	bne.n	8001f90 <HAL_RCC_OscConfig+0x610>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001fb4:	4b83      	ldr	r3, [pc, #524]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d01a      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x678>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fc2:	4b80      	ldr	r3, [pc, #512]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	4a7e      	ldr	r2, [pc, #504]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8001fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_OscConfig+0x66a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd4:	f7fe ff08 	bl	8000de8 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x66a>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e130      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fea:	4b76      	ldr	r3, [pc, #472]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ed      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x654>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ff8:	7ffb      	ldrb	r3, [r7, #31]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d105      	bne.n	800200a <HAL_RCC_OscConfig+0x68a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffe:	4b71      	ldr	r3, [pc, #452]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	4a70      	ldr	r2, [pc, #448]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002008:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	2b00      	cmp	r3, #0
 8002014:	d03c      	beq.n	8002090 <HAL_RCC_OscConfig+0x710>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01c      	beq.n	8002058 <HAL_RCC_OscConfig+0x6d8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800201e:	4b69      	ldr	r3, [pc, #420]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002020:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002024:	4a67      	ldr	r2, [pc, #412]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202e:	f7fe fedb 	bl	8000de8 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x6c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002036:	f7fe fed7 	bl	8000de8 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x6c8>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e101      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002048:	4b5e      	ldr	r3, [pc, #376]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 800204a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ef      	beq.n	8002036 <HAL_RCC_OscConfig+0x6b6>
 8002056:	e01b      	b.n	8002090 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002058:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 800205a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800205e:	4a59      	ldr	r2, [pc, #356]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7fe febe 	bl	8000de8 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x702>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002070:	f7fe feba 	bl	8000de8 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x702>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e0e4      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002082:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ef      	bne.n	8002070 <HAL_RCC_OscConfig+0x6f0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80d8 	beq.w	800224a <HAL_RCC_OscConfig+0x8ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800209a:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	f000 8092 	beq.w	80021cc <HAL_RCC_OscConfig+0x84c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d15a      	bne.n	8002166 <HAL_RCC_OscConfig+0x7e6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	4b44      	ldr	r3, [pc, #272]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a43      	ldr	r2, [pc, #268]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 80020b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe fe94 	bl	8000de8 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x756>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe fe90 	bl	8000de8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x756>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0ba      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d6:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x744>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e2:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	4b38      	ldr	r3, [pc, #224]	; (80021c8 <HAL_RCC_OscConfig+0x848>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020f2:	3a01      	subs	r2, #1
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	4311      	orrs	r1, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020fc:	0212      	lsls	r2, r2, #8
 80020fe:	4311      	orrs	r1, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002104:	0852      	lsrs	r2, r2, #1
 8002106:	3a01      	subs	r2, #1
 8002108:	0552      	lsls	r2, r2, #21
 800210a:	4311      	orrs	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002110:	0852      	lsrs	r2, r2, #1
 8002112:	3a01      	subs	r2, #1
 8002114:	0652      	lsls	r2, r2, #25
 8002116:	4311      	orrs	r1, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800211c:	06d2      	lsls	r2, r2, #27
 800211e:	430a      	orrs	r2, r1
 8002120:	4928      	ldr	r1, [pc, #160]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002122:	4313      	orrs	r3, r2
 8002124:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002126:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 800212c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002130:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800213c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7fe fe53 	bl	8000de8 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x7d8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002146:	f7fe fe4f 	bl	8000de8 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x7d8>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e079      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x7c6>
 8002164:	e071      	b.n	800224a <HAL_RCC_OscConfig+0x8ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 800216c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002170:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002172:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d105      	bne.n	800218a <HAL_RCC_OscConfig+0x80a>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002184:	f023 0303 	bic.w	r3, r3, #3
 8002188:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 8002190:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002198:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7fe fe25 	bl	8000de8 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a2:	f7fe fe21 	bl	8000de8 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x834>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e04b      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_RCC_OscConfig+0x844>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x822>
 80021c0:	e043      	b.n	800224a <HAL_RCC_OscConfig+0x8ca>
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_OscConfig+0x858>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e039      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_OscConfig+0x8d4>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0203 	and.w	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d12c      	bne.n	8002246 <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f6:	3b01      	subs	r3, #1
 80021f8:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d123      	bne.n	8002246 <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d11b      	bne.n	8002246 <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002218:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d113      	bne.n	8002246 <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	085b      	lsrs	r3, r3, #1
 800222a:	3b01      	subs	r3, #1
 800222c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d109      	bne.n	8002246 <HAL_RCC_OscConfig+0x8c6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	085b      	lsrs	r3, r3, #1
 800223e:	3b01      	subs	r3, #1
 8002240:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0x8ca>
        {
          return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_RCC_OscConfig+0x8cc>
        }
      }
    }
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3720      	adds	r7, #32
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000

08002258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e10d      	b.n	800248c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b88      	ldr	r3, [pc, #544]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d910      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b85      	ldr	r3, [pc, #532]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 020f 	bic.w	r2, r3, #15
 8002286:	4983      	ldr	r1, [pc, #524]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b81      	ldr	r3, [pc, #516]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0f5      	b.n	800248c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 808b 	beq.w	80023c4 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d134      	bne.n	8002320 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	4b78      	ldr	r3, [pc, #480]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0e2      	b.n	800248c <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022c6:	f000 fa21 	bl	800270c <RCC_GetSysClockFreqFromPLLSource>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4a73      	ldr	r2, [pc, #460]	; (800249c <HAL_RCC_ClockConfig+0x244>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d956      	bls.n	8002382 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80022d4:	4b70      	ldr	r3, [pc, #448]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10a      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022e0:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022e8:	4a6b      	ldr	r2, [pc, #428]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 80022ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e045      	b.n	8002382 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d03f      	beq.n	8002382 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002306:	2b00      	cmp	r3, #0
 8002308:	d13b      	bne.n	8002382 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800230a:	4b63      	ldr	r3, [pc, #396]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002312:	4a61      	ldr	r2, [pc, #388]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 8002314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002318:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e030      	b.n	8002382 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d107      	bne.n	8002338 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002328:	4b5b      	ldr	r3, [pc, #364]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d115      	bne.n	8002360 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0a9      	b.n	800248c <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002340:	4b55      	ldr	r3, [pc, #340]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e09d      	b.n	800248c <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002350:	4b51      	ldr	r3, [pc, #324]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e095      	b.n	800248c <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002360:	f000 f8a2 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002364:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4a4c      	ldr	r2, [pc, #304]	; (800249c <HAL_RCC_ClockConfig+0x244>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d909      	bls.n	8002382 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800236e:	4b4a      	ldr	r3, [pc, #296]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002376:	4a48      	ldr	r2, [pc, #288]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 8002378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 0203 	bic.w	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4942      	ldr	r1, [pc, #264]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002394:	f7fe fd28 	bl	8000de8 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	f7fe fd24 	bl	8000de8 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e06c      	b.n	800248c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 020c 	and.w	r2, r3, #12
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d1eb      	bne.n	800239c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d009      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b31      	ldr	r3, [pc, #196]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	492e      	ldr	r1, [pc, #184]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b80      	cmp	r3, #128	; 0x80
 80023e8:	d105      	bne.n	80023f6 <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023ea:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 80023f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f6:	4b27      	ldr	r3, [pc, #156]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d210      	bcs.n	8002426 <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002404:	4b23      	ldr	r3, [pc, #140]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 020f 	bic.w	r2, r3, #15
 800240c:	4921      	ldr	r1, [pc, #132]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002414:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <HAL_RCC_ClockConfig+0x23c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e032      	b.n	800248c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002432:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	4916      	ldr	r1, [pc, #88]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	490e      	ldr	r1, [pc, #56]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002464:	f000 f820 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002468:	4601      	mov	r1, r0
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_ClockConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x248>)
 8002476:	5cd3      	ldrb	r3, [r2, r3]
 8002478:	fa21 f303 	lsr.w	r3, r1, r3
 800247c:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_RCC_ClockConfig+0x24c>)
 800247e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002480:	2000      	movs	r0, #0
 8002482:	f7fe fc65 	bl	8000d50 <HAL_InitTick>
 8002486:	4603      	mov	r3, r0
 8002488:	72fb      	strb	r3, [r7, #11]

  return status;
 800248a:	7afb      	ldrb	r3, [r7, #11]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40022000 	.word	0x40022000
 8002498:	40021000 	.word	0x40021000
 800249c:	04c4b400 	.word	0x04c4b400
 80024a0:	08009984 	.word	0x08009984
 80024a4:	20000024 	.word	0x20000024

080024a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024b6:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c0:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x34>
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d121      	bne.n	800251a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d11e      	bne.n	800251a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024dc:	4b3c      	ldr	r3, [pc, #240]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024e8:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e005      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024f8:	4b35      	ldr	r3, [pc, #212]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002504:	4a33      	ldr	r2, [pc, #204]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_CFGR_SWS_MSI)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10d      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_CFGR_SWS_MSI)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_CFGR_SWS_HSI)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d102      	bne.n	8002526 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x130>)
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	e004      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_CFGR_SWS_HSE)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d101      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_RCC_GetSysClockFreq+0x134>)
 800252e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_CFGR_SWS_PLL)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d145      	bne.n	80025c2 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3301      	adds	r3, #1
 800254c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d002      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0xb2>
 8002554:	2b03      	cmp	r3, #3
 8002556:	d00d      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0xcc>
 8002558:	e019      	b.n	800258e <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800255a:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x130>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	4a1b      	ldr	r2, [pc, #108]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002564:	68d2      	ldr	r2, [r2, #12]
 8002566:	0a12      	lsrs	r2, r2, #8
 8002568:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800256c:	fb02 f303 	mul.w	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
        break;
 8002572:	e019      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_RCC_GetSysClockFreq+0x134>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x128>)
 800257e:	68d2      	ldr	r2, [r2, #12]
 8002580:	0a12      	lsrs	r2, r2, #8
 8002582:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
        break;
 800258c:	e00c      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	0a12      	lsrs	r2, r2, #8
 800259c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
        break;
 80025a6:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0e5b      	lsrs	r3, r3, #25
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	3301      	adds	r3, #1
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025c2:	69bb      	ldr	r3, [r7, #24]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3724      	adds	r7, #36	; 0x24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40021000 	.word	0x40021000
 80025d4:	0800999c 	.word	0x0800999c
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	007a1200 	.word	0x007a1200

080025e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 80025e4:	f005 fed0 	bl	8008388 <SystemCoreClockUpdate>

  return SystemCoreClock;
 80025e8:	4b01      	ldr	r3, [pc, #4]	; (80025f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000024 	.word	0x20000024

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f8:	f7ff fff2 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 80025fc:	4601      	mov	r1, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4a03      	ldr	r2, [pc, #12]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	08009994 	.word	0x08009994

0800261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002620:	f7ff ffde 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002624:	4601      	mov	r1, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	0adb      	lsrs	r3, r3, #11
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	08009994 	.word	0x08009994

08002644 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002650:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800265c:	f7ff f892 	bl	8001784 <HAL_PWREx_GetVoltageRange>
 8002660:	6138      	str	r0, [r7, #16]
 8002662:	e014      	b.n	800268e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	4a26      	ldr	r2, [pc, #152]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800266a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266e:	6593      	str	r3, [r2, #88]	; 0x58
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800267c:	f7ff f882 	bl	8001784 <HAL_PWREx_GetVoltageRange>
 8002680:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269a:	d10b      	bne.n	80026b4 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b80      	cmp	r3, #128	; 0x80
 80026a0:	d919      	bls.n	80026d6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2ba0      	cmp	r3, #160	; 0xa0
 80026a6:	d902      	bls.n	80026ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026a8:	2302      	movs	r3, #2
 80026aa:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80026ac:	e013      	b.n	80026d6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026ae:	2301      	movs	r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80026b2:	e010      	b.n	80026d6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b80      	cmp	r3, #128	; 0x80
 80026b8:	d902      	bls.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026ba:	2303      	movs	r3, #3
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	e00a      	b.n	80026d6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b80      	cmp	r3, #128	; 0x80
 80026c4:	d102      	bne.n	80026cc <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026c6:	2302      	movs	r3, #2
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e004      	b.n	80026d6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b70      	cmp	r3, #112	; 0x70
 80026d0:	d101      	bne.n	80026d6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d2:	2301      	movs	r3, #1
 80026d4:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 020f 	bic.w	r2, r3, #15
 80026de:	490a      	ldr	r1, [pc, #40]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	40022000 	.word	0x40022000

0800270c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002716:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d118      	bne.n	8002754 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002722:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800272e:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e005      	b.n	800274a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800273e:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800274a:	4a2a      	ldr	r2, [pc, #168]	; (80027f4 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002754:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	3301      	adds	r3, #1
 800276a:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d002      	beq.n	8002778 <RCC_GetSysClockFreqFromPLLSource+0x6c>
 8002772:	2b03      	cmp	r3, #3
 8002774:	d00d      	beq.n	8002792 <RCC_GetSysClockFreqFromPLLSource+0x86>
 8002776:	e019      	b.n	80027ac <RCC_GetSysClockFreqFromPLLSource+0xa0>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002778:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002782:	68d2      	ldr	r2, [r2, #12]
 8002784:	0a12      	lsrs	r2, r2, #8
 8002786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	613b      	str	r3, [r7, #16]
      break;
 8002790:	e019      	b.n	80027c6 <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002792:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	fbb2 f3f3 	udiv	r3, r2, r3
 800279a:	4a15      	ldr	r2, [pc, #84]	; (80027f0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	0a12      	lsrs	r2, r2, #8
 80027a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	613b      	str	r3, [r7, #16]
      break;
 80027aa:	e00c      	b.n	80027c6 <RCC_GetSysClockFreqFromPLLSource+0xba>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80027b6:	68d2      	ldr	r2, [r2, #12]
 80027b8:	0a12      	lsrs	r2, r2, #8
 80027ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	613b      	str	r3, [r7, #16]
      break;
 80027c4:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	0e5b      	lsrs	r3, r3, #25
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	3301      	adds	r3, #1
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80027e0:	683b      	ldr	r3, [r7, #0]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	0800999c 	.word	0x0800999c
 80027f8:	00f42400 	.word	0x00f42400
 80027fc:	007a1200 	.word	0x007a1200

08002800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e07c      	b.n	800290c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d106      	bne.n	8002832 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f871 	bl	8002914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002848:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002852:	d902      	bls.n	800285a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e002      	b.n	8002860 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800285a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002868:	d007      	beq.n	800287a <HAL_SPI_Init+0x7a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002872:	d002      	beq.n	800287a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800288a:	d903      	bls.n	8002894 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
 8002892:	e002      	b.n	800289a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	ea42 0103 	orr.w	r1, r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	f003 0204 	and.w	r2, r3, #4
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	ea42 0103 	orr.w	r1, r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002936:	2301      	movs	r3, #1
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_SPI_TransmitReceive+0x26>
 800294a:	2302      	movs	r3, #2
 800294c:	e1fb      	b.n	8002d46 <HAL_SPI_TransmitReceive+0x41e>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002956:	f7fe fa47 	bl	8000de8 <HAL_GetTick>
 800295a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002962:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002972:	7efb      	ldrb	r3, [r7, #27]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d00e      	beq.n	8002996 <HAL_SPI_TransmitReceive+0x6e>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297e:	d106      	bne.n	800298e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <HAL_SPI_TransmitReceive+0x66>
 8002988:	7efb      	ldrb	r3, [r7, #27]
 800298a:	2b04      	cmp	r3, #4
 800298c:	d003      	beq.n	8002996 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800298e:	2302      	movs	r3, #2
 8002990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002994:	e1cd      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x80>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x80>
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d103      	bne.n	80029b0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80029ae:	e1c0      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d003      	beq.n	80029c4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2205      	movs	r2, #5
 80029c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	887a      	ldrh	r2, [r7, #2]
 80029ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a06:	d802      	bhi.n	8002a0e <HAL_SPI_TransmitReceive+0xe6>
 8002a08:	8a3b      	ldrh	r3, [r7, #16]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d908      	bls.n	8002a20 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	e007      	b.n	8002a30 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a2e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3a:	2b40      	cmp	r3, #64	; 0x40
 8002a3c:	d007      	beq.n	8002a4e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a56:	d97c      	bls.n	8002b52 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_SPI_TransmitReceive+0x13e>
 8002a60:	8a7b      	ldrh	r3, [r7, #18]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d169      	bne.n	8002b3a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	881a      	ldrh	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	1c9a      	adds	r2, r3, #2
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a8a:	e056      	b.n	8002b3a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d11b      	bne.n	8002ad2 <HAL_SPI_TransmitReceive+0x1aa>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d016      	beq.n	8002ad2 <HAL_SPI_TransmitReceive+0x1aa>
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d113      	bne.n	8002ad2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	881a      	ldrh	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	1c9a      	adds	r2, r3, #2
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d11c      	bne.n	8002b1a <HAL_SPI_TransmitReceive+0x1f2>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d016      	beq.n	8002b1a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	b292      	uxth	r2, r2
 8002af8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	1c9a      	adds	r2, r3, #2
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b16:	2301      	movs	r3, #1
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b1a:	f7fe f965 	bl	8000de8 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d807      	bhi.n	8002b3a <HAL_SPI_TransmitReceive+0x212>
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b30:	d003      	beq.n	8002b3a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002b38:	e0fb      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1a3      	bne.n	8002a8c <HAL_SPI_TransmitReceive+0x164>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d19d      	bne.n	8002a8c <HAL_SPI_TransmitReceive+0x164>
 8002b50:	e0df      	b.n	8002d12 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_SPI_TransmitReceive+0x23a>
 8002b5a:	8a7b      	ldrh	r3, [r7, #18]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	f040 80cb 	bne.w	8002cf8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d912      	bls.n	8002b92 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	881a      	ldrh	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	1c9a      	adds	r2, r3, #2
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b02      	subs	r3, #2
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b90:	e0b2      	b.n	8002cf8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	7812      	ldrb	r2, [r2, #0]
 8002b9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb8:	e09e      	b.n	8002cf8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d134      	bne.n	8002c32 <HAL_SPI_TransmitReceive+0x30a>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d02f      	beq.n	8002c32 <HAL_SPI_TransmitReceive+0x30a>
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d12c      	bne.n	8002c32 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d912      	bls.n	8002c08 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	881a      	ldrh	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf2:	1c9a      	adds	r2, r3, #2
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b02      	subs	r3, #2
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c06:	e012      	b.n	8002c2e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	330c      	adds	r3, #12
 8002c12:	7812      	ldrb	r2, [r2, #0]
 8002c14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d148      	bne.n	8002cd2 <HAL_SPI_TransmitReceive+0x3aa>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d042      	beq.n	8002cd2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d923      	bls.n	8002ca0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	b292      	uxth	r2, r2
 8002c64:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	1c9a      	adds	r2, r3, #2
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b02      	subs	r3, #2
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d81f      	bhi.n	8002cce <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	e016      	b.n	8002cce <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f103 020c 	add.w	r2, r3, #12
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	7812      	ldrb	r2, [r2, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cd2:	f7fe f889 	bl	8000de8 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d803      	bhi.n	8002cea <HAL_SPI_TransmitReceive+0x3c2>
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce8:	d102      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x3c8>
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002cf6:	e01c      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f47f af5b 	bne.w	8002bba <HAL_SPI_TransmitReceive+0x292>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f47f af54 	bne.w	8002bba <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f8fe 	bl	8002f18 <SPI_EndRxTxTransaction>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	661a      	str	r2, [r3, #96]	; 0x60
 8002d2e:	e000      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002d30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d5c:	b2db      	uxtb	r3, r3
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4613      	mov	r3, r2
 8002d78:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d7a:	e04c      	b.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d82:	d048      	beq.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d84:	f7fe f830 	bl	8000de8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d902      	bls.n	8002d9a <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d13d      	bne.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db2:	d111      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dbc:	d004      	beq.n	8002dc8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc6:	d107      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de0:	d10f      	bne.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e00f      	b.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	bf0c      	ite	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	2300      	movne	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d1a3      	bne.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e4c:	e057      	b.n	8002efe <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e54:	d106      	bne.n	8002e64 <SPI_WaitFifoStateUntilTimeout+0x26>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d103      	bne.n	8002e64 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	330c      	adds	r3, #12
 8002e62:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e6a:	d048      	beq.n	8002efe <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e6c:	f7fd ffbc 	bl	8000de8 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d902      	bls.n	8002e82 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d13d      	bne.n	8002efe <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e9a:	d111      	bne.n	8002ec0 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea4:	d004      	beq.n	8002eb0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eae:	d107      	bne.n	8002ec0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ebe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec8:	d10f      	bne.n	8002eea <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e008      	b.n	8002f10 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4013      	ands	r3, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d19f      	bne.n	8002e4e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7ff ff84 	bl	8002e3e <SPI_WaitFifoStateUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e027      	b.n	8002f9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2200      	movs	r2, #0
 8002f54:	2180      	movs	r1, #128	; 0x80
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff ff07 	bl	8002d6a <SPI_WaitFlagStateUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e014      	b.n	8002f9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f7ff ff5d 	bl	8002e3e <SPI_WaitFifoStateUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8e:	f043 0220 	orr.w	r2, r3, #32
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e000      	b.n	8002f9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e042      	b.n	800303c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d106      	bne.n	8002fce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f83b 	bl	8003044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2224      	movs	r2, #36	; 0x24
 8002fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8ce 	bl	8003188 <UART_SetConfig>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e022      	b.n	800303c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f001 fba0 	bl	8004744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f001 fc27 	bl	8004888 <UART_CheckIdleState>
 800303a:	4603      	mov	r3, r0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800306e:	2b20      	cmp	r3, #32
 8003070:	f040 8083 	bne.w	800317a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_UART_Transmit+0x28>
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e07b      	b.n	800317c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_UART_Transmit+0x3a>
 800308e:	2302      	movs	r3, #2
 8003090:	e074      	b.n	800317c <HAL_UART_Transmit+0x124>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2221      	movs	r2, #33	; 0x21
 80030a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80030aa:	f7fd fe9d 	bl	8000de8 <HAL_GetTick>
 80030ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	88fa      	ldrh	r2, [r7, #6]
 80030b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c8:	d108      	bne.n	80030dc <HAL_UART_Transmit+0x84>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d104      	bne.n	80030dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	e003      	b.n	80030e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80030ec:	e02c      	b.n	8003148 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2200      	movs	r2, #0
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f001 fc0d 	bl	8004918 <UART_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e039      	b.n	800317c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10b      	bne.n	8003126 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800311c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	3302      	adds	r3, #2
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	e007      	b.n	8003136 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	3301      	adds	r3, #1
 8003134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1cc      	bne.n	80030ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2200      	movs	r2, #0
 800315c:	2140      	movs	r1, #64	; 0x40
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f001 fbda 	bl	8004918 <UART_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e006      	b.n	800317c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e000      	b.n	800317c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
  }
}
 800317c:	4618      	mov	r0, r3
 800317e:	3720      	adds	r7, #32
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	0000      	movs	r0, r0
	...

08003188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003188:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800318c:	b08a      	sub	sp, #40	; 0x28
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031bc:	4313      	orrs	r3, r2
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4baa      	ldr	r3, [pc, #680]	; (8003470 <UART_SetConfig+0x2e8>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a9f      	ldr	r2, [pc, #636]	; (8003474 <UART_SetConfig+0x2ec>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	4313      	orrs	r3, r2
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800320e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003218:	430b      	orrs	r3, r1
 800321a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	f023 010f 	bic.w	r1, r3, #15
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a90      	ldr	r2, [pc, #576]	; (8003478 <UART_SetConfig+0x2f0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d126      	bne.n	800328a <UART_SetConfig+0x102>
 800323c:	4b8f      	ldr	r3, [pc, #572]	; (800347c <UART_SetConfig+0x2f4>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	2b03      	cmp	r3, #3
 8003248:	d81a      	bhi.n	8003280 <UART_SetConfig+0xf8>
 800324a:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <UART_SetConfig+0xc8>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	08003261 	.word	0x08003261
 8003254:	08003271 	.word	0x08003271
 8003258:	08003269 	.word	0x08003269
 800325c:	08003279 	.word	0x08003279
 8003260:	2301      	movs	r3, #1
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e116      	b.n	8003496 <UART_SetConfig+0x30e>
 8003268:	2302      	movs	r3, #2
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e112      	b.n	8003496 <UART_SetConfig+0x30e>
 8003270:	2304      	movs	r3, #4
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e10e      	b.n	8003496 <UART_SetConfig+0x30e>
 8003278:	2308      	movs	r3, #8
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e10a      	b.n	8003496 <UART_SetConfig+0x30e>
 8003280:	2310      	movs	r3, #16
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003286:	bf00      	nop
 8003288:	e105      	b.n	8003496 <UART_SetConfig+0x30e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a7c      	ldr	r2, [pc, #496]	; (8003480 <UART_SetConfig+0x2f8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d138      	bne.n	8003306 <UART_SetConfig+0x17e>
 8003294:	4b79      	ldr	r3, [pc, #484]	; (800347c <UART_SetConfig+0x2f4>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	d82c      	bhi.n	80032fc <UART_SetConfig+0x174>
 80032a2:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <UART_SetConfig+0x120>)
 80032a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a8:	080032dd 	.word	0x080032dd
 80032ac:	080032fd 	.word	0x080032fd
 80032b0:	080032fd 	.word	0x080032fd
 80032b4:	080032fd 	.word	0x080032fd
 80032b8:	080032ed 	.word	0x080032ed
 80032bc:	080032fd 	.word	0x080032fd
 80032c0:	080032fd 	.word	0x080032fd
 80032c4:	080032fd 	.word	0x080032fd
 80032c8:	080032e5 	.word	0x080032e5
 80032cc:	080032fd 	.word	0x080032fd
 80032d0:	080032fd 	.word	0x080032fd
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	080032f5 	.word	0x080032f5
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e2:	e0d8      	b.n	8003496 <UART_SetConfig+0x30e>
 80032e4:	2302      	movs	r3, #2
 80032e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ea:	e0d4      	b.n	8003496 <UART_SetConfig+0x30e>
 80032ec:	2304      	movs	r3, #4
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f2:	e0d0      	b.n	8003496 <UART_SetConfig+0x30e>
 80032f4:	2308      	movs	r3, #8
 80032f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fa:	e0cc      	b.n	8003496 <UART_SetConfig+0x30e>
 80032fc:	2310      	movs	r3, #16
 80032fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003302:	bf00      	nop
 8003304:	e0c7      	b.n	8003496 <UART_SetConfig+0x30e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a5e      	ldr	r2, [pc, #376]	; (8003484 <UART_SetConfig+0x2fc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d125      	bne.n	800335c <UART_SetConfig+0x1d4>
 8003310:	4b5a      	ldr	r3, [pc, #360]	; (800347c <UART_SetConfig+0x2f4>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800331a:	2b10      	cmp	r3, #16
 800331c:	d011      	beq.n	8003342 <UART_SetConfig+0x1ba>
 800331e:	2b10      	cmp	r3, #16
 8003320:	d802      	bhi.n	8003328 <UART_SetConfig+0x1a0>
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <UART_SetConfig+0x1aa>
 8003326:	e014      	b.n	8003352 <UART_SetConfig+0x1ca>
 8003328:	2b20      	cmp	r3, #32
 800332a:	d006      	beq.n	800333a <UART_SetConfig+0x1b2>
 800332c:	2b30      	cmp	r3, #48	; 0x30
 800332e:	d00c      	beq.n	800334a <UART_SetConfig+0x1c2>
 8003330:	e00f      	b.n	8003352 <UART_SetConfig+0x1ca>
 8003332:	2300      	movs	r3, #0
 8003334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003338:	e0ad      	b.n	8003496 <UART_SetConfig+0x30e>
 800333a:	2302      	movs	r3, #2
 800333c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003340:	e0a9      	b.n	8003496 <UART_SetConfig+0x30e>
 8003342:	2304      	movs	r3, #4
 8003344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003348:	e0a5      	b.n	8003496 <UART_SetConfig+0x30e>
 800334a:	2308      	movs	r3, #8
 800334c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003350:	e0a1      	b.n	8003496 <UART_SetConfig+0x30e>
 8003352:	2310      	movs	r3, #16
 8003354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003358:	bf00      	nop
 800335a:	e09c      	b.n	8003496 <UART_SetConfig+0x30e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a49      	ldr	r2, [pc, #292]	; (8003488 <UART_SetConfig+0x300>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d125      	bne.n	80033b2 <UART_SetConfig+0x22a>
 8003366:	4b45      	ldr	r3, [pc, #276]	; (800347c <UART_SetConfig+0x2f4>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d011      	beq.n	8003398 <UART_SetConfig+0x210>
 8003374:	2b40      	cmp	r3, #64	; 0x40
 8003376:	d802      	bhi.n	800337e <UART_SetConfig+0x1f6>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <UART_SetConfig+0x200>
 800337c:	e014      	b.n	80033a8 <UART_SetConfig+0x220>
 800337e:	2b80      	cmp	r3, #128	; 0x80
 8003380:	d006      	beq.n	8003390 <UART_SetConfig+0x208>
 8003382:	2bc0      	cmp	r3, #192	; 0xc0
 8003384:	d00c      	beq.n	80033a0 <UART_SetConfig+0x218>
 8003386:	e00f      	b.n	80033a8 <UART_SetConfig+0x220>
 8003388:	2300      	movs	r3, #0
 800338a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338e:	e082      	b.n	8003496 <UART_SetConfig+0x30e>
 8003390:	2302      	movs	r3, #2
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003396:	e07e      	b.n	8003496 <UART_SetConfig+0x30e>
 8003398:	2304      	movs	r3, #4
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339e:	e07a      	b.n	8003496 <UART_SetConfig+0x30e>
 80033a0:	2308      	movs	r3, #8
 80033a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a6:	e076      	b.n	8003496 <UART_SetConfig+0x30e>
 80033a8:	2310      	movs	r3, #16
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ae:	bf00      	nop
 80033b0:	e071      	b.n	8003496 <UART_SetConfig+0x30e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a35      	ldr	r2, [pc, #212]	; (800348c <UART_SetConfig+0x304>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d129      	bne.n	8003410 <UART_SetConfig+0x288>
 80033bc:	4b2f      	ldr	r3, [pc, #188]	; (800347c <UART_SetConfig+0x2f4>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ca:	d014      	beq.n	80033f6 <UART_SetConfig+0x26e>
 80033cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d0:	d802      	bhi.n	80033d8 <UART_SetConfig+0x250>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <UART_SetConfig+0x25e>
 80033d6:	e016      	b.n	8003406 <UART_SetConfig+0x27e>
 80033d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033dc:	d007      	beq.n	80033ee <UART_SetConfig+0x266>
 80033de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e2:	d00c      	beq.n	80033fe <UART_SetConfig+0x276>
 80033e4:	e00f      	b.n	8003406 <UART_SetConfig+0x27e>
 80033e6:	2300      	movs	r3, #0
 80033e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ec:	e053      	b.n	8003496 <UART_SetConfig+0x30e>
 80033ee:	2302      	movs	r3, #2
 80033f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f4:	e04f      	b.n	8003496 <UART_SetConfig+0x30e>
 80033f6:	2304      	movs	r3, #4
 80033f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fc:	e04b      	b.n	8003496 <UART_SetConfig+0x30e>
 80033fe:	2308      	movs	r3, #8
 8003400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003404:	e047      	b.n	8003496 <UART_SetConfig+0x30e>
 8003406:	2310      	movs	r3, #16
 8003408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340c:	bf00      	nop
 800340e:	e042      	b.n	8003496 <UART_SetConfig+0x30e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a17      	ldr	r2, [pc, #92]	; (8003474 <UART_SetConfig+0x2ec>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d13a      	bne.n	8003490 <UART_SetConfig+0x308>
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <UART_SetConfig+0x2f4>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003428:	d014      	beq.n	8003454 <UART_SetConfig+0x2cc>
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d802      	bhi.n	8003436 <UART_SetConfig+0x2ae>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <UART_SetConfig+0x2bc>
 8003434:	e016      	b.n	8003464 <UART_SetConfig+0x2dc>
 8003436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343a:	d007      	beq.n	800344c <UART_SetConfig+0x2c4>
 800343c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003440:	d00c      	beq.n	800345c <UART_SetConfig+0x2d4>
 8003442:	e00f      	b.n	8003464 <UART_SetConfig+0x2dc>
 8003444:	2300      	movs	r3, #0
 8003446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344a:	e024      	b.n	8003496 <UART_SetConfig+0x30e>
 800344c:	2302      	movs	r3, #2
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003452:	e020      	b.n	8003496 <UART_SetConfig+0x30e>
 8003454:	2304      	movs	r3, #4
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e01c      	b.n	8003496 <UART_SetConfig+0x30e>
 800345c:	2308      	movs	r3, #8
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e018      	b.n	8003496 <UART_SetConfig+0x30e>
 8003464:	2310      	movs	r3, #16
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	bf00      	nop
 800346c:	e013      	b.n	8003496 <UART_SetConfig+0x30e>
 800346e:	bf00      	nop
 8003470:	cfff69f3 	.word	0xcfff69f3
 8003474:	40008000 	.word	0x40008000
 8003478:	40013800 	.word	0x40013800
 800347c:	40021000 	.word	0x40021000
 8003480:	40004400 	.word	0x40004400
 8003484:	40004800 	.word	0x40004800
 8003488:	40004c00 	.word	0x40004c00
 800348c:	40005000 	.word	0x40005000
 8003490:	2310      	movs	r3, #16
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a86      	ldr	r2, [pc, #536]	; (80036b4 <UART_SetConfig+0x52c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	f040 8512 	bne.w	8003ec6 <UART_SetConfig+0xd3e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	f200 81c4 	bhi.w	8003834 <UART_SetConfig+0x6ac>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <UART_SetConfig+0x32c>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034d9 	.word	0x080034d9
 80034b8:	0800357b 	.word	0x0800357b
 80034bc:	0800361d 	.word	0x0800361d
 80034c0:	08003835 	.word	0x08003835
 80034c4:	080036e5 	.word	0x080036e5
 80034c8:	08003835 	.word	0x08003835
 80034cc:	08003835 	.word	0x08003835
 80034d0:	08003835 	.word	0x08003835
 80034d4:	08003787 	.word	0x08003787
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80034d8:	f7ff f88c 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 80034dc:	4602      	mov	r2, r0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d044      	beq.n	8003570 <UART_SetConfig+0x3e8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d03e      	beq.n	800356c <UART_SetConfig+0x3e4>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d038      	beq.n	8003568 <UART_SetConfig+0x3e0>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d032      	beq.n	8003564 <UART_SetConfig+0x3dc>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2b04      	cmp	r3, #4
 8003504:	d02c      	beq.n	8003560 <UART_SetConfig+0x3d8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2b05      	cmp	r3, #5
 800350c:	d026      	beq.n	800355c <UART_SetConfig+0x3d4>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	2b06      	cmp	r3, #6
 8003514:	d020      	beq.n	8003558 <UART_SetConfig+0x3d0>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2b07      	cmp	r3, #7
 800351c:	d01a      	beq.n	8003554 <UART_SetConfig+0x3cc>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b08      	cmp	r3, #8
 8003524:	d014      	beq.n	8003550 <UART_SetConfig+0x3c8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2b09      	cmp	r3, #9
 800352c:	d00e      	beq.n	800354c <UART_SetConfig+0x3c4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b0a      	cmp	r3, #10
 8003534:	d008      	beq.n	8003548 <UART_SetConfig+0x3c0>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b0b      	cmp	r3, #11
 800353c:	d102      	bne.n	8003544 <UART_SetConfig+0x3bc>
 800353e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003542:	e016      	b.n	8003572 <UART_SetConfig+0x3ea>
 8003544:	2301      	movs	r3, #1
 8003546:	e014      	b.n	8003572 <UART_SetConfig+0x3ea>
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	e012      	b.n	8003572 <UART_SetConfig+0x3ea>
 800354c:	2340      	movs	r3, #64	; 0x40
 800354e:	e010      	b.n	8003572 <UART_SetConfig+0x3ea>
 8003550:	2320      	movs	r3, #32
 8003552:	e00e      	b.n	8003572 <UART_SetConfig+0x3ea>
 8003554:	2310      	movs	r3, #16
 8003556:	e00c      	b.n	8003572 <UART_SetConfig+0x3ea>
 8003558:	230c      	movs	r3, #12
 800355a:	e00a      	b.n	8003572 <UART_SetConfig+0x3ea>
 800355c:	230a      	movs	r3, #10
 800355e:	e008      	b.n	8003572 <UART_SetConfig+0x3ea>
 8003560:	2308      	movs	r3, #8
 8003562:	e006      	b.n	8003572 <UART_SetConfig+0x3ea>
 8003564:	2306      	movs	r3, #6
 8003566:	e004      	b.n	8003572 <UART_SetConfig+0x3ea>
 8003568:	2304      	movs	r3, #4
 800356a:	e002      	b.n	8003572 <UART_SetConfig+0x3ea>
 800356c:	2302      	movs	r3, #2
 800356e:	e000      	b.n	8003572 <UART_SetConfig+0x3ea>
 8003570:	2301      	movs	r3, #1
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	617b      	str	r3, [r7, #20]
        break;
 8003578:	e15f      	b.n	800383a <UART_SetConfig+0x6b2>
      case UART_CLOCKSOURCE_PCLK2:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK2Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800357a:	f7ff f84f 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 800357e:	4602      	mov	r2, r0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	2b00      	cmp	r3, #0
 8003586:	d044      	beq.n	8003612 <UART_SetConfig+0x48a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	2b01      	cmp	r3, #1
 800358e:	d03e      	beq.n	800360e <UART_SetConfig+0x486>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	2b02      	cmp	r3, #2
 8003596:	d038      	beq.n	800360a <UART_SetConfig+0x482>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2b03      	cmp	r3, #3
 800359e:	d032      	beq.n	8003606 <UART_SetConfig+0x47e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d02c      	beq.n	8003602 <UART_SetConfig+0x47a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	2b05      	cmp	r3, #5
 80035ae:	d026      	beq.n	80035fe <UART_SetConfig+0x476>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2b06      	cmp	r3, #6
 80035b6:	d020      	beq.n	80035fa <UART_SetConfig+0x472>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	2b07      	cmp	r3, #7
 80035be:	d01a      	beq.n	80035f6 <UART_SetConfig+0x46e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d014      	beq.n	80035f2 <UART_SetConfig+0x46a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	2b09      	cmp	r3, #9
 80035ce:	d00e      	beq.n	80035ee <UART_SetConfig+0x466>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2b0a      	cmp	r3, #10
 80035d6:	d008      	beq.n	80035ea <UART_SetConfig+0x462>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2b0b      	cmp	r3, #11
 80035de:	d102      	bne.n	80035e6 <UART_SetConfig+0x45e>
 80035e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035e4:	e016      	b.n	8003614 <UART_SetConfig+0x48c>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e014      	b.n	8003614 <UART_SetConfig+0x48c>
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	e012      	b.n	8003614 <UART_SetConfig+0x48c>
 80035ee:	2340      	movs	r3, #64	; 0x40
 80035f0:	e010      	b.n	8003614 <UART_SetConfig+0x48c>
 80035f2:	2320      	movs	r3, #32
 80035f4:	e00e      	b.n	8003614 <UART_SetConfig+0x48c>
 80035f6:	2310      	movs	r3, #16
 80035f8:	e00c      	b.n	8003614 <UART_SetConfig+0x48c>
 80035fa:	230c      	movs	r3, #12
 80035fc:	e00a      	b.n	8003614 <UART_SetConfig+0x48c>
 80035fe:	230a      	movs	r3, #10
 8003600:	e008      	b.n	8003614 <UART_SetConfig+0x48c>
 8003602:	2308      	movs	r3, #8
 8003604:	e006      	b.n	8003614 <UART_SetConfig+0x48c>
 8003606:	2306      	movs	r3, #6
 8003608:	e004      	b.n	8003614 <UART_SetConfig+0x48c>
 800360a:	2304      	movs	r3, #4
 800360c:	e002      	b.n	8003614 <UART_SetConfig+0x48c>
 800360e:	2302      	movs	r3, #2
 8003610:	e000      	b.n	8003614 <UART_SetConfig+0x48c>
 8003612:	2301      	movs	r3, #1
 8003614:	fbb2 f3f3 	udiv	r3, r2, r3
 8003618:	617b      	str	r3, [r7, #20]
        break;
 800361a:	e10e      	b.n	800383a <UART_SetConfig+0x6b2>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	d044      	beq.n	80036ae <UART_SetConfig+0x526>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	2b01      	cmp	r3, #1
 800362a:	d03e      	beq.n	80036aa <UART_SetConfig+0x522>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	2b02      	cmp	r3, #2
 8003632:	d038      	beq.n	80036a6 <UART_SetConfig+0x51e>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	2b03      	cmp	r3, #3
 800363a:	d032      	beq.n	80036a2 <UART_SetConfig+0x51a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	2b04      	cmp	r3, #4
 8003642:	d02c      	beq.n	800369e <UART_SetConfig+0x516>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2b05      	cmp	r3, #5
 800364a:	d026      	beq.n	800369a <UART_SetConfig+0x512>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	2b06      	cmp	r3, #6
 8003652:	d020      	beq.n	8003696 <UART_SetConfig+0x50e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	2b07      	cmp	r3, #7
 800365a:	d01a      	beq.n	8003692 <UART_SetConfig+0x50a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	2b08      	cmp	r3, #8
 8003662:	d014      	beq.n	800368e <UART_SetConfig+0x506>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	2b09      	cmp	r3, #9
 800366a:	d00e      	beq.n	800368a <UART_SetConfig+0x502>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	2b0a      	cmp	r3, #10
 8003672:	d008      	beq.n	8003686 <UART_SetConfig+0x4fe>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	2b0b      	cmp	r3, #11
 800367a:	d102      	bne.n	8003682 <UART_SetConfig+0x4fa>
 800367c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003680:	e016      	b.n	80036b0 <UART_SetConfig+0x528>
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <UART_SetConfig+0x530>)
 8003684:	e014      	b.n	80036b0 <UART_SetConfig+0x528>
 8003686:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <UART_SetConfig+0x534>)
 8003688:	e012      	b.n	80036b0 <UART_SetConfig+0x528>
 800368a:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <UART_SetConfig+0x538>)
 800368c:	e010      	b.n	80036b0 <UART_SetConfig+0x528>
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <UART_SetConfig+0x53c>)
 8003690:	e00e      	b.n	80036b0 <UART_SetConfig+0x528>
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <UART_SetConfig+0x540>)
 8003694:	e00c      	b.n	80036b0 <UART_SetConfig+0x528>
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <UART_SetConfig+0x544>)
 8003698:	e00a      	b.n	80036b0 <UART_SetConfig+0x528>
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <UART_SetConfig+0x548>)
 800369c:	e008      	b.n	80036b0 <UART_SetConfig+0x528>
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <UART_SetConfig+0x54c>)
 80036a0:	e006      	b.n	80036b0 <UART_SetConfig+0x528>
 80036a2:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <UART_SetConfig+0x550>)
 80036a4:	e004      	b.n	80036b0 <UART_SetConfig+0x528>
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <UART_SetConfig+0x554>)
 80036a8:	e002      	b.n	80036b0 <UART_SetConfig+0x528>
 80036aa:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <UART_SetConfig+0x558>)
 80036ac:	e000      	b.n	80036b0 <UART_SetConfig+0x528>
 80036ae:	4b02      	ldr	r3, [pc, #8]	; (80036b8 <UART_SetConfig+0x530>)
 80036b0:	617b      	str	r3, [r7, #20]
        break;
 80036b2:	e0c2      	b.n	800383a <UART_SetConfig+0x6b2>
 80036b4:	40008000 	.word	0x40008000
 80036b8:	00f42400 	.word	0x00f42400
 80036bc:	0001e848 	.word	0x0001e848
 80036c0:	0003d090 	.word	0x0003d090
 80036c4:	0007a120 	.word	0x0007a120
 80036c8:	000f4240 	.word	0x000f4240
 80036cc:	00145855 	.word	0x00145855
 80036d0:	00186a00 	.word	0x00186a00
 80036d4:	001e8480 	.word	0x001e8480
 80036d8:	0028b0aa 	.word	0x0028b0aa
 80036dc:	003d0900 	.word	0x003d0900
 80036e0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80036e4:	f7fe fee0 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d044      	beq.n	800377c <UART_SetConfig+0x5f4>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d03e      	beq.n	8003778 <UART_SetConfig+0x5f0>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d038      	beq.n	8003774 <UART_SetConfig+0x5ec>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2b03      	cmp	r3, #3
 8003708:	d032      	beq.n	8003770 <UART_SetConfig+0x5e8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	2b04      	cmp	r3, #4
 8003710:	d02c      	beq.n	800376c <UART_SetConfig+0x5e4>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	2b05      	cmp	r3, #5
 8003718:	d026      	beq.n	8003768 <UART_SetConfig+0x5e0>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	2b06      	cmp	r3, #6
 8003720:	d020      	beq.n	8003764 <UART_SetConfig+0x5dc>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	2b07      	cmp	r3, #7
 8003728:	d01a      	beq.n	8003760 <UART_SetConfig+0x5d8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2b08      	cmp	r3, #8
 8003730:	d014      	beq.n	800375c <UART_SetConfig+0x5d4>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	2b09      	cmp	r3, #9
 8003738:	d00e      	beq.n	8003758 <UART_SetConfig+0x5d0>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2b0a      	cmp	r3, #10
 8003740:	d008      	beq.n	8003754 <UART_SetConfig+0x5cc>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	2b0b      	cmp	r3, #11
 8003748:	d102      	bne.n	8003750 <UART_SetConfig+0x5c8>
 800374a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800374e:	e016      	b.n	800377e <UART_SetConfig+0x5f6>
 8003750:	2301      	movs	r3, #1
 8003752:	e014      	b.n	800377e <UART_SetConfig+0x5f6>
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	e012      	b.n	800377e <UART_SetConfig+0x5f6>
 8003758:	2340      	movs	r3, #64	; 0x40
 800375a:	e010      	b.n	800377e <UART_SetConfig+0x5f6>
 800375c:	2320      	movs	r3, #32
 800375e:	e00e      	b.n	800377e <UART_SetConfig+0x5f6>
 8003760:	2310      	movs	r3, #16
 8003762:	e00c      	b.n	800377e <UART_SetConfig+0x5f6>
 8003764:	230c      	movs	r3, #12
 8003766:	e00a      	b.n	800377e <UART_SetConfig+0x5f6>
 8003768:	230a      	movs	r3, #10
 800376a:	e008      	b.n	800377e <UART_SetConfig+0x5f6>
 800376c:	2308      	movs	r3, #8
 800376e:	e006      	b.n	800377e <UART_SetConfig+0x5f6>
 8003770:	2306      	movs	r3, #6
 8003772:	e004      	b.n	800377e <UART_SetConfig+0x5f6>
 8003774:	2304      	movs	r3, #4
 8003776:	e002      	b.n	800377e <UART_SetConfig+0x5f6>
 8003778:	2302      	movs	r3, #2
 800377a:	e000      	b.n	800377e <UART_SetConfig+0x5f6>
 800377c:	2301      	movs	r3, #1
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	617b      	str	r3, [r7, #20]
        break;
 8003784:	e059      	b.n	800383a <UART_SetConfig+0x6b2>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	2b00      	cmp	r3, #0
 800378c:	d04e      	beq.n	800382c <UART_SetConfig+0x6a4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2b01      	cmp	r3, #1
 8003794:	d047      	beq.n	8003826 <UART_SetConfig+0x69e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	2b02      	cmp	r3, #2
 800379c:	d040      	beq.n	8003820 <UART_SetConfig+0x698>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d039      	beq.n	800381a <UART_SetConfig+0x692>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d032      	beq.n	8003814 <UART_SetConfig+0x68c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d02b      	beq.n	800380e <UART_SetConfig+0x686>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d024      	beq.n	8003808 <UART_SetConfig+0x680>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b07      	cmp	r3, #7
 80037c4:	d01d      	beq.n	8003802 <UART_SetConfig+0x67a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d016      	beq.n	80037fc <UART_SetConfig+0x674>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	2b09      	cmp	r3, #9
 80037d4:	d00f      	beq.n	80037f6 <UART_SetConfig+0x66e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	2b0a      	cmp	r3, #10
 80037dc:	d008      	beq.n	80037f0 <UART_SetConfig+0x668>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	2b0b      	cmp	r3, #11
 80037e4:	d101      	bne.n	80037ea <UART_SetConfig+0x662>
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	e022      	b.n	8003830 <UART_SetConfig+0x6a8>
 80037ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ee:	e01f      	b.n	8003830 <UART_SetConfig+0x6a8>
 80037f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f4:	e01c      	b.n	8003830 <UART_SetConfig+0x6a8>
 80037f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037fa:	e019      	b.n	8003830 <UART_SetConfig+0x6a8>
 80037fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003800:	e016      	b.n	8003830 <UART_SetConfig+0x6a8>
 8003802:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003806:	e013      	b.n	8003830 <UART_SetConfig+0x6a8>
 8003808:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800380c:	e010      	b.n	8003830 <UART_SetConfig+0x6a8>
 800380e:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003812:	e00d      	b.n	8003830 <UART_SetConfig+0x6a8>
 8003814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003818:	e00a      	b.n	8003830 <UART_SetConfig+0x6a8>
 800381a:	f241 5355 	movw	r3, #5461	; 0x1555
 800381e:	e007      	b.n	8003830 <UART_SetConfig+0x6a8>
 8003820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003824:	e004      	b.n	8003830 <UART_SetConfig+0x6a8>
 8003826:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800382a:	e001      	b.n	8003830 <UART_SetConfig+0x6a8>
 800382c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003830:	617b      	str	r3, [r7, #20]
        break;
 8003832:	e002      	b.n	800383a <UART_SetConfig+0x6b2>
      default:
        ret = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	76fb      	strb	r3, [r7, #27]
        break;
 8003838:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 8756 	beq.w	80046ee <UART_SetConfig+0x1566>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4413      	add	r3, r2
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	429a      	cmp	r2, r3
 8003850:	d305      	bcc.n	800385e <UART_SetConfig+0x6d6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	429a      	cmp	r2, r3
 800385c:	d903      	bls.n	8003866 <UART_SetConfig+0x6de>
      {
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	76fb      	strb	r3, [r7, #27]
 8003862:	f000 bf44 	b.w	80046ee <UART_SetConfig+0x1566>
      }
      else
      {
        switch (clocksource)
 8003866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800386a:	2b08      	cmp	r3, #8
 800386c:	f200 8316 	bhi.w	8003e9c <UART_SetConfig+0xd14>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <UART_SetConfig+0x6f0>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	0800389d 	.word	0x0800389d
 800387c:	080039db 	.word	0x080039db
 8003880:	08003b19 	.word	0x08003b19
 8003884:	08003e9d 	.word	0x08003e9d
 8003888:	08003c0f 	.word	0x08003c0f
 800388c:	08003e9d 	.word	0x08003e9d
 8003890:	08003e9d 	.word	0x08003e9d
 8003894:	08003e9d 	.word	0x08003e9d
 8003898:	08003d4d 	.word	0x08003d4d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800389c:	f7fe feaa 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 80038a0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f04f 0100 	mov.w	r1, #0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d067      	beq.n	8003982 <UART_SetConfig+0x7fa>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d05e      	beq.n	8003978 <UART_SetConfig+0x7f0>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d055      	beq.n	800396e <UART_SetConfig+0x7e6>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d04c      	beq.n	8003964 <UART_SetConfig+0x7dc>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d043      	beq.n	800395a <UART_SetConfig+0x7d2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d03a      	beq.n	8003950 <UART_SetConfig+0x7c8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d031      	beq.n	8003946 <UART_SetConfig+0x7be>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	2b07      	cmp	r3, #7
 80038e8:	d028      	beq.n	800393c <UART_SetConfig+0x7b4>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d01f      	beq.n	8003932 <UART_SetConfig+0x7aa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	2b09      	cmp	r3, #9
 80038f8:	d016      	beq.n	8003928 <UART_SetConfig+0x7a0>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	2b0a      	cmp	r3, #10
 8003900:	d00d      	beq.n	800391e <UART_SetConfig+0x796>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2b0b      	cmp	r3, #11
 8003908:	d104      	bne.n	8003914 <UART_SetConfig+0x78c>
 800390a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800390e:	f04f 0400 	mov.w	r4, #0
 8003912:	e03a      	b.n	800398a <UART_SetConfig+0x802>
 8003914:	f04f 0301 	mov.w	r3, #1
 8003918:	f04f 0400 	mov.w	r4, #0
 800391c:	e035      	b.n	800398a <UART_SetConfig+0x802>
 800391e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003922:	f04f 0400 	mov.w	r4, #0
 8003926:	e030      	b.n	800398a <UART_SetConfig+0x802>
 8003928:	f04f 0340 	mov.w	r3, #64	; 0x40
 800392c:	f04f 0400 	mov.w	r4, #0
 8003930:	e02b      	b.n	800398a <UART_SetConfig+0x802>
 8003932:	f04f 0320 	mov.w	r3, #32
 8003936:	f04f 0400 	mov.w	r4, #0
 800393a:	e026      	b.n	800398a <UART_SetConfig+0x802>
 800393c:	f04f 0310 	mov.w	r3, #16
 8003940:	f04f 0400 	mov.w	r4, #0
 8003944:	e021      	b.n	800398a <UART_SetConfig+0x802>
 8003946:	f04f 030c 	mov.w	r3, #12
 800394a:	f04f 0400 	mov.w	r4, #0
 800394e:	e01c      	b.n	800398a <UART_SetConfig+0x802>
 8003950:	f04f 030a 	mov.w	r3, #10
 8003954:	f04f 0400 	mov.w	r4, #0
 8003958:	e017      	b.n	800398a <UART_SetConfig+0x802>
 800395a:	f04f 0308 	mov.w	r3, #8
 800395e:	f04f 0400 	mov.w	r4, #0
 8003962:	e012      	b.n	800398a <UART_SetConfig+0x802>
 8003964:	f04f 0306 	mov.w	r3, #6
 8003968:	f04f 0400 	mov.w	r4, #0
 800396c:	e00d      	b.n	800398a <UART_SetConfig+0x802>
 800396e:	f04f 0304 	mov.w	r3, #4
 8003972:	f04f 0400 	mov.w	r4, #0
 8003976:	e008      	b.n	800398a <UART_SetConfig+0x802>
 8003978:	f04f 0302 	mov.w	r3, #2
 800397c:	f04f 0400 	mov.w	r4, #0
 8003980:	e003      	b.n	800398a <UART_SetConfig+0x802>
 8003982:	f04f 0301 	mov.w	r3, #1
 8003986:	f04f 0400 	mov.w	r4, #0
 800398a:	461a      	mov	r2, r3
 800398c:	4623      	mov	r3, r4
 800398e:	f7fc fe67 	bl	8000660 <__aeabi_uldivmod>
 8003992:	4603      	mov	r3, r0
 8003994:	460c      	mov	r4, r1
 8003996:	4619      	mov	r1, r3
 8003998:	4622      	mov	r2, r4
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	f04f 0400 	mov.w	r4, #0
 80039a2:	0214      	lsls	r4, r2, #8
 80039a4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80039a8:	020b      	lsls	r3, r1, #8
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6852      	ldr	r2, [r2, #4]
 80039ae:	0852      	lsrs	r2, r2, #1
 80039b0:	4611      	mov	r1, r2
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	eb13 0b01 	adds.w	fp, r3, r1
 80039ba:	eb44 0c02 	adc.w	ip, r4, r2
 80039be:	4658      	mov	r0, fp
 80039c0:	4661      	mov	r1, ip
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f04f 0400 	mov.w	r4, #0
 80039ca:	461a      	mov	r2, r3
 80039cc:	4623      	mov	r3, r4
 80039ce:	f7fc fe47 	bl	8000660 <__aeabi_uldivmod>
 80039d2:	4603      	mov	r3, r0
 80039d4:	460c      	mov	r4, r1
 80039d6:	61fb      	str	r3, [r7, #28]
            break;
 80039d8:	e263      	b.n	8003ea2 <UART_SetConfig+0xd1a>
          case UART_CLOCKSOURCE_PCLK2:
            pclk = HAL_RCC_GetPCLK2Freq();
 80039da:	f7fe fe1f 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 80039de:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f04f 0100 	mov.w	r1, #0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d067      	beq.n	8003ac0 <UART_SetConfig+0x938>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d05e      	beq.n	8003ab6 <UART_SetConfig+0x92e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d055      	beq.n	8003aac <UART_SetConfig+0x924>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d04c      	beq.n	8003aa2 <UART_SetConfig+0x91a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d043      	beq.n	8003a98 <UART_SetConfig+0x910>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	d03a      	beq.n	8003a8e <UART_SetConfig+0x906>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	2b06      	cmp	r3, #6
 8003a1e:	d031      	beq.n	8003a84 <UART_SetConfig+0x8fc>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	2b07      	cmp	r3, #7
 8003a26:	d028      	beq.n	8003a7a <UART_SetConfig+0x8f2>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d01f      	beq.n	8003a70 <UART_SetConfig+0x8e8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	2b09      	cmp	r3, #9
 8003a36:	d016      	beq.n	8003a66 <UART_SetConfig+0x8de>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	2b0a      	cmp	r3, #10
 8003a3e:	d00d      	beq.n	8003a5c <UART_SetConfig+0x8d4>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2b0b      	cmp	r3, #11
 8003a46:	d104      	bne.n	8003a52 <UART_SetConfig+0x8ca>
 8003a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a4c:	f04f 0400 	mov.w	r4, #0
 8003a50:	e03a      	b.n	8003ac8 <UART_SetConfig+0x940>
 8003a52:	f04f 0301 	mov.w	r3, #1
 8003a56:	f04f 0400 	mov.w	r4, #0
 8003a5a:	e035      	b.n	8003ac8 <UART_SetConfig+0x940>
 8003a5c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003a60:	f04f 0400 	mov.w	r4, #0
 8003a64:	e030      	b.n	8003ac8 <UART_SetConfig+0x940>
 8003a66:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003a6a:	f04f 0400 	mov.w	r4, #0
 8003a6e:	e02b      	b.n	8003ac8 <UART_SetConfig+0x940>
 8003a70:	f04f 0320 	mov.w	r3, #32
 8003a74:	f04f 0400 	mov.w	r4, #0
 8003a78:	e026      	b.n	8003ac8 <UART_SetConfig+0x940>
 8003a7a:	f04f 0310 	mov.w	r3, #16
 8003a7e:	f04f 0400 	mov.w	r4, #0
 8003a82:	e021      	b.n	8003ac8 <UART_SetConfig+0x940>
 8003a84:	f04f 030c 	mov.w	r3, #12
 8003a88:	f04f 0400 	mov.w	r4, #0
 8003a8c:	e01c      	b.n	8003ac8 <UART_SetConfig+0x940>
 8003a8e:	f04f 030a 	mov.w	r3, #10
 8003a92:	f04f 0400 	mov.w	r4, #0
 8003a96:	e017      	b.n	8003ac8 <UART_SetConfig+0x940>
 8003a98:	f04f 0308 	mov.w	r3, #8
 8003a9c:	f04f 0400 	mov.w	r4, #0
 8003aa0:	e012      	b.n	8003ac8 <UART_SetConfig+0x940>
 8003aa2:	f04f 0306 	mov.w	r3, #6
 8003aa6:	f04f 0400 	mov.w	r4, #0
 8003aaa:	e00d      	b.n	8003ac8 <UART_SetConfig+0x940>
 8003aac:	f04f 0304 	mov.w	r3, #4
 8003ab0:	f04f 0400 	mov.w	r4, #0
 8003ab4:	e008      	b.n	8003ac8 <UART_SetConfig+0x940>
 8003ab6:	f04f 0302 	mov.w	r3, #2
 8003aba:	f04f 0400 	mov.w	r4, #0
 8003abe:	e003      	b.n	8003ac8 <UART_SetConfig+0x940>
 8003ac0:	f04f 0301 	mov.w	r3, #1
 8003ac4:	f04f 0400 	mov.w	r4, #0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4623      	mov	r3, r4
 8003acc:	f7fc fdc8 	bl	8000660 <__aeabi_uldivmod>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	460c      	mov	r4, r1
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	f04f 0400 	mov.w	r4, #0
 8003ae0:	0214      	lsls	r4, r2, #8
 8003ae2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003ae6:	020b      	lsls	r3, r1, #8
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6852      	ldr	r2, [r2, #4]
 8003aec:	0852      	lsrs	r2, r2, #1
 8003aee:	4611      	mov	r1, r2
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	eb13 0b01 	adds.w	fp, r3, r1
 8003af8:	eb44 0c02 	adc.w	ip, r4, r2
 8003afc:	4658      	mov	r0, fp
 8003afe:	4661      	mov	r1, ip
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f04f 0400 	mov.w	r4, #0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4623      	mov	r3, r4
 8003b0c:	f7fc fda8 	bl	8000660 <__aeabi_uldivmod>
 8003b10:	4603      	mov	r3, r0
 8003b12:	460c      	mov	r4, r1
 8003b14:	61fb      	str	r3, [r7, #28]
            break;
 8003b16:	e1c4      	b.n	8003ea2 <UART_SetConfig+0xd1a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d05b      	beq.n	8003bd8 <UART_SetConfig+0xa50>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d053      	beq.n	8003bd0 <UART_SetConfig+0xa48>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d04b      	beq.n	8003bc8 <UART_SetConfig+0xa40>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d043      	beq.n	8003bc0 <UART_SetConfig+0xa38>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d03b      	beq.n	8003bb8 <UART_SetConfig+0xa30>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	2b05      	cmp	r3, #5
 8003b46:	d033      	beq.n	8003bb0 <UART_SetConfig+0xa28>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	2b06      	cmp	r3, #6
 8003b4e:	d02b      	beq.n	8003ba8 <UART_SetConfig+0xa20>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2b07      	cmp	r3, #7
 8003b56:	d023      	beq.n	8003ba0 <UART_SetConfig+0xa18>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d01b      	beq.n	8003b98 <UART_SetConfig+0xa10>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2b09      	cmp	r3, #9
 8003b66:	d013      	beq.n	8003b90 <UART_SetConfig+0xa08>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	2b0a      	cmp	r3, #10
 8003b6e:	d00b      	beq.n	8003b88 <UART_SetConfig+0xa00>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	2b0b      	cmp	r3, #11
 8003b76:	d103      	bne.n	8003b80 <UART_SetConfig+0x9f8>
 8003b78:	4bad      	ldr	r3, [pc, #692]	; (8003e30 <UART_SetConfig+0xca8>)
 8003b7a:	f04f 0400 	mov.w	r4, #0
 8003b7e:	e02e      	b.n	8003bde <UART_SetConfig+0xa56>
 8003b80:	4bac      	ldr	r3, [pc, #688]	; (8003e34 <UART_SetConfig+0xcac>)
 8003b82:	f04f 0400 	mov.w	r4, #0
 8003b86:	e02a      	b.n	8003bde <UART_SetConfig+0xa56>
 8003b88:	4bab      	ldr	r3, [pc, #684]	; (8003e38 <UART_SetConfig+0xcb0>)
 8003b8a:	f04f 0400 	mov.w	r4, #0
 8003b8e:	e026      	b.n	8003bde <UART_SetConfig+0xa56>
 8003b90:	4baa      	ldr	r3, [pc, #680]	; (8003e3c <UART_SetConfig+0xcb4>)
 8003b92:	f04f 0400 	mov.w	r4, #0
 8003b96:	e022      	b.n	8003bde <UART_SetConfig+0xa56>
 8003b98:	4ba9      	ldr	r3, [pc, #676]	; (8003e40 <UART_SetConfig+0xcb8>)
 8003b9a:	f04f 0400 	mov.w	r4, #0
 8003b9e:	e01e      	b.n	8003bde <UART_SetConfig+0xa56>
 8003ba0:	4ba8      	ldr	r3, [pc, #672]	; (8003e44 <UART_SetConfig+0xcbc>)
 8003ba2:	f04f 0400 	mov.w	r4, #0
 8003ba6:	e01a      	b.n	8003bde <UART_SetConfig+0xa56>
 8003ba8:	a49d      	add	r4, pc, #628	; (adr r4, 8003e20 <UART_SetConfig+0xc98>)
 8003baa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003bae:	e016      	b.n	8003bde <UART_SetConfig+0xa56>
 8003bb0:	4ba5      	ldr	r3, [pc, #660]	; (8003e48 <UART_SetConfig+0xcc0>)
 8003bb2:	f04f 0400 	mov.w	r4, #0
 8003bb6:	e012      	b.n	8003bde <UART_SetConfig+0xa56>
 8003bb8:	4ba4      	ldr	r3, [pc, #656]	; (8003e4c <UART_SetConfig+0xcc4>)
 8003bba:	f04f 0400 	mov.w	r4, #0
 8003bbe:	e00e      	b.n	8003bde <UART_SetConfig+0xa56>
 8003bc0:	a499      	add	r4, pc, #612	; (adr r4, 8003e28 <UART_SetConfig+0xca0>)
 8003bc2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003bc6:	e00a      	b.n	8003bde <UART_SetConfig+0xa56>
 8003bc8:	4ba1      	ldr	r3, [pc, #644]	; (8003e50 <UART_SetConfig+0xcc8>)
 8003bca:	f04f 0400 	mov.w	r4, #0
 8003bce:	e006      	b.n	8003bde <UART_SetConfig+0xa56>
 8003bd0:	4ba0      	ldr	r3, [pc, #640]	; (8003e54 <UART_SetConfig+0xccc>)
 8003bd2:	f04f 0400 	mov.w	r4, #0
 8003bd6:	e002      	b.n	8003bde <UART_SetConfig+0xa56>
 8003bd8:	4b96      	ldr	r3, [pc, #600]	; (8003e34 <UART_SetConfig+0xcac>)
 8003bda:	f04f 0400 	mov.w	r4, #0
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6852      	ldr	r2, [r2, #4]
 8003be2:	0852      	lsrs	r2, r2, #1
 8003be4:	4611      	mov	r1, r2
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	eb13 0b01 	adds.w	fp, r3, r1
 8003bee:	eb44 0c02 	adc.w	ip, r4, r2
 8003bf2:	4658      	mov	r0, fp
 8003bf4:	4661      	mov	r1, ip
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f04f 0400 	mov.w	r4, #0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4623      	mov	r3, r4
 8003c02:	f7fc fd2d 	bl	8000660 <__aeabi_uldivmod>
 8003c06:	4603      	mov	r3, r0
 8003c08:	460c      	mov	r4, r1
 8003c0a:	61fb      	str	r3, [r7, #28]
            break;
 8003c0c:	e149      	b.n	8003ea2 <UART_SetConfig+0xd1a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003c0e:	f7fe fc4b 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8003c12:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f04f 0100 	mov.w	r1, #0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d067      	beq.n	8003cf4 <UART_SetConfig+0xb6c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d05e      	beq.n	8003cea <UART_SetConfig+0xb62>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d055      	beq.n	8003ce0 <UART_SetConfig+0xb58>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d04c      	beq.n	8003cd6 <UART_SetConfig+0xb4e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d043      	beq.n	8003ccc <UART_SetConfig+0xb44>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	d03a      	beq.n	8003cc2 <UART_SetConfig+0xb3a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	2b06      	cmp	r3, #6
 8003c52:	d031      	beq.n	8003cb8 <UART_SetConfig+0xb30>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	2b07      	cmp	r3, #7
 8003c5a:	d028      	beq.n	8003cae <UART_SetConfig+0xb26>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d01f      	beq.n	8003ca4 <UART_SetConfig+0xb1c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	2b09      	cmp	r3, #9
 8003c6a:	d016      	beq.n	8003c9a <UART_SetConfig+0xb12>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	2b0a      	cmp	r3, #10
 8003c72:	d00d      	beq.n	8003c90 <UART_SetConfig+0xb08>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b0b      	cmp	r3, #11
 8003c7a:	d104      	bne.n	8003c86 <UART_SetConfig+0xafe>
 8003c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c80:	f04f 0400 	mov.w	r4, #0
 8003c84:	e03a      	b.n	8003cfc <UART_SetConfig+0xb74>
 8003c86:	f04f 0301 	mov.w	r3, #1
 8003c8a:	f04f 0400 	mov.w	r4, #0
 8003c8e:	e035      	b.n	8003cfc <UART_SetConfig+0xb74>
 8003c90:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003c94:	f04f 0400 	mov.w	r4, #0
 8003c98:	e030      	b.n	8003cfc <UART_SetConfig+0xb74>
 8003c9a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003c9e:	f04f 0400 	mov.w	r4, #0
 8003ca2:	e02b      	b.n	8003cfc <UART_SetConfig+0xb74>
 8003ca4:	f04f 0320 	mov.w	r3, #32
 8003ca8:	f04f 0400 	mov.w	r4, #0
 8003cac:	e026      	b.n	8003cfc <UART_SetConfig+0xb74>
 8003cae:	f04f 0310 	mov.w	r3, #16
 8003cb2:	f04f 0400 	mov.w	r4, #0
 8003cb6:	e021      	b.n	8003cfc <UART_SetConfig+0xb74>
 8003cb8:	f04f 030c 	mov.w	r3, #12
 8003cbc:	f04f 0400 	mov.w	r4, #0
 8003cc0:	e01c      	b.n	8003cfc <UART_SetConfig+0xb74>
 8003cc2:	f04f 030a 	mov.w	r3, #10
 8003cc6:	f04f 0400 	mov.w	r4, #0
 8003cca:	e017      	b.n	8003cfc <UART_SetConfig+0xb74>
 8003ccc:	f04f 0308 	mov.w	r3, #8
 8003cd0:	f04f 0400 	mov.w	r4, #0
 8003cd4:	e012      	b.n	8003cfc <UART_SetConfig+0xb74>
 8003cd6:	f04f 0306 	mov.w	r3, #6
 8003cda:	f04f 0400 	mov.w	r4, #0
 8003cde:	e00d      	b.n	8003cfc <UART_SetConfig+0xb74>
 8003ce0:	f04f 0304 	mov.w	r3, #4
 8003ce4:	f04f 0400 	mov.w	r4, #0
 8003ce8:	e008      	b.n	8003cfc <UART_SetConfig+0xb74>
 8003cea:	f04f 0302 	mov.w	r3, #2
 8003cee:	f04f 0400 	mov.w	r4, #0
 8003cf2:	e003      	b.n	8003cfc <UART_SetConfig+0xb74>
 8003cf4:	f04f 0301 	mov.w	r3, #1
 8003cf8:	f04f 0400 	mov.w	r4, #0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4623      	mov	r3, r4
 8003d00:	f7fc fcae 	bl	8000660 <__aeabi_uldivmod>
 8003d04:	4603      	mov	r3, r0
 8003d06:	460c      	mov	r4, r1
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	f04f 0400 	mov.w	r4, #0
 8003d14:	0214      	lsls	r4, r2, #8
 8003d16:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d1a:	020b      	lsls	r3, r1, #8
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6852      	ldr	r2, [r2, #4]
 8003d20:	0852      	lsrs	r2, r2, #1
 8003d22:	4611      	mov	r1, r2
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	eb13 0b01 	adds.w	fp, r3, r1
 8003d2c:	eb44 0c02 	adc.w	ip, r4, r2
 8003d30:	4658      	mov	r0, fp
 8003d32:	4661      	mov	r1, ip
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f04f 0400 	mov.w	r4, #0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4623      	mov	r3, r4
 8003d40:	f7fc fc8e 	bl	8000660 <__aeabi_uldivmod>
 8003d44:	4603      	mov	r3, r0
 8003d46:	460c      	mov	r4, r1
 8003d48:	61fb      	str	r3, [r7, #28]
            break;
 8003d4a:	e0aa      	b.n	8003ea2 <UART_SetConfig+0xd1a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8087 	beq.w	8003e64 <UART_SetConfig+0xcdc>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d05b      	beq.n	8003e16 <UART_SetConfig+0xc8e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d052      	beq.n	8003e0c <UART_SetConfig+0xc84>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d04a      	beq.n	8003e04 <UART_SetConfig+0xc7c>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d041      	beq.n	8003dfa <UART_SetConfig+0xc72>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d039      	beq.n	8003df2 <UART_SetConfig+0xc6a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d031      	beq.n	8003dea <UART_SetConfig+0xc62>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	2b07      	cmp	r3, #7
 8003d8c:	d028      	beq.n	8003de0 <UART_SetConfig+0xc58>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d01f      	beq.n	8003dd6 <UART_SetConfig+0xc4e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	2b09      	cmp	r3, #9
 8003d9c:	d016      	beq.n	8003dcc <UART_SetConfig+0xc44>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	2b0a      	cmp	r3, #10
 8003da4:	d00d      	beq.n	8003dc2 <UART_SetConfig+0xc3a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	2b0b      	cmp	r3, #11
 8003dac:	d104      	bne.n	8003db8 <UART_SetConfig+0xc30>
 8003dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db2:	f04f 0400 	mov.w	r4, #0
 8003db6:	e059      	b.n	8003e6c <UART_SetConfig+0xce4>
 8003db8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003dbc:	f04f 0400 	mov.w	r4, #0
 8003dc0:	e054      	b.n	8003e6c <UART_SetConfig+0xce4>
 8003dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dc6:	f04f 0400 	mov.w	r4, #0
 8003dca:	e04f      	b.n	8003e6c <UART_SetConfig+0xce4>
 8003dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dd0:	f04f 0400 	mov.w	r4, #0
 8003dd4:	e04a      	b.n	8003e6c <UART_SetConfig+0xce4>
 8003dd6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dda:	f04f 0400 	mov.w	r4, #0
 8003dde:	e045      	b.n	8003e6c <UART_SetConfig+0xce4>
 8003de0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003de4:	f04f 0400 	mov.w	r4, #0
 8003de8:	e040      	b.n	8003e6c <UART_SetConfig+0xce4>
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <UART_SetConfig+0xcd0>)
 8003dec:	f04f 0400 	mov.w	r4, #0
 8003df0:	e03c      	b.n	8003e6c <UART_SetConfig+0xce4>
 8003df2:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <UART_SetConfig+0xcd4>)
 8003df4:	f04f 0400 	mov.w	r4, #0
 8003df8:	e038      	b.n	8003e6c <UART_SetConfig+0xce4>
 8003dfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003dfe:	f04f 0400 	mov.w	r4, #0
 8003e02:	e033      	b.n	8003e6c <UART_SetConfig+0xce4>
 8003e04:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <UART_SetConfig+0xcd8>)
 8003e06:	f04f 0400 	mov.w	r4, #0
 8003e0a:	e02f      	b.n	8003e6c <UART_SetConfig+0xce4>
 8003e0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e10:	f04f 0400 	mov.w	r4, #0
 8003e14:	e02a      	b.n	8003e6c <UART_SetConfig+0xce4>
 8003e16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e1a:	f04f 0400 	mov.w	r4, #0
 8003e1e:	e025      	b.n	8003e6c <UART_SetConfig+0xce4>
 8003e20:	14585500 	.word	0x14585500
 8003e24:	00000000 	.word	0x00000000
 8003e28:	28b0aa00 	.word	0x28b0aa00
 8003e2c:	00000000 	.word	0x00000000
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	f4240000 	.word	0xf4240000
 8003e38:	01e84800 	.word	0x01e84800
 8003e3c:	03d09000 	.word	0x03d09000
 8003e40:	07a12000 	.word	0x07a12000
 8003e44:	0f424000 	.word	0x0f424000
 8003e48:	186a0000 	.word	0x186a0000
 8003e4c:	1e848000 	.word	0x1e848000
 8003e50:	3d090000 	.word	0x3d090000
 8003e54:	7a120000 	.word	0x7a120000
 8003e58:	000aaa00 	.word	0x000aaa00
 8003e5c:	000ccc00 	.word	0x000ccc00
 8003e60:	00155500 	.word	0x00155500
 8003e64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003e68:	f04f 0400 	mov.w	r4, #0
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6852      	ldr	r2, [r2, #4]
 8003e70:	0852      	lsrs	r2, r2, #1
 8003e72:	4611      	mov	r1, r2
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	eb13 0b01 	adds.w	fp, r3, r1
 8003e7c:	eb44 0c02 	adc.w	ip, r4, r2
 8003e80:	4658      	mov	r0, fp
 8003e82:	4661      	mov	r1, ip
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f04f 0400 	mov.w	r4, #0
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4623      	mov	r3, r4
 8003e90:	f7fc fbe6 	bl	8000660 <__aeabi_uldivmod>
 8003e94:	4603      	mov	r3, r0
 8003e96:	460c      	mov	r4, r1
 8003e98:	61fb      	str	r3, [r7, #28]
            break;
 8003e9a:	e002      	b.n	8003ea2 <UART_SetConfig+0xd1a>
          default:
            ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	76fb      	strb	r3, [r7, #27]
            break;
 8003ea0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ea8:	d309      	bcc.n	8003ebe <UART_SetConfig+0xd36>
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb0:	d205      	bcs.n	8003ebe <UART_SetConfig+0xd36>
        {
          huart->Instance->BRR = usartdiv;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	f000 bc18 	b.w	80046ee <UART_SetConfig+0x1566>
        }
        else
        {
          ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	76fb      	strb	r3, [r7, #27]
 8003ec2:	f000 bc14 	b.w	80046ee <UART_SetConfig+0x1566>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ece:	f040 8204 	bne.w	80042da <UART_SetConfig+0x1152>
  {
    switch (clocksource)
 8003ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	f200 81df 	bhi.w	800429a <UART_SetConfig+0x1112>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0xd5c>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f09 	.word	0x08003f09
 8003ee8:	08003fc1 	.word	0x08003fc1
 8003eec:	08004079 	.word	0x08004079
 8003ef0:	0800429b 	.word	0x0800429b
 8003ef4:	08004121 	.word	0x08004121
 8003ef8:	0800429b 	.word	0x0800429b
 8003efc:	0800429b 	.word	0x0800429b
 8003f00:	0800429b 	.word	0x0800429b
 8003f04:	080041d9 	.word	0x080041d9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f08:	f7fe fb74 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8003f0c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d044      	beq.n	8003fa0 <UART_SetConfig+0xe18>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d03e      	beq.n	8003f9c <UART_SetConfig+0xe14>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d038      	beq.n	8003f98 <UART_SetConfig+0xe10>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d032      	beq.n	8003f94 <UART_SetConfig+0xe0c>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d02c      	beq.n	8003f90 <UART_SetConfig+0xe08>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d026      	beq.n	8003f8c <UART_SetConfig+0xe04>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d020      	beq.n	8003f88 <UART_SetConfig+0xe00>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2b07      	cmp	r3, #7
 8003f4c:	d01a      	beq.n	8003f84 <UART_SetConfig+0xdfc>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d014      	beq.n	8003f80 <UART_SetConfig+0xdf8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b09      	cmp	r3, #9
 8003f5c:	d00e      	beq.n	8003f7c <UART_SetConfig+0xdf4>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	2b0a      	cmp	r3, #10
 8003f64:	d008      	beq.n	8003f78 <UART_SetConfig+0xdf0>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	2b0b      	cmp	r3, #11
 8003f6c:	d102      	bne.n	8003f74 <UART_SetConfig+0xdec>
 8003f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f72:	e016      	b.n	8003fa2 <UART_SetConfig+0xe1a>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e014      	b.n	8003fa2 <UART_SetConfig+0xe1a>
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	e012      	b.n	8003fa2 <UART_SetConfig+0xe1a>
 8003f7c:	2340      	movs	r3, #64	; 0x40
 8003f7e:	e010      	b.n	8003fa2 <UART_SetConfig+0xe1a>
 8003f80:	2320      	movs	r3, #32
 8003f82:	e00e      	b.n	8003fa2 <UART_SetConfig+0xe1a>
 8003f84:	2310      	movs	r3, #16
 8003f86:	e00c      	b.n	8003fa2 <UART_SetConfig+0xe1a>
 8003f88:	230c      	movs	r3, #12
 8003f8a:	e00a      	b.n	8003fa2 <UART_SetConfig+0xe1a>
 8003f8c:	230a      	movs	r3, #10
 8003f8e:	e008      	b.n	8003fa2 <UART_SetConfig+0xe1a>
 8003f90:	2308      	movs	r3, #8
 8003f92:	e006      	b.n	8003fa2 <UART_SetConfig+0xe1a>
 8003f94:	2306      	movs	r3, #6
 8003f96:	e004      	b.n	8003fa2 <UART_SetConfig+0xe1a>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	e002      	b.n	8003fa2 <UART_SetConfig+0xe1a>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e000      	b.n	8003fa2 <UART_SetConfig+0xe1a>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	005a      	lsls	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	441a      	add	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	61fb      	str	r3, [r7, #28]
        break;
 8003fbe:	e16f      	b.n	80042a0 <UART_SetConfig+0x1118>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc0:	f7fe fb2c 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8003fc4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d044      	beq.n	8004058 <UART_SetConfig+0xed0>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d03e      	beq.n	8004054 <UART_SetConfig+0xecc>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d038      	beq.n	8004050 <UART_SetConfig+0xec8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d032      	beq.n	800404c <UART_SetConfig+0xec4>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d02c      	beq.n	8004048 <UART_SetConfig+0xec0>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d026      	beq.n	8004044 <UART_SetConfig+0xebc>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d020      	beq.n	8004040 <UART_SetConfig+0xeb8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b07      	cmp	r3, #7
 8004004:	d01a      	beq.n	800403c <UART_SetConfig+0xeb4>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b08      	cmp	r3, #8
 800400c:	d014      	beq.n	8004038 <UART_SetConfig+0xeb0>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b09      	cmp	r3, #9
 8004014:	d00e      	beq.n	8004034 <UART_SetConfig+0xeac>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b0a      	cmp	r3, #10
 800401c:	d008      	beq.n	8004030 <UART_SetConfig+0xea8>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b0b      	cmp	r3, #11
 8004024:	d102      	bne.n	800402c <UART_SetConfig+0xea4>
 8004026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800402a:	e016      	b.n	800405a <UART_SetConfig+0xed2>
 800402c:	2301      	movs	r3, #1
 800402e:	e014      	b.n	800405a <UART_SetConfig+0xed2>
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	e012      	b.n	800405a <UART_SetConfig+0xed2>
 8004034:	2340      	movs	r3, #64	; 0x40
 8004036:	e010      	b.n	800405a <UART_SetConfig+0xed2>
 8004038:	2320      	movs	r3, #32
 800403a:	e00e      	b.n	800405a <UART_SetConfig+0xed2>
 800403c:	2310      	movs	r3, #16
 800403e:	e00c      	b.n	800405a <UART_SetConfig+0xed2>
 8004040:	230c      	movs	r3, #12
 8004042:	e00a      	b.n	800405a <UART_SetConfig+0xed2>
 8004044:	230a      	movs	r3, #10
 8004046:	e008      	b.n	800405a <UART_SetConfig+0xed2>
 8004048:	2308      	movs	r3, #8
 800404a:	e006      	b.n	800405a <UART_SetConfig+0xed2>
 800404c:	2306      	movs	r3, #6
 800404e:	e004      	b.n	800405a <UART_SetConfig+0xed2>
 8004050:	2304      	movs	r3, #4
 8004052:	e002      	b.n	800405a <UART_SetConfig+0xed2>
 8004054:	2302      	movs	r3, #2
 8004056:	e000      	b.n	800405a <UART_SetConfig+0xed2>
 8004058:	2301      	movs	r3, #1
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	005a      	lsls	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	085b      	lsrs	r3, r3, #1
 8004068:	441a      	add	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004072:	b29b      	uxth	r3, r3
 8004074:	61fb      	str	r3, [r7, #28]
        break;
 8004076:	e113      	b.n	80042a0 <UART_SetConfig+0x1118>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	d043      	beq.n	8004108 <UART_SetConfig+0xf80>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	2b01      	cmp	r3, #1
 8004086:	d03d      	beq.n	8004104 <UART_SetConfig+0xf7c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	2b02      	cmp	r3, #2
 800408e:	d037      	beq.n	8004100 <UART_SetConfig+0xf78>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	2b03      	cmp	r3, #3
 8004096:	d031      	beq.n	80040fc <UART_SetConfig+0xf74>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	2b04      	cmp	r3, #4
 800409e:	d02b      	beq.n	80040f8 <UART_SetConfig+0xf70>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d025      	beq.n	80040f4 <UART_SetConfig+0xf6c>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	2b06      	cmp	r3, #6
 80040ae:	d01f      	beq.n	80040f0 <UART_SetConfig+0xf68>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	2b07      	cmp	r3, #7
 80040b6:	d019      	beq.n	80040ec <UART_SetConfig+0xf64>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d013      	beq.n	80040e8 <UART_SetConfig+0xf60>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	2b09      	cmp	r3, #9
 80040c6:	d00d      	beq.n	80040e4 <UART_SetConfig+0xf5c>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	2b0a      	cmp	r3, #10
 80040ce:	d007      	beq.n	80040e0 <UART_SetConfig+0xf58>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	2b0b      	cmp	r3, #11
 80040d6:	d101      	bne.n	80040dc <UART_SetConfig+0xf54>
 80040d8:	4b8d      	ldr	r3, [pc, #564]	; (8004310 <UART_SetConfig+0x1188>)
 80040da:	e016      	b.n	800410a <UART_SetConfig+0xf82>
 80040dc:	4b8d      	ldr	r3, [pc, #564]	; (8004314 <UART_SetConfig+0x118c>)
 80040de:	e014      	b.n	800410a <UART_SetConfig+0xf82>
 80040e0:	4b8d      	ldr	r3, [pc, #564]	; (8004318 <UART_SetConfig+0x1190>)
 80040e2:	e012      	b.n	800410a <UART_SetConfig+0xf82>
 80040e4:	4b8d      	ldr	r3, [pc, #564]	; (800431c <UART_SetConfig+0x1194>)
 80040e6:	e010      	b.n	800410a <UART_SetConfig+0xf82>
 80040e8:	4b8d      	ldr	r3, [pc, #564]	; (8004320 <UART_SetConfig+0x1198>)
 80040ea:	e00e      	b.n	800410a <UART_SetConfig+0xf82>
 80040ec:	4b8d      	ldr	r3, [pc, #564]	; (8004324 <UART_SetConfig+0x119c>)
 80040ee:	e00c      	b.n	800410a <UART_SetConfig+0xf82>
 80040f0:	4b8d      	ldr	r3, [pc, #564]	; (8004328 <UART_SetConfig+0x11a0>)
 80040f2:	e00a      	b.n	800410a <UART_SetConfig+0xf82>
 80040f4:	4b8d      	ldr	r3, [pc, #564]	; (800432c <UART_SetConfig+0x11a4>)
 80040f6:	e008      	b.n	800410a <UART_SetConfig+0xf82>
 80040f8:	4b8d      	ldr	r3, [pc, #564]	; (8004330 <UART_SetConfig+0x11a8>)
 80040fa:	e006      	b.n	800410a <UART_SetConfig+0xf82>
 80040fc:	4b8d      	ldr	r3, [pc, #564]	; (8004334 <UART_SetConfig+0x11ac>)
 80040fe:	e004      	b.n	800410a <UART_SetConfig+0xf82>
 8004100:	4b8d      	ldr	r3, [pc, #564]	; (8004338 <UART_SetConfig+0x11b0>)
 8004102:	e002      	b.n	800410a <UART_SetConfig+0xf82>
 8004104:	4b8d      	ldr	r3, [pc, #564]	; (800433c <UART_SetConfig+0x11b4>)
 8004106:	e000      	b.n	800410a <UART_SetConfig+0xf82>
 8004108:	4b82      	ldr	r3, [pc, #520]	; (8004314 <UART_SetConfig+0x118c>)
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6852      	ldr	r2, [r2, #4]
 800410e:	0852      	lsrs	r2, r2, #1
 8004110:	441a      	add	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	b29b      	uxth	r3, r3
 800411c:	61fb      	str	r3, [r7, #28]
        break;
 800411e:	e0bf      	b.n	80042a0 <UART_SetConfig+0x1118>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004120:	f7fe f9c2 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8004124:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	2b00      	cmp	r3, #0
 800412c:	d044      	beq.n	80041b8 <UART_SetConfig+0x1030>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	2b01      	cmp	r3, #1
 8004134:	d03e      	beq.n	80041b4 <UART_SetConfig+0x102c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	2b02      	cmp	r3, #2
 800413c:	d038      	beq.n	80041b0 <UART_SetConfig+0x1028>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	2b03      	cmp	r3, #3
 8004144:	d032      	beq.n	80041ac <UART_SetConfig+0x1024>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	2b04      	cmp	r3, #4
 800414c:	d02c      	beq.n	80041a8 <UART_SetConfig+0x1020>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	2b05      	cmp	r3, #5
 8004154:	d026      	beq.n	80041a4 <UART_SetConfig+0x101c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2b06      	cmp	r3, #6
 800415c:	d020      	beq.n	80041a0 <UART_SetConfig+0x1018>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	2b07      	cmp	r3, #7
 8004164:	d01a      	beq.n	800419c <UART_SetConfig+0x1014>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	2b08      	cmp	r3, #8
 800416c:	d014      	beq.n	8004198 <UART_SetConfig+0x1010>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	2b09      	cmp	r3, #9
 8004174:	d00e      	beq.n	8004194 <UART_SetConfig+0x100c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	2b0a      	cmp	r3, #10
 800417c:	d008      	beq.n	8004190 <UART_SetConfig+0x1008>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2b0b      	cmp	r3, #11
 8004184:	d102      	bne.n	800418c <UART_SetConfig+0x1004>
 8004186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800418a:	e016      	b.n	80041ba <UART_SetConfig+0x1032>
 800418c:	2301      	movs	r3, #1
 800418e:	e014      	b.n	80041ba <UART_SetConfig+0x1032>
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	e012      	b.n	80041ba <UART_SetConfig+0x1032>
 8004194:	2340      	movs	r3, #64	; 0x40
 8004196:	e010      	b.n	80041ba <UART_SetConfig+0x1032>
 8004198:	2320      	movs	r3, #32
 800419a:	e00e      	b.n	80041ba <UART_SetConfig+0x1032>
 800419c:	2310      	movs	r3, #16
 800419e:	e00c      	b.n	80041ba <UART_SetConfig+0x1032>
 80041a0:	230c      	movs	r3, #12
 80041a2:	e00a      	b.n	80041ba <UART_SetConfig+0x1032>
 80041a4:	230a      	movs	r3, #10
 80041a6:	e008      	b.n	80041ba <UART_SetConfig+0x1032>
 80041a8:	2308      	movs	r3, #8
 80041aa:	e006      	b.n	80041ba <UART_SetConfig+0x1032>
 80041ac:	2306      	movs	r3, #6
 80041ae:	e004      	b.n	80041ba <UART_SetConfig+0x1032>
 80041b0:	2304      	movs	r3, #4
 80041b2:	e002      	b.n	80041ba <UART_SetConfig+0x1032>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e000      	b.n	80041ba <UART_SetConfig+0x1032>
 80041b8:	2301      	movs	r3, #1
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	005a      	lsls	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	441a      	add	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	61fb      	str	r3, [r7, #28]
        break;
 80041d6:	e063      	b.n	80042a0 <UART_SetConfig+0x1118>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d04f      	beq.n	8004280 <UART_SetConfig+0x10f8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d048      	beq.n	800427a <UART_SetConfig+0x10f2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d041      	beq.n	8004274 <UART_SetConfig+0x10ec>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d03a      	beq.n	800426e <UART_SetConfig+0x10e6>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d033      	beq.n	8004268 <UART_SetConfig+0x10e0>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2b05      	cmp	r3, #5
 8004206:	d02c      	beq.n	8004262 <UART_SetConfig+0x10da>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	2b06      	cmp	r3, #6
 800420e:	d025      	beq.n	800425c <UART_SetConfig+0x10d4>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	2b07      	cmp	r3, #7
 8004216:	d01e      	beq.n	8004256 <UART_SetConfig+0x10ce>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2b08      	cmp	r3, #8
 800421e:	d017      	beq.n	8004250 <UART_SetConfig+0x10c8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	2b09      	cmp	r3, #9
 8004226:	d010      	beq.n	800424a <UART_SetConfig+0x10c2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2b0a      	cmp	r3, #10
 800422e:	d009      	beq.n	8004244 <UART_SetConfig+0x10bc>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	2b0b      	cmp	r3, #11
 8004236:	d102      	bne.n	800423e <UART_SetConfig+0x10b6>
 8004238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800423c:	e022      	b.n	8004284 <UART_SetConfig+0x10fc>
 800423e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004242:	e01f      	b.n	8004284 <UART_SetConfig+0x10fc>
 8004244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004248:	e01c      	b.n	8004284 <UART_SetConfig+0x10fc>
 800424a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800424e:	e019      	b.n	8004284 <UART_SetConfig+0x10fc>
 8004250:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004254:	e016      	b.n	8004284 <UART_SetConfig+0x10fc>
 8004256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800425a:	e013      	b.n	8004284 <UART_SetConfig+0x10fc>
 800425c:	f241 5354 	movw	r3, #5460	; 0x1554
 8004260:	e010      	b.n	8004284 <UART_SetConfig+0x10fc>
 8004262:	f641 1398 	movw	r3, #6552	; 0x1998
 8004266:	e00d      	b.n	8004284 <UART_SetConfig+0x10fc>
 8004268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800426c:	e00a      	b.n	8004284 <UART_SetConfig+0x10fc>
 800426e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004272:	e007      	b.n	8004284 <UART_SetConfig+0x10fc>
 8004274:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004278:	e004      	b.n	8004284 <UART_SetConfig+0x10fc>
 800427a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427e:	e001      	b.n	8004284 <UART_SetConfig+0x10fc>
 8004280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6852      	ldr	r2, [r2, #4]
 8004288:	0852      	lsrs	r2, r2, #1
 800428a:	441a      	add	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	b29b      	uxth	r3, r3
 8004296:	61fb      	str	r3, [r7, #28]
        break;
 8004298:	e002      	b.n	80042a0 <UART_SetConfig+0x1118>
      default:
        ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	76fb      	strb	r3, [r7, #27]
        break;
 800429e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	2b0f      	cmp	r3, #15
 80042a4:	d916      	bls.n	80042d4 <UART_SetConfig+0x114c>
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ac:	d212      	bcs.n	80042d4 <UART_SetConfig+0x114c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f023 030f 	bic.w	r3, r3, #15
 80042b6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	89fb      	ldrh	r3, [r7, #14]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	89fa      	ldrh	r2, [r7, #14]
 80042d0:	60da      	str	r2, [r3, #12]
 80042d2:	e20c      	b.n	80046ee <UART_SetConfig+0x1566>
    }
    else
    {
      ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	76fb      	strb	r3, [r7, #27]
 80042d8:	e209      	b.n	80046ee <UART_SetConfig+0x1566>
    }
  }
  else
  {
    switch (clocksource)
 80042da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042de:	2b08      	cmp	r3, #8
 80042e0:	f200 81f4 	bhi.w	80046cc <UART_SetConfig+0x1544>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0x1164>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	08004341 	.word	0x08004341
 80042f0:	080043f7 	.word	0x080043f7
 80042f4:	080044ad 	.word	0x080044ad
 80042f8:	080046cd 	.word	0x080046cd
 80042fc:	08004557 	.word	0x08004557
 8004300:	080046cd 	.word	0x080046cd
 8004304:	080046cd 	.word	0x080046cd
 8004308:	080046cd 	.word	0x080046cd
 800430c:	0800460d 	.word	0x0800460d
 8004310:	0001e848 	.word	0x0001e848
 8004314:	01e84800 	.word	0x01e84800
 8004318:	0003d090 	.word	0x0003d090
 800431c:	0007a120 	.word	0x0007a120
 8004320:	000f4240 	.word	0x000f4240
 8004324:	001e8480 	.word	0x001e8480
 8004328:	0028b0aa 	.word	0x0028b0aa
 800432c:	0030d400 	.word	0x0030d400
 8004330:	003d0900 	.word	0x003d0900
 8004334:	00516154 	.word	0x00516154
 8004338:	007a1200 	.word	0x007a1200
 800433c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004340:	f7fe f958 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8004344:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	2b00      	cmp	r3, #0
 800434c:	d044      	beq.n	80043d8 <UART_SetConfig+0x1250>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b01      	cmp	r3, #1
 8004354:	d03e      	beq.n	80043d4 <UART_SetConfig+0x124c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	2b02      	cmp	r3, #2
 800435c:	d038      	beq.n	80043d0 <UART_SetConfig+0x1248>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2b03      	cmp	r3, #3
 8004364:	d032      	beq.n	80043cc <UART_SetConfig+0x1244>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	2b04      	cmp	r3, #4
 800436c:	d02c      	beq.n	80043c8 <UART_SetConfig+0x1240>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	2b05      	cmp	r3, #5
 8004374:	d026      	beq.n	80043c4 <UART_SetConfig+0x123c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	2b06      	cmp	r3, #6
 800437c:	d020      	beq.n	80043c0 <UART_SetConfig+0x1238>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	2b07      	cmp	r3, #7
 8004384:	d01a      	beq.n	80043bc <UART_SetConfig+0x1234>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	2b08      	cmp	r3, #8
 800438c:	d014      	beq.n	80043b8 <UART_SetConfig+0x1230>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	2b09      	cmp	r3, #9
 8004394:	d00e      	beq.n	80043b4 <UART_SetConfig+0x122c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	2b0a      	cmp	r3, #10
 800439c:	d008      	beq.n	80043b0 <UART_SetConfig+0x1228>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	2b0b      	cmp	r3, #11
 80043a4:	d102      	bne.n	80043ac <UART_SetConfig+0x1224>
 80043a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043aa:	e016      	b.n	80043da <UART_SetConfig+0x1252>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e014      	b.n	80043da <UART_SetConfig+0x1252>
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	e012      	b.n	80043da <UART_SetConfig+0x1252>
 80043b4:	2340      	movs	r3, #64	; 0x40
 80043b6:	e010      	b.n	80043da <UART_SetConfig+0x1252>
 80043b8:	2320      	movs	r3, #32
 80043ba:	e00e      	b.n	80043da <UART_SetConfig+0x1252>
 80043bc:	2310      	movs	r3, #16
 80043be:	e00c      	b.n	80043da <UART_SetConfig+0x1252>
 80043c0:	230c      	movs	r3, #12
 80043c2:	e00a      	b.n	80043da <UART_SetConfig+0x1252>
 80043c4:	230a      	movs	r3, #10
 80043c6:	e008      	b.n	80043da <UART_SetConfig+0x1252>
 80043c8:	2308      	movs	r3, #8
 80043ca:	e006      	b.n	80043da <UART_SetConfig+0x1252>
 80043cc:	2306      	movs	r3, #6
 80043ce:	e004      	b.n	80043da <UART_SetConfig+0x1252>
 80043d0:	2304      	movs	r3, #4
 80043d2:	e002      	b.n	80043da <UART_SetConfig+0x1252>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e000      	b.n	80043da <UART_SetConfig+0x1252>
 80043d8:	2301      	movs	r3, #1
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	441a      	add	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	61fb      	str	r3, [r7, #28]
        break;
 80043f4:	e16d      	b.n	80046d2 <UART_SetConfig+0x154a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f6:	f7fe f911 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 80043fa:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	d044      	beq.n	800448e <UART_SetConfig+0x1306>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2b01      	cmp	r3, #1
 800440a:	d03e      	beq.n	800448a <UART_SetConfig+0x1302>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	2b02      	cmp	r3, #2
 8004412:	d038      	beq.n	8004486 <UART_SetConfig+0x12fe>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2b03      	cmp	r3, #3
 800441a:	d032      	beq.n	8004482 <UART_SetConfig+0x12fa>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	2b04      	cmp	r3, #4
 8004422:	d02c      	beq.n	800447e <UART_SetConfig+0x12f6>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	2b05      	cmp	r3, #5
 800442a:	d026      	beq.n	800447a <UART_SetConfig+0x12f2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	2b06      	cmp	r3, #6
 8004432:	d020      	beq.n	8004476 <UART_SetConfig+0x12ee>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	2b07      	cmp	r3, #7
 800443a:	d01a      	beq.n	8004472 <UART_SetConfig+0x12ea>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2b08      	cmp	r3, #8
 8004442:	d014      	beq.n	800446e <UART_SetConfig+0x12e6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	2b09      	cmp	r3, #9
 800444a:	d00e      	beq.n	800446a <UART_SetConfig+0x12e2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	2b0a      	cmp	r3, #10
 8004452:	d008      	beq.n	8004466 <UART_SetConfig+0x12de>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2b0b      	cmp	r3, #11
 800445a:	d102      	bne.n	8004462 <UART_SetConfig+0x12da>
 800445c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004460:	e016      	b.n	8004490 <UART_SetConfig+0x1308>
 8004462:	2301      	movs	r3, #1
 8004464:	e014      	b.n	8004490 <UART_SetConfig+0x1308>
 8004466:	2380      	movs	r3, #128	; 0x80
 8004468:	e012      	b.n	8004490 <UART_SetConfig+0x1308>
 800446a:	2340      	movs	r3, #64	; 0x40
 800446c:	e010      	b.n	8004490 <UART_SetConfig+0x1308>
 800446e:	2320      	movs	r3, #32
 8004470:	e00e      	b.n	8004490 <UART_SetConfig+0x1308>
 8004472:	2310      	movs	r3, #16
 8004474:	e00c      	b.n	8004490 <UART_SetConfig+0x1308>
 8004476:	230c      	movs	r3, #12
 8004478:	e00a      	b.n	8004490 <UART_SetConfig+0x1308>
 800447a:	230a      	movs	r3, #10
 800447c:	e008      	b.n	8004490 <UART_SetConfig+0x1308>
 800447e:	2308      	movs	r3, #8
 8004480:	e006      	b.n	8004490 <UART_SetConfig+0x1308>
 8004482:	2306      	movs	r3, #6
 8004484:	e004      	b.n	8004490 <UART_SetConfig+0x1308>
 8004486:	2304      	movs	r3, #4
 8004488:	e002      	b.n	8004490 <UART_SetConfig+0x1308>
 800448a:	2302      	movs	r3, #2
 800448c:	e000      	b.n	8004490 <UART_SetConfig+0x1308>
 800448e:	2301      	movs	r3, #1
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	fbb2 f2f3 	udiv	r2, r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	61fb      	str	r3, [r7, #28]
        break;
 80044aa:	e112      	b.n	80046d2 <UART_SetConfig+0x154a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d044      	beq.n	800453e <UART_SetConfig+0x13b6>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d03e      	beq.n	800453a <UART_SetConfig+0x13b2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d038      	beq.n	8004536 <UART_SetConfig+0x13ae>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d032      	beq.n	8004532 <UART_SetConfig+0x13aa>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d02c      	beq.n	800452e <UART_SetConfig+0x13a6>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b05      	cmp	r3, #5
 80044da:	d026      	beq.n	800452a <UART_SetConfig+0x13a2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	d020      	beq.n	8004526 <UART_SetConfig+0x139e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	2b07      	cmp	r3, #7
 80044ea:	d01a      	beq.n	8004522 <UART_SetConfig+0x139a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d014      	beq.n	800451e <UART_SetConfig+0x1396>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	2b09      	cmp	r3, #9
 80044fa:	d00e      	beq.n	800451a <UART_SetConfig+0x1392>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	2b0a      	cmp	r3, #10
 8004502:	d008      	beq.n	8004516 <UART_SetConfig+0x138e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2b0b      	cmp	r3, #11
 800450a:	d102      	bne.n	8004512 <UART_SetConfig+0x138a>
 800450c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004510:	e016      	b.n	8004540 <UART_SetConfig+0x13b8>
 8004512:	4b81      	ldr	r3, [pc, #516]	; (8004718 <UART_SetConfig+0x1590>)
 8004514:	e014      	b.n	8004540 <UART_SetConfig+0x13b8>
 8004516:	4b81      	ldr	r3, [pc, #516]	; (800471c <UART_SetConfig+0x1594>)
 8004518:	e012      	b.n	8004540 <UART_SetConfig+0x13b8>
 800451a:	4b81      	ldr	r3, [pc, #516]	; (8004720 <UART_SetConfig+0x1598>)
 800451c:	e010      	b.n	8004540 <UART_SetConfig+0x13b8>
 800451e:	4b81      	ldr	r3, [pc, #516]	; (8004724 <UART_SetConfig+0x159c>)
 8004520:	e00e      	b.n	8004540 <UART_SetConfig+0x13b8>
 8004522:	4b81      	ldr	r3, [pc, #516]	; (8004728 <UART_SetConfig+0x15a0>)
 8004524:	e00c      	b.n	8004540 <UART_SetConfig+0x13b8>
 8004526:	4b81      	ldr	r3, [pc, #516]	; (800472c <UART_SetConfig+0x15a4>)
 8004528:	e00a      	b.n	8004540 <UART_SetConfig+0x13b8>
 800452a:	4b81      	ldr	r3, [pc, #516]	; (8004730 <UART_SetConfig+0x15a8>)
 800452c:	e008      	b.n	8004540 <UART_SetConfig+0x13b8>
 800452e:	4b81      	ldr	r3, [pc, #516]	; (8004734 <UART_SetConfig+0x15ac>)
 8004530:	e006      	b.n	8004540 <UART_SetConfig+0x13b8>
 8004532:	4b81      	ldr	r3, [pc, #516]	; (8004738 <UART_SetConfig+0x15b0>)
 8004534:	e004      	b.n	8004540 <UART_SetConfig+0x13b8>
 8004536:	4b81      	ldr	r3, [pc, #516]	; (800473c <UART_SetConfig+0x15b4>)
 8004538:	e002      	b.n	8004540 <UART_SetConfig+0x13b8>
 800453a:	4b81      	ldr	r3, [pc, #516]	; (8004740 <UART_SetConfig+0x15b8>)
 800453c:	e000      	b.n	8004540 <UART_SetConfig+0x13b8>
 800453e:	4b76      	ldr	r3, [pc, #472]	; (8004718 <UART_SetConfig+0x1590>)
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6852      	ldr	r2, [r2, #4]
 8004544:	0852      	lsrs	r2, r2, #1
 8004546:	441a      	add	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	b29b      	uxth	r3, r3
 8004552:	61fb      	str	r3, [r7, #28]
        break;
 8004554:	e0bd      	b.n	80046d2 <UART_SetConfig+0x154a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004556:	f7fd ffa7 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 800455a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d044      	beq.n	80045ee <UART_SetConfig+0x1466>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	2b01      	cmp	r3, #1
 800456a:	d03e      	beq.n	80045ea <UART_SetConfig+0x1462>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b02      	cmp	r3, #2
 8004572:	d038      	beq.n	80045e6 <UART_SetConfig+0x145e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	2b03      	cmp	r3, #3
 800457a:	d032      	beq.n	80045e2 <UART_SetConfig+0x145a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	2b04      	cmp	r3, #4
 8004582:	d02c      	beq.n	80045de <UART_SetConfig+0x1456>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	2b05      	cmp	r3, #5
 800458a:	d026      	beq.n	80045da <UART_SetConfig+0x1452>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	2b06      	cmp	r3, #6
 8004592:	d020      	beq.n	80045d6 <UART_SetConfig+0x144e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	2b07      	cmp	r3, #7
 800459a:	d01a      	beq.n	80045d2 <UART_SetConfig+0x144a>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d014      	beq.n	80045ce <UART_SetConfig+0x1446>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2b09      	cmp	r3, #9
 80045aa:	d00e      	beq.n	80045ca <UART_SetConfig+0x1442>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	2b0a      	cmp	r3, #10
 80045b2:	d008      	beq.n	80045c6 <UART_SetConfig+0x143e>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	2b0b      	cmp	r3, #11
 80045ba:	d102      	bne.n	80045c2 <UART_SetConfig+0x143a>
 80045bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045c0:	e016      	b.n	80045f0 <UART_SetConfig+0x1468>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e014      	b.n	80045f0 <UART_SetConfig+0x1468>
 80045c6:	2380      	movs	r3, #128	; 0x80
 80045c8:	e012      	b.n	80045f0 <UART_SetConfig+0x1468>
 80045ca:	2340      	movs	r3, #64	; 0x40
 80045cc:	e010      	b.n	80045f0 <UART_SetConfig+0x1468>
 80045ce:	2320      	movs	r3, #32
 80045d0:	e00e      	b.n	80045f0 <UART_SetConfig+0x1468>
 80045d2:	2310      	movs	r3, #16
 80045d4:	e00c      	b.n	80045f0 <UART_SetConfig+0x1468>
 80045d6:	230c      	movs	r3, #12
 80045d8:	e00a      	b.n	80045f0 <UART_SetConfig+0x1468>
 80045da:	230a      	movs	r3, #10
 80045dc:	e008      	b.n	80045f0 <UART_SetConfig+0x1468>
 80045de:	2308      	movs	r3, #8
 80045e0:	e006      	b.n	80045f0 <UART_SetConfig+0x1468>
 80045e2:	2306      	movs	r3, #6
 80045e4:	e004      	b.n	80045f0 <UART_SetConfig+0x1468>
 80045e6:	2304      	movs	r3, #4
 80045e8:	e002      	b.n	80045f0 <UART_SetConfig+0x1468>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e000      	b.n	80045f0 <UART_SetConfig+0x1468>
 80045ee:	2301      	movs	r3, #1
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	441a      	add	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	fbb2 f3f3 	udiv	r3, r2, r3
 8004606:	b29b      	uxth	r3, r3
 8004608:	61fb      	str	r3, [r7, #28]
        break;
 800460a:	e062      	b.n	80046d2 <UART_SetConfig+0x154a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	d04e      	beq.n	80046b2 <UART_SetConfig+0x152a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	2b01      	cmp	r3, #1
 800461a:	d047      	beq.n	80046ac <UART_SetConfig+0x1524>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	2b02      	cmp	r3, #2
 8004622:	d040      	beq.n	80046a6 <UART_SetConfig+0x151e>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	2b03      	cmp	r3, #3
 800462a:	d039      	beq.n	80046a0 <UART_SetConfig+0x1518>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	2b04      	cmp	r3, #4
 8004632:	d032      	beq.n	800469a <UART_SetConfig+0x1512>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	2b05      	cmp	r3, #5
 800463a:	d02b      	beq.n	8004694 <UART_SetConfig+0x150c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	2b06      	cmp	r3, #6
 8004642:	d024      	beq.n	800468e <UART_SetConfig+0x1506>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	2b07      	cmp	r3, #7
 800464a:	d01d      	beq.n	8004688 <UART_SetConfig+0x1500>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	2b08      	cmp	r3, #8
 8004652:	d016      	beq.n	8004682 <UART_SetConfig+0x14fa>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	2b09      	cmp	r3, #9
 800465a:	d00f      	beq.n	800467c <UART_SetConfig+0x14f4>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	2b0a      	cmp	r3, #10
 8004662:	d008      	beq.n	8004676 <UART_SetConfig+0x14ee>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2b0b      	cmp	r3, #11
 800466a:	d101      	bne.n	8004670 <UART_SetConfig+0x14e8>
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	e022      	b.n	80046b6 <UART_SetConfig+0x152e>
 8004670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004674:	e01f      	b.n	80046b6 <UART_SetConfig+0x152e>
 8004676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800467a:	e01c      	b.n	80046b6 <UART_SetConfig+0x152e>
 800467c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004680:	e019      	b.n	80046b6 <UART_SetConfig+0x152e>
 8004682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004686:	e016      	b.n	80046b6 <UART_SetConfig+0x152e>
 8004688:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800468c:	e013      	b.n	80046b6 <UART_SetConfig+0x152e>
 800468e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004692:	e010      	b.n	80046b6 <UART_SetConfig+0x152e>
 8004694:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004698:	e00d      	b.n	80046b6 <UART_SetConfig+0x152e>
 800469a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800469e:	e00a      	b.n	80046b6 <UART_SetConfig+0x152e>
 80046a0:	f241 5355 	movw	r3, #5461	; 0x1555
 80046a4:	e007      	b.n	80046b6 <UART_SetConfig+0x152e>
 80046a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046aa:	e004      	b.n	80046b6 <UART_SetConfig+0x152e>
 80046ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046b0:	e001      	b.n	80046b6 <UART_SetConfig+0x152e>
 80046b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6852      	ldr	r2, [r2, #4]
 80046ba:	0852      	lsrs	r2, r2, #1
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	61fb      	str	r3, [r7, #28]
        break;
 80046ca:	e002      	b.n	80046d2 <UART_SetConfig+0x154a>
      default:
        ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	76fb      	strb	r3, [r7, #27]
        break;
 80046d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	2b0f      	cmp	r3, #15
 80046d6:	d908      	bls.n	80046ea <UART_SetConfig+0x1562>
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046de:	d204      	bcs.n	80046ea <UART_SetConfig+0x1562>
    {
      huart->Instance->BRR = usartdiv;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	e001      	b.n	80046ee <UART_SetConfig+0x1566>
    }
    else
    {
      ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800470a:	7efb      	ldrb	r3, [r7, #27]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3728      	adds	r7, #40	; 0x28
 8004710:	46bd      	mov	sp, r7
 8004712:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004716:	bf00      	nop
 8004718:	00f42400 	.word	0x00f42400
 800471c:	0001e848 	.word	0x0001e848
 8004720:	0003d090 	.word	0x0003d090
 8004724:	0007a120 	.word	0x0007a120
 8004728:	000f4240 	.word	0x000f4240
 800472c:	00145855 	.word	0x00145855
 8004730:	00186a00 	.word	0x00186a00
 8004734:	001e8480 	.word	0x001e8480
 8004738:	0028b0aa 	.word	0x0028b0aa
 800473c:	003d0900 	.word	0x003d0900
 8004740:	007a1200 	.word	0x007a1200

08004744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01a      	beq.n	800485a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004842:	d10a      	bne.n	800485a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	605a      	str	r2, [r3, #4]
  }
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af02      	add	r7, sp, #8
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004898:	f7fc faa6 	bl	8000de8 <HAL_GetTick>
 800489c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d10e      	bne.n	80048ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f82c 	bl	8004918 <UART_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e022      	b.n	8004910 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d10e      	bne.n	80048f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f816 	bl	8004918 <UART_WaitOnFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e00c      	b.n	8004910 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004928:	e062      	b.n	80049f0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004930:	d05e      	beq.n	80049f0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fc fa59 	bl	8000de8 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <UART_WaitOnFlagUntilTimeout+0x30>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11d      	bne.n	8004984 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004956:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e045      	b.n	8004a10 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d02e      	beq.n	80049f0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a0:	d126      	bne.n	80049f0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049aa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0201 	bic.w	r2, r2, #1
 80049ca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e00f      	b.n	8004a10 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69da      	ldr	r2, [r3, #28]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4013      	ands	r3, r2
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	bf0c      	ite	eq
 8004a00:	2301      	moveq	r3, #1
 8004a02:	2300      	movne	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d08d      	beq.n	800492a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <HAL_UARTEx_DisableFifoMode+0x16>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e027      	b.n	8004a7e <HAL_UARTEx_DisableFifoMode+0x66>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2224      	movs	r2, #36	; 0x24
 8004a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e02d      	b.n	8004afe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2224      	movs	r2, #36	; 0x24
 8004aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f850 	bl	8004b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e02d      	b.n	8004b7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2224      	movs	r2, #36	; 0x24
 8004b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f812 	bl	8004b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b089      	sub	sp, #36	; 0x24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004b8c:	4a2f      	ldr	r2, [pc, #188]	; (8004c4c <UARTEx_SetNbDataToProcess+0xc8>)
 8004b8e:	f107 0314 	add.w	r3, r7, #20
 8004b92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b96:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004b9a:	4a2d      	ldr	r2, [pc, #180]	; (8004c50 <UARTEx_SetNbDataToProcess+0xcc>)
 8004b9c:	f107 030c 	add.w	r3, r7, #12
 8004ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ba4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d108      	bne.n	8004bc2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bc0:	e03d      	b.n	8004c3e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004bc6:	2308      	movs	r3, #8
 8004bc8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	0e5b      	lsrs	r3, r3, #25
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	0f5b      	lsrs	r3, r3, #29
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004bea:	7fbb      	ldrb	r3, [r7, #30]
 8004bec:	7f3a      	ldrb	r2, [r7, #28]
 8004bee:	f107 0120 	add.w	r1, r7, #32
 8004bf2:	440a      	add	r2, r1
 8004bf4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004bf8:	fb02 f303 	mul.w	r3, r2, r3
 8004bfc:	7f3a      	ldrb	r2, [r7, #28]
 8004bfe:	f107 0120 	add.w	r1, r7, #32
 8004c02:	440a      	add	r2, r1
 8004c04:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004c08:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004c14:	7ffb      	ldrb	r3, [r7, #31]
 8004c16:	7f7a      	ldrb	r2, [r7, #29]
 8004c18:	f107 0120 	add.w	r1, r7, #32
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	7f7a      	ldrb	r2, [r7, #29]
 8004c28:	f107 0120 	add.w	r1, r7, #32
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004c32:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004c3e:	bf00      	nop
 8004c40:	3724      	adds	r7, #36	; 0x24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	080095d0 	.word	0x080095d0
 8004c50:	080095d8 	.word	0x080095d8

08004c54 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	; 0x30
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	71fb      	strb	r3, [r7, #7]
 8004c60:	460b      	mov	r3, r1
 8004c62:	71bb      	strb	r3, [r7, #6]
 8004c64:	4613      	mov	r3, r2
 8004c66:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8004c6c:	79bb      	ldrb	r3, [r7, #6]
 8004c6e:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8004c70:	797b      	ldrb	r3, [r7, #5]
 8004c72:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004c74:	f107 030c 	add.w	r3, r7, #12
 8004c78:	2207      	movs	r2, #7
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f003 fc90 	bl	80085a2 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004c82:	f107 0318 	add.w	r3, r7, #24
 8004c86:	2218      	movs	r2, #24
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f003 fc89 	bl	80085a2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004c90:	233f      	movs	r3, #63	; 0x3f
 8004c92:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8004c94:	238a      	movs	r3, #138	; 0x8a
 8004c96:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8004ca2:	f107 030c 	add.w	r3, r7, #12
 8004ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8004ca8:	2307      	movs	r3, #7
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004cac:	f107 0318 	add.w	r3, r7, #24
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fea8 	bl	8005a08 <hci_send_req>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	da01      	bge.n	8004cc2 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8004cbe:	23ff      	movs	r3, #255	; 0xff
 8004cc0:	e014      	b.n	8004cec <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8004cc2:	7b3b      	ldrb	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8004cc8:	7b3b      	ldrb	r3, [r7, #12]
 8004cca:	e00f      	b.n	8004cec <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8004ccc:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8004cd6:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8004ce0:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce8:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3730      	adds	r7, #48	; 0x30
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08e      	sub	sp, #56	; 0x38
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004d08:	f107 0314 	add.w	r3, r7, #20
 8004d0c:	2207      	movs	r2, #7
 8004d0e:	2100      	movs	r1, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f003 fc46 	bl	80085a2 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004d16:	f107 0320 	add.w	r3, r7, #32
 8004d1a:	2218      	movs	r2, #24
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f003 fc3f 	bl	80085a2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004d24:	233f      	movs	r3, #63	; 0x3f
 8004d26:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8004d28:	238a      	movs	r3, #138	; 0x8a
 8004d2a:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8004d2c:	f107 031c 	add.w	r3, r7, #28
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8004d32:	2301      	movs	r3, #1
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8004d36:	f107 0314 	add.w	r3, r7, #20
 8004d3a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8004d3c:	2307      	movs	r3, #7
 8004d3e:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004d40:	f107 0320 	add.w	r3, r7, #32
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fe5e 	bl	8005a08 <hci_send_req>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da01      	bge.n	8004d56 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8004d52:	23ff      	movs	r3, #255	; 0xff
 8004d54:	e014      	b.n	8004d80 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8004d56:	7d3b      	ldrb	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8004d5c:	7d3b      	ldrb	r3, [r7, #20]
 8004d5e:	e00f      	b.n	8004d80 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8004d60:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8004d6a:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8004d74:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3738      	adds	r7, #56	; 0x38
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8004d88:	b590      	push	{r4, r7, lr}
 8004d8a:	b095      	sub	sp, #84	; 0x54
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4608      	mov	r0, r1
 8004d92:	4611      	mov	r1, r2
 8004d94:	461a      	mov	r2, r3
 8004d96:	4623      	mov	r3, r4
 8004d98:	71fb      	strb	r3, [r7, #7]
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	80bb      	strh	r3, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	807b      	strh	r3, [r7, #2]
 8004da2:	4613      	mov	r3, r2
 8004da4:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8004dac:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004db0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004db4:	4413      	add	r3, r2
 8004db6:	330e      	adds	r3, #14
 8004db8:	2b28      	cmp	r3, #40	; 0x28
 8004dba:	d901      	bls.n	8004dc0 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8004dbc:	2342      	movs	r3, #66	; 0x42
 8004dbe:	e0ce      	b.n	8004f5e <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8004dc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004dc4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004dc8:	4413      	add	r3, r2
 8004dca:	79fa      	ldrb	r2, [r7, #7]
 8004dcc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004dd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8004dda:	88bb      	ldrh	r3, [r7, #4]
 8004ddc:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8004dde:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004de2:	f107 0208 	add.w	r2, r7, #8
 8004de6:	4413      	add	r3, r2
 8004de8:	88ba      	ldrh	r2, [r7, #4]
 8004dea:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8004dec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004df0:	3302      	adds	r3, #2
 8004df2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8004df6:	887b      	ldrh	r3, [r7, #2]
 8004df8:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8004dfa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004dfe:	f107 0208 	add.w	r2, r7, #8
 8004e02:	4413      	add	r3, r2
 8004e04:	887a      	ldrh	r2, [r7, #2]
 8004e06:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8004e08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e0c:	3302      	adds	r3, #2
 8004e0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8004e12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e16:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e1a:	4413      	add	r3, r2
 8004e1c:	79ba      	ldrb	r2, [r7, #6]
 8004e1e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004e22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e26:	3301      	adds	r3, #1
 8004e28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8004e2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e30:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e34:	4413      	add	r3, r2
 8004e36:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004e3a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004e3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e42:	3301      	adds	r3, #1
 8004e44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8004e48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e4c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e50:	4413      	add	r3, r2
 8004e52:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004e56:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004e5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8004e64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e68:	f107 0208 	add.w	r2, r7, #8
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8004e72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e74:	4618      	mov	r0, r3
 8004e76:	f003 fb89 	bl	800858c <memcpy>
  indx +=  LocalNameLen;
 8004e7a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004e7e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004e82:	4413      	add	r3, r2
 8004e84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8004e88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e8c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e90:	4413      	add	r3, r2
 8004e92:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8004e96:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8004e9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8004ea4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ea8:	f107 0208 	add.w	r2, r7, #8
 8004eac:	4413      	add	r3, r2
 8004eae:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8004eb2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f003 fb69 	bl	800858c <memcpy>
  indx +=  ServiceUUIDLen;  
 8004eba:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004ebe:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8004ec8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8004ecc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8004ed0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ed4:	f107 0208 	add.w	r2, r7, #8
 8004ed8:	4413      	add	r3, r2
 8004eda:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8004ede:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8004ee0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8004eea:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8004eee:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8004ef2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ef6:	f107 0208 	add.w	r2, r7, #8
 8004efa:	4413      	add	r3, r2
 8004efc:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8004f00:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8004f02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f06:	3302      	adds	r3, #2
 8004f08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004f0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f10:	2218      	movs	r2, #24
 8004f12:	2100      	movs	r1, #0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f003 fb44 	bl	80085a2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004f1a:	233f      	movs	r3, #63	; 0x3f
 8004f1c:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8004f1e:	2383      	movs	r3, #131	; 0x83
 8004f20:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8004f22:	f107 0308 	add.w	r3, r7, #8
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8004f28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f2c:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8004f2e:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004f32:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8004f34:	2301      	movs	r3, #1
 8004f36:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8004f38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fd62 	bl	8005a08 <hci_send_req>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	da01      	bge.n	8004f4e <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 8004f4a:	23ff      	movs	r3, #255	; 0xff
 8004f4c:	e007      	b.n	8004f5e <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8004f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <aci_gap_set_discoverable+0x1d4>
    return status;
 8004f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f5a:	e000      	b.n	8004f5e <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3754      	adds	r7, #84	; 0x54
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd90      	pop	{r4, r7, pc}
	...

08004f68 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b090      	sub	sp, #64	; 0x40
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	603a      	str	r2, [r7, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	4603      	mov	r3, r0
 8004f74:	71fb      	strb	r3, [r7, #7]
 8004f76:	460b      	mov	r3, r1
 8004f78:	71bb      	strb	r3, [r7, #6]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;

  cp.mitm_mode = mitm_mode;
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8004f82:	79bb      	ldrb	r3, [r7, #6]
 8004f84:	737b      	strb	r3, [r7, #13]

  //memcpy(cp.oob_data, oob_data, 16);

  cp.min_encryption_key_size = min_encryption_key_size;
 8004f86:	797b      	ldrb	r3, [r7, #5]
 8004f88:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8004f8a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004f8e:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8004f90:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004f94:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8004f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f9a:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8004f9e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004fa2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004faa:	2218      	movs	r2, #24
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f003 faf7 	bl	80085a2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004fb4:	233f      	movs	r3, #63	; 0x3f
 8004fb6:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8004fb8:	2386      	movs	r3, #134	; 0x86
 8004fba:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8004fbc:	f107 030c 	add.w	r3, r7, #12
 8004fc0:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8004fc2:	231a      	movs	r3, #26
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8004fc6:	f107 030b 	add.w	r3, r7, #11
 8004fca:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  printf("hci sending request\n");
 8004fd0:	480b      	ldr	r0, [pc, #44]	; (8005000 <aci_gap_set_auth_requirement+0x98>)
 8004fd2:	f003 fb77 	bl	80086c4 <puts>

  if (hci_send_req(&rq, FALSE) < 0)
 8004fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fd13 	bl	8005a08 <hci_send_req>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	da01      	bge.n	8004fec <aci_gap_set_auth_requirement+0x84>
    return BLE_STATUS_TIMEOUT;
 8004fe8:	23ff      	movs	r3, #255	; 0xff
 8004fea:	e005      	b.n	8004ff8 <aci_gap_set_auth_requirement+0x90>

  if (status) {
 8004fec:	7afb      	ldrb	r3, [r7, #11]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <aci_gap_set_auth_requirement+0x8e>
    return status;
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
 8004ff4:	e000      	b.n	8004ff8 <aci_gap_set_auth_requirement+0x90>
  }
    
  return 0;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3740      	adds	r7, #64	; 0x40
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	080095e0 	.word	0x080095e0

08005004 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b092      	sub	sp, #72	; 0x48
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	6039      	str	r1, [r7, #0]
 800500e:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	2b1f      	cmp	r3, #31
 800501a:	d901      	bls.n	8005020 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800501c:	2342      	movs	r3, #66	; 0x42
 800501e:	e03f      	b.n	80050a0 <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 8005020:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005024:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005028:	4413      	add	r3, r2
 800502a:	79fa      	ldrb	r2, [r7, #7]
 800502c:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8005030:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005034:	3301      	adds	r3, #1
 8005036:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800503a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800503e:	f107 0208 	add.w	r2, r7, #8
 8005042:	4413      	add	r3, r2
 8005044:	79fa      	ldrb	r2, [r7, #7]
 8005046:	6839      	ldr	r1, [r7, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f003 fa9f 	bl	800858c <memcpy>
  indx +=  AdvLen;
 800504e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	4413      	add	r3, r2
 8005056:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800505a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800505e:	2218      	movs	r2, #24
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f003 fa9d 	bl	80085a2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005068:	233f      	movs	r3, #63	; 0x3f
 800506a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800506c:	238e      	movs	r3, #142	; 0x8e
 800506e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8005070:	f107 0308 	add.w	r3, r7, #8
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8005076:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800507a:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 800507c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005080:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 8005082:	2301      	movs	r3, #1
 8005084:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8005086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fcbb 	bl	8005a08 <hci_send_req>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	da01      	bge.n	800509c <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 8005098:	23ff      	movs	r3, #255	; 0xff
 800509a:	e001      	b.n	80050a0 <aci_gap_update_adv_data+0x9c>
    
  return status;
 800509c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3748      	adds	r7, #72	; 0x48
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80050ae:	f107 0308 	add.w	r3, r7, #8
 80050b2:	2218      	movs	r2, #24
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f003 fa73 	bl	80085a2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80050bc:	233f      	movs	r3, #63	; 0x3f
 80050be:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80050c0:	f240 1301 	movw	r3, #257	; 0x101
 80050c4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80050c6:	1dfb      	adds	r3, r7, #7
 80050c8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80050ca:	2301      	movs	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80050ce:	f107 0308 	add.w	r3, r7, #8
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fc97 	bl	8005a08 <hci_send_req>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	da01      	bge.n	80050e4 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80050e0:	23ff      	movs	r3, #255	; 0xff
 80050e2:	e000      	b.n	80050e6 <aci_gatt_init+0x3e>

  return status;
 80050e4:	79fb      	ldrb	r3, [r7, #7]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3720      	adds	r7, #32
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b090      	sub	sp, #64	; 0x40
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6039      	str	r1, [r7, #0]
 80050f6:	4611      	mov	r1, r2
 80050f8:	461a      	mov	r2, r3
 80050fa:	4603      	mov	r3, r0
 80050fc:	71fb      	strb	r3, [r7, #7]
 80050fe:	460b      	mov	r3, r1
 8005100:	71bb      	strb	r3, [r7, #6]
 8005102:	4613      	mov	r3, r2
 8005104:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800510c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005110:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005114:	4413      	add	r3, r2
 8005116:	79fa      	ldrb	r2, [r7, #7]
 8005118:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800511c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005120:	3301      	adds	r3, #1
 8005122:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d103      	bne.n	8005134 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 800512c:	2302      	movs	r3, #2
 800512e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005132:	e002      	b.n	800513a <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 8005134:	2310      	movs	r3, #16
 8005136:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800513a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800513e:	f107 020c 	add.w	r2, r7, #12
 8005142:	4413      	add	r3, r2
 8005144:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f003 fa1e 	bl	800858c <memcpy>
  indx +=  uuid_len;
 8005150:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005154:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005158:	4413      	add	r3, r2
 800515a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800515e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005162:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005166:	4413      	add	r3, r2
 8005168:	79ba      	ldrb	r2, [r7, #6]
 800516a:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800516e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005172:	3301      	adds	r3, #1
 8005174:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8005178:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800517c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005180:	4413      	add	r3, r2
 8005182:	797a      	ldrb	r2, [r7, #5]
 8005184:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005188:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800518c:	3301      	adds	r3, #1
 800518e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005192:	f107 0320 	add.w	r3, r7, #32
 8005196:	2203      	movs	r2, #3
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f003 fa01 	bl	80085a2 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80051a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051a4:	2218      	movs	r2, #24
 80051a6:	2100      	movs	r1, #0
 80051a8:	4618      	mov	r0, r3
 80051aa:	f003 f9fa 	bl	80085a2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80051ae:	233f      	movs	r3, #63	; 0x3f
 80051b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80051b2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80051b6:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80051b8:	f107 030c 	add.w	r3, r7, #12
 80051bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80051be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80051c4:	f107 0320 	add.w	r3, r7, #32
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80051ca:	2303      	movs	r3, #3
 80051cc:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80051ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fc17 	bl	8005a08 <hci_send_req>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	da01      	bge.n	80051e4 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 80051e0:	23ff      	movs	r3, #255	; 0xff
 80051e2:	e00c      	b.n	80051fe <aci_gatt_add_serv+0x110>

  if (resp.status) {
 80051e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <aci_gatt_add_serv+0x104>
    return resp.status;
 80051ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051f0:	e005      	b.n	80051fe <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 80051f2:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fa:	801a      	strh	r2, [r3, #0]

  return 0;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3740      	adds	r7, #64	; 0x40
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b092      	sub	sp, #72	; 0x48
 800520a:	af00      	add	r7, sp, #0
 800520c:	603a      	str	r2, [r7, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	4603      	mov	r3, r0
 8005212:	80fb      	strh	r3, [r7, #6]
 8005214:	460b      	mov	r3, r1
 8005216:	717b      	strb	r3, [r7, #5]
 8005218:	4613      	mov	r3, r2
 800521a:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8005226:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800522a:	f107 020c 	add.w	r2, r7, #12
 800522e:	4413      	add	r3, r2
 8005230:	88fa      	ldrh	r2, [r7, #6]
 8005232:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005234:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005238:	3302      	adds	r3, #2
 800523a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800523e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005242:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005246:	4413      	add	r3, r2
 8005248:	797a      	ldrb	r2, [r7, #5]
 800524a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800524e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005252:	3301      	adds	r3, #1
 8005254:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8005258:	797b      	ldrb	r3, [r7, #5]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d103      	bne.n	8005266 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 800525e:	2302      	movs	r3, #2
 8005260:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005264:	e002      	b.n	800526c <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 8005266:	2310      	movs	r3, #16
 8005268:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800526c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005270:	f107 020c 	add.w	r2, r7, #12
 8005274:	4413      	add	r3, r2
 8005276:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800527a:	6839      	ldr	r1, [r7, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f003 f985 	bl	800858c <memcpy>
  indx +=  uuid_len;
 8005282:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8005286:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800528a:	4413      	add	r3, r2
 800528c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8005290:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005294:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005298:	4413      	add	r3, r2
 800529a:	793a      	ldrb	r2, [r7, #4]
 800529c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80052a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052a4:	3301      	adds	r3, #1
 80052a6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 80052aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052b2:	4413      	add	r3, r2
 80052b4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80052b8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80052bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052c0:	3301      	adds	r3, #1
 80052c2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 80052c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052ce:	4413      	add	r3, r2
 80052d0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80052d4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80052d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052dc:	3301      	adds	r3, #1
 80052de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 80052e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052ea:	4413      	add	r3, r2
 80052ec:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80052f0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80052f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80052f8:	3301      	adds	r3, #1
 80052fa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 80052fe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005302:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005306:	4413      	add	r3, r2
 8005308:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800530c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005310:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005314:	3301      	adds	r3, #1
 8005316:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800531a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800531e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005322:	4413      	add	r3, r2
 8005324:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8005328:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800532c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005330:	3301      	adds	r3, #1
 8005332:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800533a:	2203      	movs	r2, #3
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f003 f92f 	bl	80085a2 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005348:	2218      	movs	r2, #24
 800534a:	2100      	movs	r1, #0
 800534c:	4618      	mov	r0, r3
 800534e:	f003 f928 	bl	80085a2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005352:	233f      	movs	r3, #63	; 0x3f
 8005354:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8005356:	f44f 7382 	mov.w	r3, #260	; 0x104
 800535a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800535c:	f107 030c 	add.w	r3, r7, #12
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8005362:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005366:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8005368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800536c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800536e:	2303      	movs	r3, #3
 8005370:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8005372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fb45 	bl	8005a08 <hci_send_req>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	da01      	bge.n	8005388 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 8005384:	23ff      	movs	r3, #255	; 0xff
 8005386:	e00c      	b.n	80053a2 <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8005388:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <aci_gatt_add_char+0x190>
    return resp.status;
 8005390:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005394:	e005      	b.n	80053a2 <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 8005396:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800539a:	b29a      	uxth	r2, r3
 800539c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800539e:	801a      	strh	r2, [r3, #0]

  return 0;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3748      	adds	r7, #72	; 0x48
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80053aa:	b590      	push	{r4, r7, lr}
 80053ac:	b0ab      	sub	sp, #172	; 0xac
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	4604      	mov	r4, r0
 80053b2:	4608      	mov	r0, r1
 80053b4:	4611      	mov	r1, r2
 80053b6:	461a      	mov	r2, r3
 80053b8:	4623      	mov	r3, r4
 80053ba:	80fb      	strh	r3, [r7, #6]
 80053bc:	4603      	mov	r3, r0
 80053be:	80bb      	strh	r3, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	70fb      	strb	r3, [r7, #3]
 80053c4:	4613      	mov	r3, r2
 80053c6:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80053ce:	78bb      	ldrb	r3, [r7, #2]
 80053d0:	3306      	adds	r3, #6
 80053d2:	2b80      	cmp	r3, #128	; 0x80
 80053d4:	dd01      	ble.n	80053da <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 80053d6:	2342      	movs	r3, #66	; 0x42
 80053d8:	e076      	b.n	80054c8 <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80053de:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80053e2:	f107 0208 	add.w	r2, r7, #8
 80053e6:	4413      	add	r3, r2
 80053e8:	88fa      	ldrh	r2, [r7, #6]
 80053ea:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80053ec:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80053f0:	3302      	adds	r3, #2
 80053f2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 80053f6:	88bb      	ldrh	r3, [r7, #4]
 80053f8:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80053fa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80053fe:	f107 0208 	add.w	r2, r7, #8
 8005402:	4413      	add	r3, r2
 8005404:	88ba      	ldrh	r2, [r7, #4]
 8005406:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005408:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800540c:	3302      	adds	r3, #2
 800540e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8005412:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005416:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800541a:	4413      	add	r3, r2
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005422:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005426:	3301      	adds	r3, #1
 8005428:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800542c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005430:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005434:	4413      	add	r3, r2
 8005436:	78ba      	ldrb	r2, [r7, #2]
 8005438:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800543c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005440:	3301      	adds	r3, #1
 8005442:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8005446:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800544a:	f107 0208 	add.w	r2, r7, #8
 800544e:	4413      	add	r3, r2
 8005450:	78ba      	ldrb	r2, [r7, #2]
 8005452:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005456:	4618      	mov	r0, r3
 8005458:	f003 f898 	bl	800858c <memcpy>
  indx +=  charValueLen;
 800545c:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8005460:	78bb      	ldrb	r3, [r7, #2]
 8005462:	4413      	add	r3, r2
 8005464:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005468:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800546c:	2218      	movs	r2, #24
 800546e:	2100      	movs	r1, #0
 8005470:	4618      	mov	r0, r3
 8005472:	f003 f896 	bl	80085a2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005476:	233f      	movs	r3, #63	; 0x3f
 8005478:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800547c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8005480:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8005484:	f107 0308 	add.w	r3, r7, #8
 8005488:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800548c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8005494:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8005498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800549c:	2301      	movs	r3, #1
 800549e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 80054a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 faad 	bl	8005a08 <hci_send_req>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da01      	bge.n	80054b8 <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 80054b4:	23ff      	movs	r3, #255	; 0xff
 80054b6:	e007      	b.n	80054c8 <aci_gatt_update_char_value+0x11e>

  if (status) {
 80054b8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <aci_gatt_update_char_value+0x11c>
    return status;
 80054c0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80054c4:	e000      	b.n	80054c8 <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	37ac      	adds	r7, #172	; 0xac
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd90      	pop	{r4, r7, pc}

080054d0 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	; 0x28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 80054da:	88fb      	ldrh	r3, [r7, #6]
 80054dc:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 80054de:	f107 0310 	add.w	r3, r7, #16
 80054e2:	2218      	movs	r2, #24
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f003 f85b 	bl	80085a2 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 80054ec:	233f      	movs	r3, #63	; 0x3f
 80054ee:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 80054f0:	f240 1327 	movw	r3, #295	; 0x127
 80054f4:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 80054f6:	f107 030c 	add.w	r3, r7, #12
 80054fa:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 80054fc:	2302      	movs	r3, #2
 80054fe:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8005500:	f107 030b 	add.w	r3, r7, #11
 8005504:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8005506:	2301      	movs	r3, #1
 8005508:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800550a:	f107 0310 	add.w	r3, r7, #16
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f000 fa79 	bl	8005a08 <hci_send_req>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	da01      	bge.n	8005520 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800551c:	23ff      	movs	r3, #255	; 0xff
 800551e:	e000      	b.n	8005522 <aci_gatt_allow_read+0x52>

    return status;
 8005520:	7afb      	ldrb	r3, [r7, #11]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3728      	adds	r7, #40	; 0x28
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b0ac      	sub	sp, #176	; 0xb0
 800552e:	af00      	add	r7, sp, #0
 8005530:	60ba      	str	r2, [r7, #8]
 8005532:	607b      	str	r3, [r7, #4]
 8005534:	4603      	mov	r3, r0
 8005536:	73fb      	strb	r3, [r7, #15]
 8005538:	460b      	mov	r3, r1
 800553a:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005542:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005546:	2218      	movs	r2, #24
 8005548:	2100      	movs	r1, #0
 800554a:	4618      	mov	r0, r3
 800554c:	f003 f829 	bl	80085a2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005550:	233f      	movs	r3, #63	; 0x3f
 8005552:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8005556:	230d      	movs	r3, #13
 8005558:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 800555c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005560:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 8005564:	2301      	movs	r3, #1
 8005566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 800556a:	f107 0314 	add.w	r3, r7, #20
 800556e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 8005572:	2380      	movs	r3, #128	; 0x80
 8005574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005578:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fa42 	bl	8005a08 <hci_send_req>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	da01      	bge.n	800558e <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800558a:	23ff      	movs	r3, #255	; 0xff
 800558c:	e01c      	b.n	80055c8 <aci_hal_read_config_data+0x9e>
  
  if(rp.status)
 800558e:	7d3b      	ldrb	r3, [r7, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <aci_hal_read_config_data+0x6e>
    return rp.status;
 8005594:	7d3b      	ldrb	r3, [r7, #20]
 8005596:	e017      	b.n	80055c8 <aci_hal_read_config_data+0x9e>
  
  *data_len_out_p = rq.rlen-1;
 8005598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800559c:	b2db      	uxtb	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	89ba      	ldrh	r2, [r7, #12]
 80055ae:	4293      	cmp	r3, r2
 80055b0:	bf28      	it	cs
 80055b2:	4613      	movcs	r3, r2
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	461a      	mov	r2, r3
 80055b8:	f107 0314 	add.w	r3, r7, #20
 80055bc:	3301      	adds	r3, #1
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f002 ffe3 	bl	800858c <memcpy>
  
  return 0;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	37b0      	adds	r7, #176	; 0xb0
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	; 0x28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	460a      	mov	r2, r1
 80055da:	71fb      	strb	r3, [r7, #7]
 80055dc:	4613      	mov	r3, r2
 80055de:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 80055e4:	79bb      	ldrb	r3, [r7, #6]
 80055e6:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80055e8:	f107 0310 	add.w	r3, r7, #16
 80055ec:	2218      	movs	r2, #24
 80055ee:	2100      	movs	r1, #0
 80055f0:	4618      	mov	r0, r3
 80055f2:	f002 ffd6 	bl	80085a2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80055f6:	233f      	movs	r3, #63	; 0x3f
 80055f8:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80055fa:	230f      	movs	r3, #15
 80055fc:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 80055fe:	f107 030c 	add.w	r3, r7, #12
 8005602:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8005604:	2302      	movs	r3, #2
 8005606:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8005608:	f107 030b 	add.w	r3, r7, #11
 800560c:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800560e:	2301      	movs	r3, #1
 8005610:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8005612:	f107 0310 	add.w	r3, r7, #16
 8005616:	2100      	movs	r1, #0
 8005618:	4618      	mov	r0, r3
 800561a:	f000 f9f5 	bl	8005a08 <hci_send_req>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	da01      	bge.n	8005628 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8005624:	23ff      	movs	r3, #255	; 0xff
 8005626:	e000      	b.n	800562a <aci_hal_set_tx_power_level+0x5a>

  return status;
 8005628:	7afb      	ldrb	r3, [r7, #11]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3728      	adds	r7, #40	; 0x28
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8005632:	b590      	push	{r4, r7, lr}
 8005634:	b089      	sub	sp, #36	; 0x24
 8005636:	af02      	add	r7, sp, #8
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800563c:	f107 0410 	add.w	r4, r7, #16
 8005640:	f107 0215 	add.w	r2, r7, #21
 8005644:	f107 0112 	add.w	r1, r7, #18
 8005648:	f107 0016 	add.w	r0, r7, #22
 800564c:	f107 030e 	add.w	r3, r7, #14
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	4623      	mov	r3, r4
 8005654:	f000 f853 	bl	80056fe <hci_le_read_local_version>
 8005658:	4603      	mov	r3, r0
 800565a:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800565c:	7dfb      	ldrb	r3, [r7, #23]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d126      	bne.n	80056b0 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8005662:	8a7b      	ldrh	r3, [r7, #18]
 8005664:	0a1b      	lsrs	r3, r3, #8
 8005666:	b29b      	uxth	r3, r3
 8005668:	b2da      	uxtb	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800566e:	8a7b      	ldrh	r3, [r7, #18]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	b29a      	uxth	r2, r3
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b21a      	sxth	r2, r3
 800567e:	89fb      	ldrh	r3, [r7, #14]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	b29b      	uxth	r3, r3
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	b21b      	sxth	r3, r3
 8005688:	b2db      	uxtb	r3, r3
 800568a:	b21b      	sxth	r3, r3
 800568c:	4313      	orrs	r3, r2
 800568e:	b21b      	sxth	r3, r3
 8005690:	b29a      	uxth	r2, r3
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b21a      	sxth	r2, r3
 800569c:	89fb      	ldrh	r3, [r7, #14]
 800569e:	b21b      	sxth	r3, r3
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	b21b      	sxth	r3, r3
 80056a6:	4313      	orrs	r3, r2
 80056a8:	b21b      	sxth	r3, r3
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	801a      	strh	r2, [r3, #0]
  }
  return status;
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd90      	pop	{r4, r7, pc}

080056ba <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b088      	sub	sp, #32
 80056be:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80056c0:	f107 0308 	add.w	r3, r7, #8
 80056c4:	2218      	movs	r2, #24
 80056c6:	2100      	movs	r1, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f002 ff6a 	bl	80085a2 <memset>
  rq.ogf = OGF_HOST_CTL;
 80056ce:	2303      	movs	r3, #3
 80056d0:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 80056d2:	2303      	movs	r3, #3
 80056d4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80056d6:	1dfb      	adds	r3, r7, #7
 80056d8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80056da:	2301      	movs	r3, #1
 80056dc:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80056de:	f107 0308 	add.w	r3, r7, #8
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 f98f 	bl	8005a08 <hci_send_req>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	da01      	bge.n	80056f4 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 80056f0:	23ff      	movs	r3, #255	; 0xff
 80056f2:	e000      	b.n	80056f6 <hci_reset+0x3c>
  
  return status;  
 80056f4:	79fb      	ldrb	r3, [r7, #7]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3720      	adds	r7, #32
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b08e      	sub	sp, #56	; 0x38
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800570c:	f107 0314 	add.w	r3, r7, #20
 8005710:	2209      	movs	r2, #9
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f002 ff44 	bl	80085a2 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800571a:	f107 0320 	add.w	r3, r7, #32
 800571e:	2218      	movs	r2, #24
 8005720:	2100      	movs	r1, #0
 8005722:	4618      	mov	r0, r3
 8005724:	f002 ff3d 	bl	80085a2 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8005728:	2304      	movs	r3, #4
 800572a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800572c:	2301      	movs	r3, #1
 800572e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8005730:	2300      	movs	r3, #0
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8005738:	f107 0314 	add.w	r3, r7, #20
 800573c:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800573e:	2309      	movs	r3, #9
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005742:	f107 0320 	add.w	r3, r7, #32
 8005746:	2100      	movs	r1, #0
 8005748:	4618      	mov	r0, r3
 800574a:	f000 f95d 	bl	8005a08 <hci_send_req>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	da01      	bge.n	8005758 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8005754:	23ff      	movs	r3, #255	; 0xff
 8005756:	e018      	b.n	800578a <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8005758:	7d3b      	ldrb	r3, [r7, #20]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <hci_le_read_local_version+0x64>
    return resp.status;
 800575e:	7d3b      	ldrb	r3, [r7, #20]
 8005760:	e013      	b.n	800578a <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8005762:	7d7a      	ldrb	r2, [r7, #21]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8005768:	8afa      	ldrh	r2, [r7, #22]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800576e:	7e3a      	ldrb	r2, [r7, #24]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8005774:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8005778:	b29a      	uxth	r2, r3
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800577e:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8005782:	b29a      	uxth	r2, r3
 8005784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005786:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3738      	adds	r7, #56	; 0x38
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b092      	sub	sp, #72	; 0x48
 8005796:	af00      	add	r7, sp, #0
 8005798:	4603      	mov	r3, r0
 800579a:	6039      	str	r1, [r7, #0]
 800579c:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800579e:	f107 0310 	add.w	r3, r7, #16
 80057a2:	2220      	movs	r2, #32
 80057a4:	2100      	movs	r1, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f002 fefb 	bl	80085a2 <memset>
  scan_resp_cp.length = length;
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	2b1f      	cmp	r3, #31
 80057b4:	bf28      	it	cs
 80057b6:	231f      	movcs	r3, #31
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	f107 0310 	add.w	r3, r7, #16
 80057c0:	3301      	adds	r3, #1
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f002 fee1 	bl	800858c <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80057ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057ce:	2218      	movs	r2, #24
 80057d0:	2100      	movs	r1, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f002 fee5 	bl	80085a2 <memset>
  rq.ogf = OGF_LE_CTL;
 80057d8:	2308      	movs	r3, #8
 80057da:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 80057dc:	2309      	movs	r3, #9
 80057de:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 80057e0:	f107 0310 	add.w	r3, r7, #16
 80057e4:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 80057e6:	2320      	movs	r3, #32
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 80057ea:	f107 030f 	add.w	r3, r7, #15
 80057ee:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80057f0:	2301      	movs	r3, #1
 80057f2:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80057f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057f8:	2100      	movs	r1, #0
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f904 	bl	8005a08 <hci_send_req>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	da01      	bge.n	800580a <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8005806:	23ff      	movs	r3, #255	; 0xff
 8005808:	e000      	b.n	800580c <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3748      	adds	r7, #72	; 0x48
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3308      	adds	r3, #8
 8005820:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b04      	cmp	r3, #4
 8005828:	d001      	beq.n	800582e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800582a:	2301      	movs	r3, #1
 800582c:	e00c      	b.n	8005848 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3302      	adds	r3, #2
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800583c:	3b03      	subs	r3, #3
 800583e:	429a      	cmp	r2, r3
 8005840:	d001      	beq.n	8005846 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8005842:	2302      	movs	r3, #2
 8005844:	e000      	b.n	8005848 <verify_packet+0x34>
  
  return 0;      
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b0a6      	sub	sp, #152	; 0x98
 8005858:	af00      	add	r7, sp, #0
 800585a:	607b      	str	r3, [r7, #4]
 800585c:	4603      	mov	r3, r0
 800585e:	81fb      	strh	r3, [r7, #14]
 8005860:	460b      	mov	r3, r1
 8005862:	81bb      	strh	r3, [r7, #12]
 8005864:	4613      	mov	r3, r2
 8005866:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8005868:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800586c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005870:	b21a      	sxth	r2, r3
 8005872:	89fb      	ldrh	r3, [r7, #14]
 8005874:	029b      	lsls	r3, r3, #10
 8005876:	b21b      	sxth	r3, r3
 8005878:	4313      	orrs	r3, r2
 800587a:	b21b      	sxth	r3, r3
 800587c:	b29b      	uxth	r3, r3
 800587e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8005880:	7afb      	ldrb	r3, [r7, #11]
 8005882:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8005884:	2301      	movs	r3, #1
 8005886:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8005888:	f107 0318 	add.w	r3, r7, #24
 800588c:	3301      	adds	r3, #1
 800588e:	461a      	mov	r2, r3
 8005890:	f107 0314 	add.w	r3, r7, #20
 8005894:	8819      	ldrh	r1, [r3, #0]
 8005896:	789b      	ldrb	r3, [r3, #2]
 8005898:	8011      	strh	r1, [r2, #0]
 800589a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800589c:	f107 0318 	add.w	r3, r7, #24
 80058a0:	3304      	adds	r3, #4
 80058a2:	7afa      	ldrb	r2, [r7, #11]
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f002 fe70 	bl	800858c <memcpy>
  
  if (hciContext.io.Send)
 80058ac:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <send_cmd+0x7c>)
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <send_cmd+0x7c>)
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	7afa      	ldrb	r2, [r7, #11]
 80058ba:	b292      	uxth	r2, r2
 80058bc:	3204      	adds	r2, #4
 80058be:	b291      	uxth	r1, r2
 80058c0:	f107 0218 	add.w	r2, r7, #24
 80058c4:	4610      	mov	r0, r2
 80058c6:	4798      	blx	r3
  }
}
 80058c8:	bf00      	nop
 80058ca:	3798      	adds	r7, #152	; 0x98
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	2000036c 	.word	0x2000036c

080058d4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80058de:	e00a      	b.n	80058f6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80058e0:	f107 030c 	add.w	r3, r7, #12
 80058e4:	4619      	mov	r1, r3
 80058e6:	6838      	ldr	r0, [r7, #0]
 80058e8:	f000 fada 	bl	8005ea0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fa49 	bl	8005d88 <list_insert_head>
  while (!list_is_empty(src_list))
 80058f6:	6838      	ldr	r0, [r7, #0]
 80058f8:	f000 fa26 	bl	8005d48 <list_is_empty>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0ee      	beq.n	80058e0 <move_list+0xc>
  }
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;
  
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005912:	e009      	b.n	8005928 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8005914:	1d3b      	adds	r3, r7, #4
 8005916:	4619      	mov	r1, r3
 8005918:	4808      	ldr	r0, [pc, #32]	; (800593c <free_event_list+0x30>)
 800591a:	f000 fa9c 	bl	8005e56 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4619      	mov	r1, r3
 8005922:	4807      	ldr	r0, [pc, #28]	; (8005940 <free_event_list+0x34>)
 8005924:	f000 fa54 	bl	8005dd0 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005928:	4805      	ldr	r0, [pc, #20]	; (8005940 <free_event_list+0x34>)
 800592a:	f000 fade 	bl	8005eea <list_get_size>
 800592e:	4603      	mov	r3, r0
 8005930:	2b01      	cmp	r3, #1
 8005932:	ddef      	ble.n	8005914 <free_event_list+0x8>
  }
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000574 	.word	0x20000574
 8005940:	2000056c 	.word	0x2000056c

08005944 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint8_t index;
  
  if(UserEvtRx != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005954:	4a18      	ldr	r2, [pc, #96]	; (80059b8 <hci_init+0x74>)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800595a:	f002 f80f 	bl	800797c <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800595e:	4817      	ldr	r0, [pc, #92]	; (80059bc <hci_init+0x78>)
 8005960:	f000 f9e2 	bl	8005d28 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005964:	4816      	ldr	r0, [pc, #88]	; (80059c0 <hci_init+0x7c>)
 8005966:	f000 f9df 	bl	8005d28 <list_init_head>
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
 800596e:	e00c      	b.n	800598a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	228c      	movs	r2, #140	; 0x8c
 8005974:	fb02 f303 	mul.w	r3, r2, r3
 8005978:	4a12      	ldr	r2, [pc, #72]	; (80059c4 <hci_init+0x80>)
 800597a:	4413      	add	r3, r2
 800597c:	4619      	mov	r1, r3
 800597e:	480f      	ldr	r0, [pc, #60]	; (80059bc <hci_init+0x78>)
 8005980:	f000 fa26 	bl	8005dd0 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	3301      	adds	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b04      	cmp	r3, #4
 800598e:	d9ef      	bls.n	8005970 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005990:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <hci_init+0x74>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <hci_init+0x5c>
 8005998:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <hci_init+0x74>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2000      	movs	r0, #0
 800599e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <hci_init+0x74>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <hci_init+0x6a>
 80059a8:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <hci_init+0x74>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	4798      	blx	r3
}
 80059ae:	bf00      	nop
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	2000036c 	.word	0x2000036c
 80059bc:	2000056c 	.word	0x2000056c
 80059c0:	20000574 	.word	0x20000574
 80059c4:	200000b0 	.word	0x200000b0

080059c8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a0b      	ldr	r2, [pc, #44]	; (8005a04 <hci_register_io_bus+0x3c>)
 80059d6:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <hci_register_io_bus+0x3c>)
 80059de:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	4a07      	ldr	r2, [pc, #28]	; (8005a04 <hci_register_io_bus+0x3c>)
 80059e6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	4a05      	ldr	r2, [pc, #20]	; (8005a04 <hci_register_io_bus+0x3c>)
 80059ee:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;    
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	4a03      	ldr	r2, [pc, #12]	; (8005a04 <hci_register_io_bus+0x3c>)
 80059f6:	6093      	str	r3, [r2, #8]
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	2000036c 	.word	0x2000036c

08005a08 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08e      	sub	sp, #56	; 0x38
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	885b      	ldrh	r3, [r3, #2]
 8005a18:	b21b      	sxth	r3, r3
 8005a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a1e:	b21a      	sxth	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	029b      	lsls	r3, r3, #10
 8005a26:	b21b      	sxth	r3, r3
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	b21b      	sxth	r3, r3
 8005a2c:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8005a32:	f107 0308 	add.w	r3, r7, #8
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f976 	bl	8005d28 <list_init_head>

  free_event_list();
 8005a3c:	f7ff ff66 	bl	800590c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8818      	ldrh	r0, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8859      	ldrh	r1, [r3, #2]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f7ff feff 	bl	8005854 <send_cmd>
  
  if (async)
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <hci_send_req+0x58>
  {
    return 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e0e2      	b.n	8005c26 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005a60:	f7fb f9c2 	bl	8000de8 <HAL_GetTick>
 8005a64:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005a66:	f7fb f9bf 	bl	8000de8 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a74:	f200 80b3 	bhi.w	8005bde <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005a78:	486d      	ldr	r0, [pc, #436]	; (8005c30 <hci_send_req+0x228>)
 8005a7a:	f000 f965 	bl	8005d48 <list_is_empty>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d000      	beq.n	8005a86 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005a84:	e7ef      	b.n	8005a66 <hci_send_req+0x5e>
      {
        break;
 8005a86:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8005a88:	f107 0310 	add.w	r3, r7, #16
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4868      	ldr	r0, [pc, #416]	; (8005c30 <hci_send_req+0x228>)
 8005a90:	f000 f9e1 	bl	8005e56 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	3308      	adds	r3, #8
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d17a      	bne.n	8005b98 <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	3303      	adds	r3, #3
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005ab6:	3b03      	subs	r3, #3
 8005ab8:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b0f      	cmp	r3, #15
 8005ac0:	d00a      	beq.n	8005ad8 <hci_send_req+0xd0>
 8005ac2:	2b0f      	cmp	r3, #15
 8005ac4:	dc02      	bgt.n	8005acc <hci_send_req+0xc4>
 8005ac6:	2b0e      	cmp	r3, #14
 8005ac8:	d028      	beq.n	8005b1c <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8005aca:	e06a      	b.n	8005ba2 <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	f000 8088 	beq.w	8005be2 <hci_send_req+0x1da>
 8005ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ad4:	d042      	beq.n	8005b5c <hci_send_req+0x154>
        break;
 8005ad6:	e064      	b.n	8005ba2 <hci_send_req+0x19a>
        cs = (void *) ptr;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	885b      	ldrh	r3, [r3, #2]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d17e      	bne.n	8005be6 <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b0f      	cmp	r3, #15
 8005aee:	d004      	beq.n	8005afa <hci_send_req+0xf2>
          if (cs->status) {
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d051      	beq.n	8005b9c <hci_send_req+0x194>
            goto failed;
 8005af8:	e078      	b.n	8005bec <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	bf28      	it	cs
 8005b04:	461a      	movcs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6918      	ldr	r0, [r3, #16]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	461a      	mov	r2, r3
 8005b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b16:	f002 fd39 	bl	800858c <memcpy>
        goto done;
 8005b1a:	e078      	b.n	8005c0e <hci_send_req+0x206>
        cc = (void *) ptr;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d15d      	bne.n	8005bea <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	3303      	adds	r3, #3
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	3b03      	subs	r3, #3
 8005b38:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695a      	ldr	r2, [r3, #20]
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	bf28      	it	cs
 8005b44:	461a      	movcs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6918      	ldr	r0, [r3, #16]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	461a      	mov	r2, r3
 8005b54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b56:	f002 fd19 	bl	800858c <memcpy>
        goto done;
 8005b5a:	e058      	b.n	8005c0e <hci_send_req+0x206>
        me = (void *) ptr;
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d118      	bne.n	8005ba0 <hci_send_req+0x198>
        len -= 1;
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	bf28      	it	cs
 8005b7e:	461a      	movcs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6918      	ldr	r0, [r3, #16]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	1c59      	adds	r1, r3, #1
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	461a      	mov	r2, r3
 8005b92:	f002 fcfb 	bl	800858c <memcpy>
        goto done;
 8005b96:	e03a      	b.n	8005c0e <hci_send_req+0x206>
      }
    }
 8005b98:	bf00      	nop
 8005b9a:	e002      	b.n	8005ba2 <hci_send_req+0x19a>
          break;
 8005b9c:	bf00      	nop
 8005b9e:	e000      	b.n	8005ba2 <hci_send_req+0x19a>
          break;
 8005ba0:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8005ba2:	4824      	ldr	r0, [pc, #144]	; (8005c34 <hci_send_req+0x22c>)
 8005ba4:	f000 f8d0 	bl	8005d48 <list_is_empty>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00d      	beq.n	8005bca <hci_send_req+0x1c2>
 8005bae:	4820      	ldr	r0, [pc, #128]	; (8005c30 <hci_send_req+0x228>)
 8005bb0:	f000 f8ca 	bl	8005d48 <list_is_empty>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d007      	beq.n	8005bca <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	481d      	ldr	r0, [pc, #116]	; (8005c34 <hci_send_req+0x22c>)
 8005bc0:	f000 f906 	bl	8005dd0 <list_insert_tail>
      hciReadPacket=NULL;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	e008      	b.n	8005bdc <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	f107 0308 	add.w	r3, r7, #8
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f8fc 	bl	8005dd0 <list_insert_tail>
      hciReadPacket=NULL;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	613b      	str	r3, [r7, #16]
  {
 8005bdc:	e740      	b.n	8005a60 <hci_send_req+0x58>
        goto failed;
 8005bde:	bf00      	nop
 8005be0:	e004      	b.n	8005bec <hci_send_req+0x1e4>
        goto failed;
 8005be2:	bf00      	nop
 8005be4:	e002      	b.n	8005bec <hci_send_req+0x1e4>
          goto failed;
 8005be6:	bf00      	nop
 8005be8:	e000      	b.n	8005bec <hci_send_req+0x1e4>
          goto failed;
 8005bea:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	480f      	ldr	r0, [pc, #60]	; (8005c34 <hci_send_req+0x22c>)
 8005bf8:	f000 f8c6 	bl	8005d88 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 8005bfc:	f107 0308 	add.w	r3, r7, #8
 8005c00:	4619      	mov	r1, r3
 8005c02:	480b      	ldr	r0, [pc, #44]	; (8005c30 <hci_send_req+0x228>)
 8005c04:	f7ff fe66 	bl	80058d4 <move_list>
  return -1;
 8005c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c0c:	e00b      	b.n	8005c26 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4619      	mov	r1, r3
 8005c12:	4808      	ldr	r0, [pc, #32]	; (8005c34 <hci_send_req+0x22c>)
 8005c14:	f000 f8b8 	bl	8005d88 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8005c18:	f107 0308 	add.w	r3, r7, #8
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4804      	ldr	r0, [pc, #16]	; (8005c30 <hci_send_req+0x228>)
 8005c20:	f7ff fe58 	bl	80058d4 <move_list>
  return 0;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3738      	adds	r7, #56	; 0x38
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000574 	.word	0x20000574
 8005c34:	2000056c 	.word	0x2000056c

08005c38 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005c42:	e013      	b.n	8005c6c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8005c44:	1d3b      	adds	r3, r7, #4
 8005c46:	4619      	mov	r1, r3
 8005c48:	480d      	ldr	r0, [pc, #52]	; (8005c80 <hci_user_evt_proc+0x48>)
 8005c4a:	f000 f904 	bl	8005e56 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <hci_user_evt_proc+0x4c>)
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <hci_user_evt_proc+0x4c>)
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	3208      	adds	r2, #8
 8005c5e:	4610      	mov	r0, r2
 8005c60:	4798      	blx	r3
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4619      	mov	r1, r3
 8005c66:	4808      	ldr	r0, [pc, #32]	; (8005c88 <hci_user_evt_proc+0x50>)
 8005c68:	f000 f8b2 	bl	8005dd0 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005c6c:	4804      	ldr	r0, [pc, #16]	; (8005c80 <hci_user_evt_proc+0x48>)
 8005c6e:	f000 f86b 	bl	8005d48 <list_is_empty>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0e5      	beq.n	8005c44 <hci_user_evt_proc+0xc>
  }
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000574 	.word	0x20000574
 8005c84:	2000036c 	.word	0x2000036c
 8005c88:	2000056c 	.word	0x2000056c

08005c8c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8005c9c:	481f      	ldr	r0, [pc, #124]	; (8005d1c <hci_notify_asynch_evt+0x90>)
 8005c9e:	f000 f853 	bl	8005d48 <list_is_empty>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d132      	bne.n	8005d0e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8005ca8:	f107 030c 	add.w	r3, r7, #12
 8005cac:	4619      	mov	r1, r3
 8005cae:	481b      	ldr	r0, [pc, #108]	; (8005d1c <hci_notify_asynch_evt+0x90>)
 8005cb0:	f000 f8d1 	bl	8005e56 <list_remove_head>
    
    if (hciContext.io.Receive)
 8005cb4:	4b1a      	ldr	r3, [pc, #104]	; (8005d20 <hci_notify_asynch_evt+0x94>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d02a      	beq.n	8005d12 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8005cbc:	4b18      	ldr	r3, [pc, #96]	; (8005d20 <hci_notify_asynch_evt+0x94>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	3208      	adds	r2, #8
 8005cc4:	2180      	movs	r1, #128	; 0x80
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	4798      	blx	r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8005cce:	7cfb      	ldrb	r3, [r7, #19]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d016      	beq.n	8005d02 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	7cfa      	ldrb	r2, [r7, #19]
 8005cd8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff fd98 	bl	8005814 <verify_packet>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d105      	bne.n	8005cf6 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4619      	mov	r1, r3
 8005cee:	480d      	ldr	r0, [pc, #52]	; (8005d24 <hci_notify_asynch_evt+0x98>)
 8005cf0:	f000 f86e 	bl	8005dd0 <list_insert_tail>
 8005cf4:	e00d      	b.n	8005d12 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4808      	ldr	r0, [pc, #32]	; (8005d1c <hci_notify_asynch_evt+0x90>)
 8005cfc:	f000 f844 	bl	8005d88 <list_insert_head>
 8005d00:	e007      	b.n	8005d12 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4619      	mov	r1, r3
 8005d06:	4805      	ldr	r0, [pc, #20]	; (8005d1c <hci_notify_asynch_evt+0x90>)
 8005d08:	f000 f83e 	bl	8005d88 <list_insert_head>
 8005d0c:	e001      	b.n	8005d12 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8005d12:	697b      	ldr	r3, [r7, #20]

}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	2000056c 	.word	0x2000056c
 8005d20:	2000036c 	.word	0x2000036c
 8005d24:	20000574 	.word	0x20000574

08005d28 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	605a      	str	r2, [r3, #4]
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d50:	f3ef 8310 	mrs	r3, PRIMASK
 8005d54:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d56:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005d58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d5a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d102      	bne.n	8005d6c <list_is_empty+0x24>
  {
    return_value = 1;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
 8005d6a:	e001      	b.n	8005d70 <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	75fb      	strb	r3, [r7, #23]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	371c      	adds	r7, #28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d92:	f3ef 8310 	mrs	r3, PRIMASK
 8005d96:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d98:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005d9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d9c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005dc4:	bf00      	nop
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dda:	f3ef 8310 	mrs	r3, PRIMASK
 8005dde:	60fb      	str	r3, [r7, #12]
  return(result);
 8005de0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005de2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005de4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e20:	f3ef 8310 	mrs	r3, PRIMASK
 8005e24:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e26:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005e28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e2a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6852      	ldr	r2, [r2, #4]
 8005e3e:	605a      	str	r2, [r3, #4]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e60:	f3ef 8310 	mrs	r3, PRIMASK
 8005e64:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e66:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005e68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e6a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff ffcd 	bl	8005e18 <list_remove_node>
  (*node)->next = NULL;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	605a      	str	r2, [r3, #4]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005e98:	bf00      	nop
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8005eae:	60fb      	str	r3, [r7, #12]
  return(result);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005eb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005eb4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff ffa8 	bl	8005e18 <list_remove_node>
  (*node)->next = NULL;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	605a      	str	r2, [r3, #4]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005ee2:	bf00      	nop
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b089      	sub	sp, #36	; 0x24
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  int size = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8005efa:	613b      	str	r3, [r7, #16]
  return(result);
 8005efc:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005efe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f00:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005f08:	e005      	b.n	8005f16 <list_get_size+0x2c>
  {
    size++;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d1f5      	bne.n	8005f0a <list_get_size+0x20>
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8005f28:	69fb      	ldr	r3, [r7, #28]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3724      	adds	r7, #36	; 0x24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
	...

08005f38 <print_csv_time>:
 * @brief  This function is a utility to print the log time
 *         in the format HH:MM:SS:MSS (DK GUI time format)
 * @param  None
 * @retval None
 */
void print_csv_time(void){
 8005f38:	b5b0      	push	{r4, r5, r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af02      	add	r7, sp, #8
  uint32_t ms = HAL_GetTick();
 8005f3e:	f7fa ff53 	bl	8000de8 <HAL_GetTick>
 8005f42:	6078      	str	r0, [r7, #4]
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a1e      	ldr	r2, [pc, #120]	; (8005fc0 <print_csv_time+0x88>)
 8005f48:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4c:	0d5a      	lsrs	r2, r3, #21
 8005f4e:	4b1d      	ldr	r3, [pc, #116]	; (8005fc4 <print_csv_time+0x8c>)
 8005f50:	fba3 1302 	umull	r1, r3, r3, r2
 8005f54:	0919      	lsrs	r1, r3, #4
 8005f56:	460b      	mov	r3, r1
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	440b      	add	r3, r1
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	1ad1      	subs	r1, r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a19      	ldr	r2, [pc, #100]	; (8005fc8 <print_csv_time+0x90>)
 8005f64:	fba2 2303 	umull	r2, r3, r2, r3
 8005f68:	0b98      	lsrs	r0, r3, #14
 8005f6a:	4b18      	ldr	r3, [pc, #96]	; (8005fcc <print_csv_time+0x94>)
 8005f6c:	fba3 2300 	umull	r2, r3, r3, r0
 8005f70:	095a      	lsrs	r2, r3, #5
 8005f72:	4613      	mov	r3, r2
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	1ac2      	subs	r2, r0, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4814      	ldr	r0, [pc, #80]	; (8005fd0 <print_csv_time+0x98>)
 8005f80:	fba0 0303 	umull	r0, r3, r0, r3
 8005f84:	099c      	lsrs	r4, r3, #6
 8005f86:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <print_csv_time+0x94>)
 8005f88:	fba3 0304 	umull	r0, r3, r3, r4
 8005f8c:	0958      	lsrs	r0, r3, #5
 8005f8e:	4603      	mov	r3, r0
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	1a1b      	subs	r3, r3, r0
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	1ae0      	subs	r0, r4, r3
 8005f98:	687c      	ldr	r4, [r7, #4]
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <print_csv_time+0x98>)
 8005f9c:	fba3 5304 	umull	r5, r3, r3, r4
 8005fa0:	099b      	lsrs	r3, r3, #6
 8005fa2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8005fa6:	fb05 f303 	mul.w	r3, r5, r3
 8005faa:	1ae3      	subs	r3, r4, r3
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	4603      	mov	r3, r0
 8005fb0:	4808      	ldr	r0, [pc, #32]	; (8005fd4 <print_csv_time+0x9c>)
 8005fb2:	f002 faff 	bl	80085b4 <iprintf>
}
 8005fb6:	bf00      	nop
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	95217cb1 	.word	0x95217cb1
 8005fc4:	aaaaaaab 	.word	0xaaaaaaab
 8005fc8:	45e7b273 	.word	0x45e7b273
 8005fcc:	88888889 	.word	0x88888889
 8005fd0:	10624dd3 	.word	0x10624dd3
 8005fd4:	080095f4 	.word	0x080095f4

08005fd8 <MX_BlueNRG_MS_Init>:
#endif

void MX_BlueNRG_MS_Init(void)
{
 8005fd8:	b5b0      	push	{r4, r5, r7, lr}
 8005fda:	b08a      	sub	sp, #40	; 0x28
 8005fdc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */
  
  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";    
 8005fde:	4b6c      	ldr	r3, [pc, #432]	; (8006190 <MX_BlueNRG_MS_Init+0x1b8>)
 8005fe0:	613b      	str	r3, [r7, #16]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;  
  
  User_Init();
 8005fe2:	f000 f907 	bl	80061f4 <User_Init>
  printf("Hey\n");
 8005fe6:	486b      	ldr	r0, [pc, #428]	; (8006194 <MX_BlueNRG_MS_Init+0x1bc>)
 8005fe8:	f002 fb6c 	bl	80086c4 <puts>
  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8005fec:	2000      	movs	r0, #0
 8005fee:	f7fa fd91 	bl	8000b14 <BSP_PB_GetState>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	4b68      	ldr	r3, [pc, #416]	; (8006198 <MX_BlueNRG_MS_Init+0x1c0>)
 8005ff8:	701a      	strb	r2, [r3, #0]
    
  hci_init(user_notify, NULL);
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4867      	ldr	r0, [pc, #412]	; (800619c <MX_BlueNRG_MS_Init+0x1c4>)
 8005ffe:	f7ff fca1 	bl	8005944 <hci_init>
  
  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8006002:	1dba      	adds	r2, r7, #6
 8006004:	f107 0308 	add.w	r3, r7, #8
 8006008:	4611      	mov	r1, r2
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fb11 	bl	8005632 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset(); 
 8006010:	f7ff fb53 	bl	80056ba <hci_reset>
  HAL_Delay(100);
 8006014:	2064      	movs	r0, #100	; 0x64
 8006016:	f7fa fef3 	bl	8000e00 <HAL_Delay>
 
  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
 800601a:	7a3b      	ldrb	r3, [r7, #8]
 800601c:	4619      	mov	r1, r3
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	461a      	mov	r2, r3
 8006022:	485f      	ldr	r0, [pc, #380]	; (80061a0 <MX_BlueNRG_MS_Init+0x1c8>)
 8006024:	f002 fac6 	bl	80085b4 <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8006028:	7a3b      	ldrb	r3, [r7, #8]
 800602a:	2b30      	cmp	r3, #48	; 0x30
 800602c:	d902      	bls.n	8006034 <MX_BlueNRG_MS_Init+0x5c>
    bnrg_expansion_board = IDB05A1;    
 800602e:	4b5d      	ldr	r3, [pc, #372]	; (80061a4 <MX_BlueNRG_MS_Init+0x1cc>)
 8006030:	2201      	movs	r2, #1
 8006032:	701a      	strb	r2, [r3, #0]
  }
  
  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8006034:	f107 0209 	add.w	r2, r7, #9
 8006038:	4b5b      	ldr	r3, [pc, #364]	; (80061a8 <MX_BlueNRG_MS_Init+0x1d0>)
 800603a:	2106      	movs	r1, #6
 800603c:	2080      	movs	r0, #128	; 0x80
 800603e:	f7ff fa74 	bl	800552a <aci_hal_read_config_data>
 8006042:	4603      	mov	r3, r0
 8006044:	617b      	str	r3, [r7, #20]
  
  if (ret) {
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <MX_BlueNRG_MS_Init+0x7a>
    PRINTF("Read Static Random address failed.\n");
 800604c:	4857      	ldr	r0, [pc, #348]	; (80061ac <MX_BlueNRG_MS_Init+0x1d4>)
 800604e:	f002 fb39 	bl	80086c4 <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8006052:	4b55      	ldr	r3, [pc, #340]	; (80061a8 <MX_BlueNRG_MS_Init+0x1d0>)
 8006054:	795b      	ldrb	r3, [r3, #5]
 8006056:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800605a:	2bc0      	cmp	r3, #192	; 0xc0
 800605c:	d003      	beq.n	8006066 <MX_BlueNRG_MS_Init+0x8e>
    PRINTF("Static Random address not well formed.\n");
 800605e:	4854      	ldr	r0, [pc, #336]	; (80061b0 <MX_BlueNRG_MS_Init+0x1d8>)
 8006060:	f002 fb30 	bl	80086c4 <puts>
    while(1);
 8006064:	e7fe      	b.n	8006064 <MX_BlueNRG_MS_Init+0x8c>
  }
  
  /* GATT Init */
  ret = aci_gatt_init();    
 8006066:	f7ff f81f 	bl	80050a8 <aci_gatt_init>
 800606a:	4603      	mov	r3, r0
 800606c:	617b      	str	r3, [r7, #20]
  if(ret){
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <MX_BlueNRG_MS_Init+0xa2>
    PRINTF("GATT_Init failed.\n");
 8006074:	484f      	ldr	r0, [pc, #316]	; (80061b4 <MX_BlueNRG_MS_Init+0x1dc>)
 8006076:	f002 fb25 	bl	80086c4 <puts>
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 800607a:	4b4a      	ldr	r3, [pc, #296]	; (80061a4 <MX_BlueNRG_MS_Init+0x1cc>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d110      	bne.n	80060a4 <MX_BlueNRG_MS_Init+0xcc>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8006082:	f107 020e 	add.w	r2, r7, #14
 8006086:	f107 030a 	add.w	r3, r7, #10
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	f107 030c 	add.w	r3, r7, #12
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	4613      	mov	r3, r2
 8006094:	2207      	movs	r2, #7
 8006096:	2100      	movs	r1, #0
 8006098:	2001      	movs	r0, #1
 800609a:	f7fe fddb 	bl	8004c54 <aci_gap_init_IDB05A1>
 800609e:	4603      	mov	r3, r0
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	e00a      	b.n	80060ba <MX_BlueNRG_MS_Init+0xe2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80060a4:	f107 030a 	add.w	r3, r7, #10
 80060a8:	f107 020c 	add.w	r2, r7, #12
 80060ac:	f107 010e 	add.w	r1, r7, #14
 80060b0:	2001      	movs	r0, #1
 80060b2:	f7fe fe1f 	bl	8004cf4 <aci_gap_init_IDB04A1>
 80060b6:	4603      	mov	r3, r0
 80060b8:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <MX_BlueNRG_MS_Init+0xee>
    PRINTF("GAP_Init failed.\n");
 80060c0:	483d      	ldr	r0, [pc, #244]	; (80061b8 <MX_BlueNRG_MS_Init+0x1e0>)
 80060c2:	f002 faff 	bl	80086c4 <puts>
  }
  printf("GAP INIT SUCCESS\n");
 80060c6:	483d      	ldr	r0, [pc, #244]	; (80061bc <MX_BlueNRG_MS_Init+0x1e4>)
 80060c8:	f002 fafc 	bl	80086c4 <puts>

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80060cc:	89fc      	ldrh	r4, [r7, #14]
 80060ce:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 80060d0:	6938      	ldr	r0, [r7, #16]
 80060d2:	f7fa f8b1 	bl	8000238 <strlen>
 80060d6:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	4613      	mov	r3, r2
 80060e0:	2200      	movs	r2, #0
 80060e2:	4629      	mov	r1, r5
 80060e4:	4620      	mov	r0, r4
 80060e6:	f7ff f960 	bl	80053aa <aci_gatt_update_char_value>
 80060ea:	4603      	mov	r3, r0
 80060ec:	617b      	str	r3, [r7, #20]
  if (ret) {
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <MX_BlueNRG_MS_Init+0x124>
    PRINTF("aci_gatt_update_char_value failed.\n");            
 80060f4:	4832      	ldr	r0, [pc, #200]	; (80061c0 <MX_BlueNRG_MS_Init+0x1e8>)
 80060f6:	f002 fae5 	bl	80086c4 <puts>
    while(1);
 80060fa:	e7fe      	b.n	80060fa <MX_BlueNRG_MS_Init+0x122>
  }
  printf("Setting authetnication\n");
 80060fc:	4831      	ldr	r0, [pc, #196]	; (80061c4 <MX_BlueNRG_MS_Init+0x1ec>)
 80060fe:	f002 fae1 	bl	80086c4 <puts>

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8006102:	2301      	movs	r3, #1
 8006104:	9303      	str	r3, [sp, #12]
 8006106:	4b30      	ldr	r3, [pc, #192]	; (80061c8 <MX_BlueNRG_MS_Init+0x1f0>)
 8006108:	9302      	str	r3, [sp, #8]
 800610a:	2300      	movs	r3, #0
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	2310      	movs	r3, #16
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	2307      	movs	r3, #7
 8006114:	2200      	movs	r2, #0
 8006116:	2100      	movs	r1, #0
 8006118:	2001      	movs	r0, #1
 800611a:	f7fe ff25 	bl	8004f68 <aci_gap_set_auth_requirement>
 800611e:	4603      	mov	r3, r0
 8006120:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  printf("Authentication sucess\n");
 8006122:	482a      	ldr	r0, [pc, #168]	; (80061cc <MX_BlueNRG_MS_Init+0x1f4>)
 8006124:	f002 face 	bl	80086c4 <puts>

  if (ret) {
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <MX_BlueNRG_MS_Init+0x15e>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
 800612e:	4828      	ldr	r0, [pc, #160]	; (80061d0 <MX_BlueNRG_MS_Init+0x1f8>)
 8006130:	f002 fac8 	bl	80086c4 <puts>
    while(1);
 8006134:	e7fe      	b.n	8006134 <MX_BlueNRG_MS_Init+0x15c>
  }
  
  PRINTF("BLE Stack Initialized\n");
 8006136:	4827      	ldr	r0, [pc, #156]	; (80061d4 <MX_BlueNRG_MS_Init+0x1fc>)
 8006138:	f002 fac4 	bl	80086c4 <puts>
  
  ret = Add_HWServW2ST_Service();
 800613c:	f000 ff6a 	bl	8007014 <Add_HWServW2ST_Service>
 8006140:	4603      	mov	r3, r0
 8006142:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <MX_BlueNRG_MS_Init+0x188>
    PRINTF("BlueMS HW service added successfully.\n");
 800614a:	4823      	ldr	r0, [pc, #140]	; (80061d8 <MX_BlueNRG_MS_Init+0x200>)
 800614c:	f002 faba 	bl	80086c4 <puts>
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
  }
  
  ret = Add_SWServW2ST_Service();
 8006150:	f001 f838 	bl	80071c4 <Add_SWServW2ST_Service>
 8006154:	4603      	mov	r3, r0
 8006156:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d109      	bne.n	8006172 <MX_BlueNRG_MS_Init+0x19a>
 800615e:	e004      	b.n	800616a <MX_BlueNRG_MS_Init+0x192>
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 8006160:	6979      	ldr	r1, [r7, #20]
 8006162:	481e      	ldr	r0, [pc, #120]	; (80061dc <MX_BlueNRG_MS_Init+0x204>)
 8006164:	f002 fa26 	bl	80085b4 <iprintf>
    while(1);
 8006168:	e7fe      	b.n	8006168 <MX_BlueNRG_MS_Init+0x190>
     PRINTF("BlueMS SW service added successfully.\n");
 800616a:	481d      	ldr	r0, [pc, #116]	; (80061e0 <MX_BlueNRG_MS_Init+0x208>)
 800616c:	f002 faaa 	bl	80086c4 <puts>
 8006170:	e004      	b.n	800617c <MX_BlueNRG_MS_Init+0x1a4>
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 8006172:	6979      	ldr	r1, [r7, #20]
 8006174:	4819      	ldr	r0, [pc, #100]	; (80061dc <MX_BlueNRG_MS_Init+0x204>)
 8006176:	f002 fa1d 	bl	80085b4 <iprintf>
     while(1);
 800617a:	e7fe      	b.n	800617a <MX_BlueNRG_MS_Init+0x1a2>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 800617c:	2104      	movs	r1, #4
 800617e:	2001      	movs	r0, #1
 8006180:	f7ff fa26 	bl	80055d0 <aci_hal_set_tx_power_level>
 8006184:	4603      	mov	r3, r0
 8006186:	617b      	str	r3, [r7, #20]
  
  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */
  
  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8006188:	bf00      	nop
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bdb0      	pop	{r4, r5, r7, pc}
 8006190:	0800960c 	.word	0x0800960c
 8006194:	08009614 	.word	0x08009614
 8006198:	20000020 	.word	0x20000020
 800619c:	08007e95 	.word	0x08007e95
 80061a0:	08009618 	.word	0x08009618
 80061a4:	2000038c 	.word	0x2000038c
 80061a8:	2000057c 	.word	0x2000057c
 80061ac:	0800962c 	.word	0x0800962c
 80061b0:	08009650 	.word	0x08009650
 80061b4:	08009678 	.word	0x08009678
 80061b8:	0800968c 	.word	0x0800968c
 80061bc:	080096a0 	.word	0x080096a0
 80061c0:	080096b4 	.word	0x080096b4
 80061c4:	080096d8 	.word	0x080096d8
 80061c8:	0001e240 	.word	0x0001e240
 80061cc:	080096f0 	.word	0x080096f0
 80061d0:	08009708 	.word	0x08009708
 80061d4:	08009738 	.word	0x08009738
 80061d8:	08009750 	.word	0x08009750
 80061dc:	08009778 	.word	0x08009778
 80061e0:	080097a8 	.word	0x080097a8

080061e4 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */
  
  /* USER CODE END BlueNRG_MS_Process_PreTreatment */
  
  User_Process();  
 80061e8:	f000 f812 	bl	8006210 <User_Process>
  hci_user_evt_proc();
 80061ec:	f7ff fd24 	bl	8005c38 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */
  
  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80061f0:	bf00      	nop
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80061f8:	2101      	movs	r1, #1
 80061fa:	2000      	movs	r0, #0
 80061fc:	f7fa fc06 	bl	8000a0c <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8006200:	2000      	movs	r0, #0
 8006202:	f7fa fbb7 	bl	8000974 <BSP_LED_Init>
  
  BSP_COM_Init(COM1);
 8006206:	2000      	movs	r0, #0
 8006208:	f7fa fca8 	bl	8000b5c <BSP_COM_Init>
}
 800620c:	bf00      	nop
 800620e:	bd80      	pop	{r7, pc}

08006210 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;
  
  if (set_connectable)
 8006216:	4b2d      	ldr	r3, [pc, #180]	; (80062cc <User_Process+0xbc>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <User_Process+0x20>
  {
	 PRINTF("Set_connectable true\n");
 8006220:	482b      	ldr	r0, [pc, #172]	; (80062d0 <User_Process+0xc0>)
 8006222:	f002 fa4f 	bl	80086c4 <puts>
    Set_DeviceConnectable();
 8006226:	f001 fda9 	bl	8007d7c <Set_DeviceConnectable>
    set_connectable = FALSE;
 800622a:	4b28      	ldr	r3, [pc, #160]	; (80062cc <User_Process+0xbc>)
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
    
    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8006230:	2000      	movs	r0, #0
 8006232:	f7fa fbd5 	bl	80009e0 <BSP_LED_Toggle>
    
    if (connected)
 8006236:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <User_Process+0xc4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d042      	beq.n	80062c4 <User_Process+0xb4>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 800623e:	f7fa fdd3 	bl	8000de8 <HAL_GetTick>
 8006242:	4603      	mov	r3, r0
 8006244:	4618      	mov	r0, r3
 8006246:	f002 fa45 	bl	80086d4 <srand>
	  
      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 800624a:	463a      	mov	r2, r7
 800624c:	1d3b      	adds	r3, r7, #4
 800624e:	4611      	mov	r1, r2
 8006250:	4618      	mov	r0, r3
 8006252:	f000 f84d 	bl	80062f0 <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8006256:	edd7 7a00 	vldr	s15, [r7]
 800625a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80062d8 <User_Process+0xc8>
 800625e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006262:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8006266:	edd7 7a01 	vldr	s15, [r7, #4]
 800626a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800626e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006276:	ee17 3a90 	vmov	r3, s15
 800627a:	b21b      	sxth	r3, r3
 800627c:	4619      	mov	r1, r3
 800627e:	ee16 0a90 	vmov	r0, s13
 8006282:	f001 f9dd 	bl	8007640 <BlueMS_Environmental_Update>
	              
      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8006286:	4b15      	ldr	r3, [pc, #84]	; (80062dc <User_Process+0xcc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 f8aa 	bl	80063e4 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);      
 8006290:	4a13      	ldr	r2, [pc, #76]	; (80062e0 <User_Process+0xd0>)
 8006292:	4914      	ldr	r1, [pc, #80]	; (80062e4 <User_Process+0xd4>)
 8006294:	4814      	ldr	r0, [pc, #80]	; (80062e8 <User_Process+0xd8>)
 8006296:	f001 f829 	bl	80072ec <Acc_Update>
      Quat_Update(&q_axes);
 800629a:	4814      	ldr	r0, [pc, #80]	; (80062ec <User_Process+0xdc>)
 800629c:	f001 f8b8 	bl	8007410 <Quat_Update>
      
      counter ++;
 80062a0:	4b0e      	ldr	r3, [pc, #56]	; (80062dc <User_Process+0xcc>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	4a0d      	ldr	r2, [pc, #52]	; (80062dc <User_Process+0xcc>)
 80062a8:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 80062aa:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <User_Process+0xcc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b28      	cmp	r3, #40	; 0x28
 80062b0:	d104      	bne.n	80062bc <User_Process+0xac>
        counter = 0;
 80062b2:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <User_Process+0xcc>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 80062b8:	f000 fdb2 	bl	8006e20 <Reset_Motion_Values>
      }
#if !USE_BUTTON      
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 80062bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062c0:	f7fa fd9e 	bl	8000e00 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif  
}
 80062c4:	bf00      	nop
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000021 	.word	0x20000021
 80062d0:	080097d0 	.word	0x080097d0
 80062d4:	20000498 	.word	0x20000498
 80062d8:	42c80000 	.word	0x42c80000
 80062dc:	20000390 	.word	0x20000390
 80062e0:	200004b4 	.word	0x200004b4
 80062e4:	200004a8 	.word	0x200004a8
 80062e8:	2000049c 	.word	0x2000049c
 80062ec:	200004c0 	.word	0x200004c0

080062f0 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{ 
 80062f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 80062fa:	f002 fa0f 	bl	800871c <rand>
 80062fe:	4603      	mov	r3, r0
 8006300:	461d      	mov	r5, r3
 8006302:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8006306:	4629      	mov	r1, r5
 8006308:	4632      	mov	r2, r6
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	f04f 0400 	mov.w	r4, #0
 8006312:	0094      	lsls	r4, r2, #2
 8006314:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006318:	008b      	lsls	r3, r1, #2
 800631a:	4619      	mov	r1, r3
 800631c:	4622      	mov	r2, r4
 800631e:	194b      	adds	r3, r1, r5
 8006320:	eb42 0406 	adc.w	r4, r2, r6
 8006324:	4618      	mov	r0, r3
 8006326:	4621      	mov	r1, r4
 8006328:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	f7fa f996 	bl	8000660 <__aeabi_uldivmod>
 8006334:	4603      	mov	r3, r0
 8006336:	460c      	mov	r4, r1
 8006338:	4618      	mov	r0, r3
 800633a:	4621      	mov	r1, r4
 800633c:	f7fa f90a 	bl	8000554 <__aeabi_ul2d>
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	4b25      	ldr	r3, [pc, #148]	; (80063dc <Set_Random_Environmental_Values+0xec>)
 8006346:	f7f9 ff85 	bl	8000254 <__adddf3>
 800634a:	4603      	mov	r3, r0
 800634c:	460c      	mov	r4, r1
 800634e:	4618      	mov	r0, r3
 8006350:	4621      	mov	r1, r4
 8006352:	f7fa f935 	bl	80005c0 <__aeabi_d2f>
 8006356:	4602      	mov	r2, r0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 800635c:	f002 f9de 	bl	800871c <rand>
 8006360:	4603      	mov	r3, r0
 8006362:	461d      	mov	r5, r3
 8006364:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8006368:	462b      	mov	r3, r5
 800636a:	4634      	mov	r4, r6
 800636c:	f04f 0100 	mov.w	r1, #0
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	00a2      	lsls	r2, r4, #2
 8006376:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800637a:	0099      	lsls	r1, r3, #2
 800637c:	460b      	mov	r3, r1
 800637e:	4614      	mov	r4, r2
 8006380:	195b      	adds	r3, r3, r5
 8006382:	eb44 0406 	adc.w	r4, r4, r6
 8006386:	f04f 0100 	mov.w	r1, #0
 800638a:	f04f 0200 	mov.w	r2, #0
 800638e:	0122      	lsls	r2, r4, #4
 8006390:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8006394:	0119      	lsls	r1, r3, #4
 8006396:	460b      	mov	r3, r1
 8006398:	4614      	mov	r4, r2
 800639a:	4618      	mov	r0, r3
 800639c:	4621      	mov	r1, r4
 800639e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	f7fa f95b 	bl	8000660 <__aeabi_uldivmod>
 80063aa:	4603      	mov	r3, r0
 80063ac:	460c      	mov	r4, r1
 80063ae:	4618      	mov	r0, r3
 80063b0:	4621      	mov	r1, r4
 80063b2:	f7fa f8cf 	bl	8000554 <__aeabi_ul2d>
 80063b6:	f04f 0200 	mov.w	r2, #0
 80063ba:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <Set_Random_Environmental_Values+0xf0>)
 80063bc:	f7f9 ff4a 	bl	8000254 <__adddf3>
 80063c0:	4603      	mov	r3, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	4618      	mov	r0, r3
 80063c6:	4621      	mov	r1, r4
 80063c8:	f7fa f8fa 	bl	80005c0 <__aeabi_d2f>
 80063cc:	4602      	mov	r2, r0
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	601a      	str	r2, [r3, #0]
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063da:	bf00      	nop
 80063dc:	403b0000 	.word	0x403b0000
 80063e0:	408f4000 	.word	0x408f4000

080063e4 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{ 
 80063e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b13      	cmp	r3, #19
 80063f0:	f200 827c 	bhi.w	80068ec <Set_Random_Motion_Values+0x508>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80063f4:	f002 f992 	bl	800871c <rand>
 80063f8:	4603      	mov	r3, r0
 80063fa:	4619      	mov	r1, r3
 80063fc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f04f 0400 	mov.w	r4, #0
 8006406:	fb03 f502 	mul.w	r5, r3, r2
 800640a:	fb01 f004 	mul.w	r0, r1, r4
 800640e:	4428      	add	r0, r5
 8006410:	fba1 3403 	umull	r3, r4, r1, r3
 8006414:	1902      	adds	r2, r0, r4
 8006416:	4614      	mov	r4, r2
 8006418:	461d      	mov	r5, r3
 800641a:	4626      	mov	r6, r4
 800641c:	1969      	adds	r1, r5, r5
 800641e:	eb46 0206 	adc.w	r2, r6, r6
 8006422:	460d      	mov	r5, r1
 8006424:	4616      	mov	r6, r2
 8006426:	18e8      	adds	r0, r5, r3
 8006428:	eb46 0104 	adc.w	r1, r6, r4
 800642c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	f7fa f914 	bl	8000660 <__aeabi_uldivmod>
 8006438:	4603      	mov	r3, r0
 800643a:	460c      	mov	r4, r1
 800643c:	4619      	mov	r1, r3
 800643e:	4622      	mov	r2, r4
 8006440:	f111 030a 	adds.w	r3, r1, #10
 8006444:	f142 0400 	adc.w	r4, r2, #0
 8006448:	4ae0      	ldr	r2, [pc, #896]	; (80067cc <Set_Random_Motion_Values+0x3e8>)
 800644a:	6812      	ldr	r2, [r2, #0]
 800644c:	4413      	add	r3, r2
 800644e:	461a      	mov	r2, r3
 8006450:	4bde      	ldr	r3, [pc, #888]	; (80067cc <Set_Random_Motion_Values+0x3e8>)
 8006452:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8006454:	f002 f962 	bl	800871c <rand>
 8006458:	4603      	mov	r3, r0
 800645a:	4619      	mov	r1, r3
 800645c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f04f 0400 	mov.w	r4, #0
 8006466:	fb03 f502 	mul.w	r5, r3, r2
 800646a:	fb01 f004 	mul.w	r0, r1, r4
 800646e:	4428      	add	r0, r5
 8006470:	fba1 5603 	umull	r5, r6, r1, r3
 8006474:	1983      	adds	r3, r0, r6
 8006476:	461e      	mov	r6, r3
 8006478:	4629      	mov	r1, r5
 800647a:	4632      	mov	r2, r6
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	f04f 0400 	mov.w	r4, #0
 8006484:	0094      	lsls	r4, r2, #2
 8006486:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800648a:	008b      	lsls	r3, r1, #2
 800648c:	4619      	mov	r1, r3
 800648e:	4622      	mov	r2, r4
 8006490:	194b      	adds	r3, r1, r5
 8006492:	eb42 0406 	adc.w	r4, r2, r6
 8006496:	4618      	mov	r0, r3
 8006498:	4621      	mov	r1, r4
 800649a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	f7fa f8dd 	bl	8000660 <__aeabi_uldivmod>
 80064a6:	4603      	mov	r3, r0
 80064a8:	460c      	mov	r4, r1
 80064aa:	4619      	mov	r1, r3
 80064ac:	4622      	mov	r2, r4
 80064ae:	f06f 0309 	mvn.w	r3, #9
 80064b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80064b6:	1a5b      	subs	r3, r3, r1
 80064b8:	eb64 0402 	sbc.w	r4, r4, r2
 80064bc:	461d      	mov	r5, r3
 80064be:	4626      	mov	r6, r4
 80064c0:	4ac2      	ldr	r2, [pc, #776]	; (80067cc <Set_Random_Motion_Values+0x3e8>)
 80064c2:	6852      	ldr	r2, [r2, #4]
 80064c4:	462b      	mov	r3, r5
 80064c6:	4413      	add	r3, r2
 80064c8:	461a      	mov	r2, r3
 80064ca:	4bc0      	ldr	r3, [pc, #768]	; (80067cc <Set_Random_Motion_Values+0x3e8>)
 80064cc:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80064ce:	f002 f925 	bl	800871c <rand>
 80064d2:	4603      	mov	r3, r0
 80064d4:	4619      	mov	r1, r3
 80064d6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f04f 0400 	mov.w	r4, #0
 80064e0:	fb03 f502 	mul.w	r5, r3, r2
 80064e4:	fb01 f004 	mul.w	r0, r1, r4
 80064e8:	4428      	add	r0, r5
 80064ea:	fba1 5603 	umull	r5, r6, r1, r3
 80064ee:	1983      	adds	r3, r0, r6
 80064f0:	461e      	mov	r6, r3
 80064f2:	4629      	mov	r1, r5
 80064f4:	4632      	mov	r2, r6
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	f04f 0400 	mov.w	r4, #0
 80064fe:	00d4      	lsls	r4, r2, #3
 8006500:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006504:	00cb      	lsls	r3, r1, #3
 8006506:	4619      	mov	r1, r3
 8006508:	4622      	mov	r2, r4
 800650a:	1b49      	subs	r1, r1, r5
 800650c:	eb62 0206 	sbc.w	r2, r2, r6
 8006510:	4608      	mov	r0, r1
 8006512:	4611      	mov	r1, r2
 8006514:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	f7fa f8a0 	bl	8000660 <__aeabi_uldivmod>
 8006520:	4603      	mov	r3, r0
 8006522:	460c      	mov	r4, r1
 8006524:	4619      	mov	r1, r3
 8006526:	4622      	mov	r2, r4
 8006528:	f111 030a 	adds.w	r3, r1, #10
 800652c:	f142 0400 	adc.w	r4, r2, #0
 8006530:	4aa6      	ldr	r2, [pc, #664]	; (80067cc <Set_Random_Motion_Values+0x3e8>)
 8006532:	6892      	ldr	r2, [r2, #8]
 8006534:	4413      	add	r3, r2
 8006536:	461a      	mov	r2, r3
 8006538:	4ba4      	ldr	r3, [pc, #656]	; (80067cc <Set_Random_Motion_Values+0x3e8>)
 800653a:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 800653c:	f002 f8ee 	bl	800871c <rand>
 8006540:	4603      	mov	r3, r0
 8006542:	4619      	mov	r1, r3
 8006544:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f04f 0400 	mov.w	r4, #0
 800654e:	fb03 f502 	mul.w	r5, r3, r2
 8006552:	fb01 f004 	mul.w	r0, r1, r4
 8006556:	4428      	add	r0, r5
 8006558:	fba1 5603 	umull	r5, r6, r1, r3
 800655c:	1982      	adds	r2, r0, r6
 800655e:	4616      	mov	r6, r2
 8006560:	196b      	adds	r3, r5, r5
 8006562:	eb46 0406 	adc.w	r4, r6, r6
 8006566:	4618      	mov	r0, r3
 8006568:	4621      	mov	r1, r4
 800656a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	f7fa f875 	bl	8000660 <__aeabi_uldivmod>
 8006576:	4603      	mov	r3, r0
 8006578:	460c      	mov	r4, r1
 800657a:	4619      	mov	r1, r3
 800657c:	4622      	mov	r2, r4
 800657e:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8006582:	f142 0400 	adc.w	r4, r2, #0
 8006586:	4a92      	ldr	r2, [pc, #584]	; (80067d0 <Set_Random_Motion_Values+0x3ec>)
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	4413      	add	r3, r2
 800658c:	461a      	mov	r2, r3
 800658e:	4b90      	ldr	r3, [pc, #576]	; (80067d0 <Set_Random_Motion_Values+0x3ec>)
 8006590:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8006592:	f002 f8c3 	bl	800871c <rand>
 8006596:	4603      	mov	r3, r0
 8006598:	4619      	mov	r1, r3
 800659a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f04f 0400 	mov.w	r4, #0
 80065a4:	fb03 f502 	mul.w	r5, r3, r2
 80065a8:	fb01 f004 	mul.w	r0, r1, r4
 80065ac:	4428      	add	r0, r5
 80065ae:	fba1 3403 	umull	r3, r4, r1, r3
 80065b2:	1902      	adds	r2, r0, r4
 80065b4:	4614      	mov	r4, r2
 80065b6:	f04f 0000 	mov.w	r0, #0
 80065ba:	f04f 0100 	mov.w	r1, #0
 80065be:	00a1      	lsls	r1, r4, #2
 80065c0:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80065c4:	0098      	lsls	r0, r3, #2
 80065c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	f7fa f847 	bl	8000660 <__aeabi_uldivmod>
 80065d2:	4603      	mov	r3, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	4619      	mov	r1, r3
 80065d8:	4622      	mov	r2, r4
 80065da:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80065de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80065e2:	1a5b      	subs	r3, r3, r1
 80065e4:	eb64 0402 	sbc.w	r4, r4, r2
 80065e8:	461d      	mov	r5, r3
 80065ea:	4626      	mov	r6, r4
 80065ec:	4a78      	ldr	r2, [pc, #480]	; (80067d0 <Set_Random_Motion_Values+0x3ec>)
 80065ee:	6852      	ldr	r2, [r2, #4]
 80065f0:	462b      	mov	r3, r5
 80065f2:	4413      	add	r3, r2
 80065f4:	461a      	mov	r2, r3
 80065f6:	4b76      	ldr	r3, [pc, #472]	; (80067d0 <Set_Random_Motion_Values+0x3ec>)
 80065f8:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80065fa:	f002 f88f 	bl	800871c <rand>
 80065fe:	4603      	mov	r3, r0
 8006600:	4619      	mov	r1, r3
 8006602:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f04f 0400 	mov.w	r4, #0
 800660c:	fb03 f502 	mul.w	r5, r3, r2
 8006610:	fb01 f004 	mul.w	r0, r1, r4
 8006614:	4428      	add	r0, r5
 8006616:	fba1 1203 	umull	r1, r2, r1, r3
 800661a:	1883      	adds	r3, r0, r2
 800661c:	461a      	mov	r2, r3
 800661e:	460d      	mov	r5, r1
 8006620:	4616      	mov	r6, r2
 8006622:	196b      	adds	r3, r5, r5
 8006624:	eb46 0406 	adc.w	r4, r6, r6
 8006628:	461d      	mov	r5, r3
 800662a:	4626      	mov	r6, r4
 800662c:	186d      	adds	r5, r5, r1
 800662e:	eb46 0602 	adc.w	r6, r6, r2
 8006632:	196b      	adds	r3, r5, r5
 8006634:	eb46 0406 	adc.w	r4, r6, r6
 8006638:	461d      	mov	r5, r3
 800663a:	4626      	mov	r6, r4
 800663c:	4628      	mov	r0, r5
 800663e:	4631      	mov	r1, r6
 8006640:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	f7fa f80a 	bl	8000660 <__aeabi_uldivmod>
 800664c:	4603      	mov	r3, r0
 800664e:	460c      	mov	r4, r1
 8006650:	4619      	mov	r1, r3
 8006652:	4622      	mov	r2, r4
 8006654:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8006658:	f142 0400 	adc.w	r4, r2, #0
 800665c:	4a5c      	ldr	r2, [pc, #368]	; (80067d0 <Set_Random_Motion_Values+0x3ec>)
 800665e:	6892      	ldr	r2, [r2, #8]
 8006660:	4413      	add	r3, r2
 8006662:	461a      	mov	r2, r3
 8006664:	4b5a      	ldr	r3, [pc, #360]	; (80067d0 <Set_Random_Motion_Values+0x3ec>)
 8006666:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8006668:	f002 f858 	bl	800871c <rand>
 800666c:	4603      	mov	r3, r0
 800666e:	4619      	mov	r1, r3
 8006670:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f04f 0400 	mov.w	r4, #0
 800667a:	fb03 f502 	mul.w	r5, r3, r2
 800667e:	fb01 f004 	mul.w	r0, r1, r4
 8006682:	4428      	add	r0, r5
 8006684:	fba1 3403 	umull	r3, r4, r1, r3
 8006688:	1902      	adds	r2, r0, r4
 800668a:	4614      	mov	r4, r2
 800668c:	461d      	mov	r5, r3
 800668e:	4626      	mov	r6, r4
 8006690:	1969      	adds	r1, r5, r5
 8006692:	eb46 0206 	adc.w	r2, r6, r6
 8006696:	460d      	mov	r5, r1
 8006698:	4616      	mov	r6, r2
 800669a:	18e8      	adds	r0, r5, r3
 800669c:	eb46 0104 	adc.w	r1, r6, r4
 80066a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	f7f9 ffda 	bl	8000660 <__aeabi_uldivmod>
 80066ac:	4603      	mov	r3, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	4619      	mov	r1, r3
 80066b2:	4622      	mov	r2, r4
 80066b4:	1ccb      	adds	r3, r1, #3
 80066b6:	f142 0400 	adc.w	r4, r2, #0
 80066ba:	4a46      	ldr	r2, [pc, #280]	; (80067d4 <Set_Random_Motion_Values+0x3f0>)
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	4413      	add	r3, r2
 80066c0:	461a      	mov	r2, r3
 80066c2:	4b44      	ldr	r3, [pc, #272]	; (80067d4 <Set_Random_Motion_Values+0x3f0>)
 80066c4:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80066c6:	f002 f829 	bl	800871c <rand>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4619      	mov	r1, r3
 80066ce:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f04f 0400 	mov.w	r4, #0
 80066d8:	fb03 f502 	mul.w	r5, r3, r2
 80066dc:	fb01 f004 	mul.w	r0, r1, r4
 80066e0:	4428      	add	r0, r5
 80066e2:	fba1 3403 	umull	r3, r4, r1, r3
 80066e6:	1902      	adds	r2, r0, r4
 80066e8:	4614      	mov	r4, r2
 80066ea:	f04f 0000 	mov.w	r0, #0
 80066ee:	f04f 0100 	mov.w	r1, #0
 80066f2:	00a1      	lsls	r1, r4, #2
 80066f4:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80066f8:	0098      	lsls	r0, r3, #2
 80066fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	f7f9 ffad 	bl	8000660 <__aeabi_uldivmod>
 8006706:	4603      	mov	r3, r0
 8006708:	460c      	mov	r4, r1
 800670a:	4619      	mov	r1, r3
 800670c:	4622      	mov	r2, r4
 800670e:	f06f 0302 	mvn.w	r3, #2
 8006712:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006716:	1a5b      	subs	r3, r3, r1
 8006718:	eb64 0402 	sbc.w	r4, r4, r2
 800671c:	461d      	mov	r5, r3
 800671e:	4626      	mov	r6, r4
 8006720:	4a2c      	ldr	r2, [pc, #176]	; (80067d4 <Set_Random_Motion_Values+0x3f0>)
 8006722:	6852      	ldr	r2, [r2, #4]
 8006724:	462b      	mov	r3, r5
 8006726:	4413      	add	r3, r2
 8006728:	461a      	mov	r2, r3
 800672a:	4b2a      	ldr	r3, [pc, #168]	; (80067d4 <Set_Random_Motion_Values+0x3f0>)
 800672c:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800672e:	f001 fff5 	bl	800871c <rand>
 8006732:	4603      	mov	r3, r0
 8006734:	4619      	mov	r1, r3
 8006736:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f04f 0400 	mov.w	r4, #0
 8006740:	fb03 f502 	mul.w	r5, r3, r2
 8006744:	fb01 f004 	mul.w	r0, r1, r4
 8006748:	4428      	add	r0, r5
 800674a:	fba1 5603 	umull	r5, r6, r1, r3
 800674e:	1983      	adds	r3, r0, r6
 8006750:	461e      	mov	r6, r3
 8006752:	4629      	mov	r1, r5
 8006754:	4632      	mov	r2, r6
 8006756:	f04f 0300 	mov.w	r3, #0
 800675a:	f04f 0400 	mov.w	r4, #0
 800675e:	0094      	lsls	r4, r2, #2
 8006760:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006764:	008b      	lsls	r3, r1, #2
 8006766:	4619      	mov	r1, r3
 8006768:	4622      	mov	r2, r4
 800676a:	194b      	adds	r3, r1, r5
 800676c:	eb42 0406 	adc.w	r4, r2, r6
 8006770:	4618      	mov	r0, r3
 8006772:	4621      	mov	r1, r4
 8006774:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	f7f9 ff70 	bl	8000660 <__aeabi_uldivmod>
 8006780:	4603      	mov	r3, r0
 8006782:	460c      	mov	r4, r1
 8006784:	4619      	mov	r1, r3
 8006786:	4622      	mov	r2, r4
 8006788:	1ccb      	adds	r3, r1, #3
 800678a:	f142 0400 	adc.w	r4, r2, #0
 800678e:	4a11      	ldr	r2, [pc, #68]	; (80067d4 <Set_Random_Motion_Values+0x3f0>)
 8006790:	6892      	ldr	r2, [r2, #8]
 8006792:	4413      	add	r3, r2
 8006794:	461a      	mov	r2, r3
 8006796:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <Set_Random_Motion_Values+0x3f0>)
 8006798:	609a      	str	r2, [r3, #8]
    
    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800679a:	f001 ffbf 	bl	800871c <rand>
 800679e:	4603      	mov	r3, r0
 80067a0:	4619      	mov	r1, r3
 80067a2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f04f 0400 	mov.w	r4, #0
 80067ac:	fb03 f502 	mul.w	r5, r3, r2
 80067b0:	fb01 f004 	mul.w	r0, r1, r4
 80067b4:	4428      	add	r0, r5
 80067b6:	fba1 3403 	umull	r3, r4, r1, r3
 80067ba:	1902      	adds	r2, r0, r4
 80067bc:	4614      	mov	r4, r2
 80067be:	461d      	mov	r5, r3
 80067c0:	4626      	mov	r6, r4
 80067c2:	1969      	adds	r1, r5, r5
 80067c4:	eb46 0206 	adc.w	r2, r6, r6
 80067c8:	e006      	b.n	80067d8 <Set_Random_Motion_Values+0x3f4>
 80067ca:	bf00      	nop
 80067cc:	2000049c 	.word	0x2000049c
 80067d0:	200004a8 	.word	0x200004a8
 80067d4:	200004b4 	.word	0x200004b4
 80067d8:	460d      	mov	r5, r1
 80067da:	4616      	mov	r6, r2
 80067dc:	18e8      	adds	r0, r5, r3
 80067de:	eb46 0104 	adc.w	r1, r6, r4
 80067e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	f7f9 ff39 	bl	8000660 <__aeabi_uldivmod>
 80067ee:	4603      	mov	r3, r0
 80067f0:	460c      	mov	r4, r1
 80067f2:	4619      	mov	r1, r3
 80067f4:	4622      	mov	r2, r4
 80067f6:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 80067fa:	f142 0400 	adc.w	r4, r2, #0
 80067fe:	4a3a      	ldr	r2, [pc, #232]	; (80068e8 <Set_Random_Motion_Values+0x504>)
 8006800:	6812      	ldr	r2, [r2, #0]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	461a      	mov	r2, r3
 8006806:	4b38      	ldr	r3, [pc, #224]	; (80068e8 <Set_Random_Motion_Values+0x504>)
 8006808:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800680a:	f001 ff87 	bl	800871c <rand>
 800680e:	4603      	mov	r3, r0
 8006810:	4619      	mov	r1, r3
 8006812:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f04f 0400 	mov.w	r4, #0
 800681c:	fb03 f502 	mul.w	r5, r3, r2
 8006820:	fb01 f004 	mul.w	r0, r1, r4
 8006824:	4428      	add	r0, r5
 8006826:	fba1 5603 	umull	r5, r6, r1, r3
 800682a:	1983      	adds	r3, r0, r6
 800682c:	461e      	mov	r6, r3
 800682e:	4629      	mov	r1, r5
 8006830:	4632      	mov	r2, r6
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	f04f 0400 	mov.w	r4, #0
 800683a:	0094      	lsls	r4, r2, #2
 800683c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006840:	008b      	lsls	r3, r1, #2
 8006842:	4619      	mov	r1, r3
 8006844:	4622      	mov	r2, r4
 8006846:	194b      	adds	r3, r1, r5
 8006848:	eb42 0406 	adc.w	r4, r2, r6
 800684c:	4618      	mov	r0, r3
 800684e:	4621      	mov	r1, r4
 8006850:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	f7f9 ff02 	bl	8000660 <__aeabi_uldivmod>
 800685c:	4603      	mov	r3, r0
 800685e:	460c      	mov	r4, r1
 8006860:	4619      	mov	r1, r3
 8006862:	4622      	mov	r2, r4
 8006864:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8006868:	f142 0400 	adc.w	r4, r2, #0
 800686c:	4a1e      	ldr	r2, [pc, #120]	; (80068e8 <Set_Random_Motion_Values+0x504>)
 800686e:	6852      	ldr	r2, [r2, #4]
 8006870:	4413      	add	r3, r2
 8006872:	461a      	mov	r2, r3
 8006874:	4b1c      	ldr	r3, [pc, #112]	; (80068e8 <Set_Random_Motion_Values+0x504>)
 8006876:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8006878:	f001 ff50 	bl	800871c <rand>
 800687c:	4603      	mov	r3, r0
 800687e:	4619      	mov	r1, r3
 8006880:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f04f 0400 	mov.w	r4, #0
 800688a:	fb03 f502 	mul.w	r5, r3, r2
 800688e:	fb01 f004 	mul.w	r0, r1, r4
 8006892:	4428      	add	r0, r5
 8006894:	fba1 5603 	umull	r5, r6, r1, r3
 8006898:	1983      	adds	r3, r0, r6
 800689a:	461e      	mov	r6, r3
 800689c:	4629      	mov	r1, r5
 800689e:	4632      	mov	r2, r6
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	f04f 0400 	mov.w	r4, #0
 80068a8:	00d4      	lsls	r4, r2, #3
 80068aa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80068ae:	00cb      	lsls	r3, r1, #3
 80068b0:	4619      	mov	r1, r3
 80068b2:	4622      	mov	r2, r4
 80068b4:	1b49      	subs	r1, r1, r5
 80068b6:	eb62 0206 	sbc.w	r2, r2, r6
 80068ba:	4608      	mov	r0, r1
 80068bc:	4611      	mov	r1, r2
 80068be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	f7f9 fecb 	bl	8000660 <__aeabi_uldivmod>
 80068ca:	4603      	mov	r3, r0
 80068cc:	460c      	mov	r4, r1
 80068ce:	4619      	mov	r1, r3
 80068d0:	4622      	mov	r2, r4
 80068d2:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 80068d6:	f142 0400 	adc.w	r4, r2, #0
 80068da:	4a03      	ldr	r2, [pc, #12]	; (80068e8 <Set_Random_Motion_Values+0x504>)
 80068dc:	6892      	ldr	r2, [r2, #8]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	4b01      	ldr	r3, [pc, #4]	; (80068e8 <Set_Random_Motion_Values+0x504>)
 80068e4:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }
  
}
 80068e6:	e295      	b.n	8006e14 <Set_Random_Motion_Values+0xa30>
 80068e8:	200004c0 	.word	0x200004c0
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80068ec:	f001 ff16 	bl	800871c <rand>
 80068f0:	4603      	mov	r3, r0
 80068f2:	4619      	mov	r1, r3
 80068f4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f04f 0400 	mov.w	r4, #0
 80068fe:	fb03 f502 	mul.w	r5, r3, r2
 8006902:	fb01 f004 	mul.w	r0, r1, r4
 8006906:	4428      	add	r0, r5
 8006908:	fba1 3403 	umull	r3, r4, r1, r3
 800690c:	1902      	adds	r2, r0, r4
 800690e:	4614      	mov	r4, r2
 8006910:	461d      	mov	r5, r3
 8006912:	4626      	mov	r6, r4
 8006914:	1969      	adds	r1, r5, r5
 8006916:	eb46 0206 	adc.w	r2, r6, r6
 800691a:	460d      	mov	r5, r1
 800691c:	4616      	mov	r6, r2
 800691e:	18e8      	adds	r0, r5, r3
 8006920:	eb46 0104 	adc.w	r1, r6, r4
 8006924:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	f7f9 fe98 	bl	8000660 <__aeabi_uldivmod>
 8006930:	4603      	mov	r3, r0
 8006932:	460c      	mov	r4, r1
 8006934:	4619      	mov	r1, r3
 8006936:	4622      	mov	r2, r4
 8006938:	f06f 0309 	mvn.w	r3, #9
 800693c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006940:	1a5b      	subs	r3, r3, r1
 8006942:	eb64 0402 	sbc.w	r4, r4, r2
 8006946:	461d      	mov	r5, r3
 8006948:	4626      	mov	r6, r4
 800694a:	4ae0      	ldr	r2, [pc, #896]	; (8006ccc <Set_Random_Motion_Values+0x8e8>)
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	462b      	mov	r3, r5
 8006950:	4413      	add	r3, r2
 8006952:	461a      	mov	r2, r3
 8006954:	4bdd      	ldr	r3, [pc, #884]	; (8006ccc <Set_Random_Motion_Values+0x8e8>)
 8006956:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8006958:	f001 fee0 	bl	800871c <rand>
 800695c:	4603      	mov	r3, r0
 800695e:	4619      	mov	r1, r3
 8006960:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f04f 0400 	mov.w	r4, #0
 800696a:	fb03 f502 	mul.w	r5, r3, r2
 800696e:	fb01 f004 	mul.w	r0, r1, r4
 8006972:	4428      	add	r0, r5
 8006974:	fba1 5603 	umull	r5, r6, r1, r3
 8006978:	1983      	adds	r3, r0, r6
 800697a:	461e      	mov	r6, r3
 800697c:	4629      	mov	r1, r5
 800697e:	4632      	mov	r2, r6
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	f04f 0400 	mov.w	r4, #0
 8006988:	0094      	lsls	r4, r2, #2
 800698a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800698e:	008b      	lsls	r3, r1, #2
 8006990:	4619      	mov	r1, r3
 8006992:	4622      	mov	r2, r4
 8006994:	194b      	adds	r3, r1, r5
 8006996:	eb42 0406 	adc.w	r4, r2, r6
 800699a:	4618      	mov	r0, r3
 800699c:	4621      	mov	r1, r4
 800699e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	f7f9 fe5b 	bl	8000660 <__aeabi_uldivmod>
 80069aa:	4603      	mov	r3, r0
 80069ac:	460c      	mov	r4, r1
 80069ae:	4619      	mov	r1, r3
 80069b0:	4622      	mov	r2, r4
 80069b2:	f111 030a 	adds.w	r3, r1, #10
 80069b6:	f142 0400 	adc.w	r4, r2, #0
 80069ba:	4ac4      	ldr	r2, [pc, #784]	; (8006ccc <Set_Random_Motion_Values+0x8e8>)
 80069bc:	6852      	ldr	r2, [r2, #4]
 80069be:	4413      	add	r3, r2
 80069c0:	461a      	mov	r2, r3
 80069c2:	4bc2      	ldr	r3, [pc, #776]	; (8006ccc <Set_Random_Motion_Values+0x8e8>)
 80069c4:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80069c6:	f001 fea9 	bl	800871c <rand>
 80069ca:	4603      	mov	r3, r0
 80069cc:	4619      	mov	r1, r3
 80069ce:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f04f 0400 	mov.w	r4, #0
 80069d8:	fb03 f502 	mul.w	r5, r3, r2
 80069dc:	fb01 f004 	mul.w	r0, r1, r4
 80069e0:	4428      	add	r0, r5
 80069e2:	fba1 5603 	umull	r5, r6, r1, r3
 80069e6:	1983      	adds	r3, r0, r6
 80069e8:	461e      	mov	r6, r3
 80069ea:	4629      	mov	r1, r5
 80069ec:	4632      	mov	r2, r6
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	f04f 0400 	mov.w	r4, #0
 80069f6:	00d4      	lsls	r4, r2, #3
 80069f8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80069fc:	00cb      	lsls	r3, r1, #3
 80069fe:	4619      	mov	r1, r3
 8006a00:	4622      	mov	r2, r4
 8006a02:	1b49      	subs	r1, r1, r5
 8006a04:	eb62 0206 	sbc.w	r2, r2, r6
 8006a08:	4608      	mov	r0, r1
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	f7f9 fe24 	bl	8000660 <__aeabi_uldivmod>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4622      	mov	r2, r4
 8006a20:	f06f 0309 	mvn.w	r3, #9
 8006a24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a28:	1a5b      	subs	r3, r3, r1
 8006a2a:	eb64 0402 	sbc.w	r4, r4, r2
 8006a2e:	461d      	mov	r5, r3
 8006a30:	4626      	mov	r6, r4
 8006a32:	4aa6      	ldr	r2, [pc, #664]	; (8006ccc <Set_Random_Motion_Values+0x8e8>)
 8006a34:	6892      	ldr	r2, [r2, #8]
 8006a36:	462b      	mov	r3, r5
 8006a38:	4413      	add	r3, r2
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	4ba3      	ldr	r3, [pc, #652]	; (8006ccc <Set_Random_Motion_Values+0x8e8>)
 8006a3e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8006a40:	f001 fe6c 	bl	800871c <rand>
 8006a44:	4603      	mov	r3, r0
 8006a46:	4619      	mov	r1, r3
 8006a48:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f04f 0400 	mov.w	r4, #0
 8006a52:	fb03 f502 	mul.w	r5, r3, r2
 8006a56:	fb01 f004 	mul.w	r0, r1, r4
 8006a5a:	4428      	add	r0, r5
 8006a5c:	fba1 5603 	umull	r5, r6, r1, r3
 8006a60:	1982      	adds	r2, r0, r6
 8006a62:	4616      	mov	r6, r2
 8006a64:	196b      	adds	r3, r5, r5
 8006a66:	eb46 0406 	adc.w	r4, r6, r6
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	f7f9 fdf3 	bl	8000660 <__aeabi_uldivmod>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4622      	mov	r2, r4
 8006a82:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006a86:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a8a:	1a5b      	subs	r3, r3, r1
 8006a8c:	eb64 0402 	sbc.w	r4, r4, r2
 8006a90:	461d      	mov	r5, r3
 8006a92:	4626      	mov	r6, r4
 8006a94:	4a8e      	ldr	r2, [pc, #568]	; (8006cd0 <Set_Random_Motion_Values+0x8ec>)
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	462b      	mov	r3, r5
 8006a9a:	4413      	add	r3, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4b8c      	ldr	r3, [pc, #560]	; (8006cd0 <Set_Random_Motion_Values+0x8ec>)
 8006aa0:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8006aa2:	f001 fe3b 	bl	800871c <rand>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f04f 0400 	mov.w	r4, #0
 8006ab4:	fb03 f502 	mul.w	r5, r3, r2
 8006ab8:	fb01 f004 	mul.w	r0, r1, r4
 8006abc:	4428      	add	r0, r5
 8006abe:	fba1 3403 	umull	r3, r4, r1, r3
 8006ac2:	1902      	adds	r2, r0, r4
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	f04f 0000 	mov.w	r0, #0
 8006aca:	f04f 0100 	mov.w	r1, #0
 8006ace:	00a1      	lsls	r1, r4, #2
 8006ad0:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8006ad4:	0098      	lsls	r0, r3, #2
 8006ad6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	f7f9 fdbf 	bl	8000660 <__aeabi_uldivmod>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4622      	mov	r2, r4
 8006aea:	f111 0364 	adds.w	r3, r1, #100	; 0x64
 8006aee:	f142 0400 	adc.w	r4, r2, #0
 8006af2:	4a77      	ldr	r2, [pc, #476]	; (8006cd0 <Set_Random_Motion_Values+0x8ec>)
 8006af4:	6852      	ldr	r2, [r2, #4]
 8006af6:	4413      	add	r3, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	4b75      	ldr	r3, [pc, #468]	; (8006cd0 <Set_Random_Motion_Values+0x8ec>)
 8006afc:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8006afe:	f001 fe0d 	bl	800871c <rand>
 8006b02:	4603      	mov	r3, r0
 8006b04:	4619      	mov	r1, r3
 8006b06:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f04f 0400 	mov.w	r4, #0
 8006b10:	fb03 f502 	mul.w	r5, r3, r2
 8006b14:	fb01 f004 	mul.w	r0, r1, r4
 8006b18:	4428      	add	r0, r5
 8006b1a:	fba1 1203 	umull	r1, r2, r1, r3
 8006b1e:	1883      	adds	r3, r0, r2
 8006b20:	461a      	mov	r2, r3
 8006b22:	460d      	mov	r5, r1
 8006b24:	4616      	mov	r6, r2
 8006b26:	196b      	adds	r3, r5, r5
 8006b28:	eb46 0406 	adc.w	r4, r6, r6
 8006b2c:	461d      	mov	r5, r3
 8006b2e:	4626      	mov	r6, r4
 8006b30:	186d      	adds	r5, r5, r1
 8006b32:	eb46 0602 	adc.w	r6, r6, r2
 8006b36:	196b      	adds	r3, r5, r5
 8006b38:	eb46 0406 	adc.w	r4, r6, r6
 8006b3c:	461d      	mov	r5, r3
 8006b3e:	4626      	mov	r6, r4
 8006b40:	4628      	mov	r0, r5
 8006b42:	4631      	mov	r1, r6
 8006b44:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	f7f9 fd88 	bl	8000660 <__aeabi_uldivmod>
 8006b50:	4603      	mov	r3, r0
 8006b52:	460c      	mov	r4, r1
 8006b54:	4619      	mov	r1, r3
 8006b56:	4622      	mov	r2, r4
 8006b58:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006b5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006b60:	1a5b      	subs	r3, r3, r1
 8006b62:	eb64 0402 	sbc.w	r4, r4, r2
 8006b66:	461d      	mov	r5, r3
 8006b68:	4626      	mov	r6, r4
 8006b6a:	4a59      	ldr	r2, [pc, #356]	; (8006cd0 <Set_Random_Motion_Values+0x8ec>)
 8006b6c:	6892      	ldr	r2, [r2, #8]
 8006b6e:	462b      	mov	r3, r5
 8006b70:	4413      	add	r3, r2
 8006b72:	461a      	mov	r2, r3
 8006b74:	4b56      	ldr	r3, [pc, #344]	; (8006cd0 <Set_Random_Motion_Values+0x8ec>)
 8006b76:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8006b78:	f001 fdd0 	bl	800871c <rand>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	4619      	mov	r1, r3
 8006b80:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f04f 0400 	mov.w	r4, #0
 8006b8a:	fb03 f502 	mul.w	r5, r3, r2
 8006b8e:	fb01 f004 	mul.w	r0, r1, r4
 8006b92:	4428      	add	r0, r5
 8006b94:	fba1 5603 	umull	r5, r6, r1, r3
 8006b98:	1983      	adds	r3, r0, r6
 8006b9a:	461e      	mov	r6, r3
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	4632      	mov	r2, r6
 8006ba0:	f04f 0300 	mov.w	r3, #0
 8006ba4:	f04f 0400 	mov.w	r4, #0
 8006ba8:	00d4      	lsls	r4, r2, #3
 8006baa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006bae:	00cb      	lsls	r3, r1, #3
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	1b49      	subs	r1, r1, r5
 8006bb6:	eb62 0206 	sbc.w	r2, r2, r6
 8006bba:	4608      	mov	r0, r1
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006bc2:	f04f 0300 	mov.w	r3, #0
 8006bc6:	f7f9 fd4b 	bl	8000660 <__aeabi_uldivmod>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	460c      	mov	r4, r1
 8006bce:	4619      	mov	r1, r3
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	f06f 0302 	mvn.w	r3, #2
 8006bd6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006bda:	1a5b      	subs	r3, r3, r1
 8006bdc:	eb64 0402 	sbc.w	r4, r4, r2
 8006be0:	461d      	mov	r5, r3
 8006be2:	4626      	mov	r6, r4
 8006be4:	4a3b      	ldr	r2, [pc, #236]	; (8006cd4 <Set_Random_Motion_Values+0x8f0>)
 8006be6:	6812      	ldr	r2, [r2, #0]
 8006be8:	462b      	mov	r3, r5
 8006bea:	4413      	add	r3, r2
 8006bec:	461a      	mov	r2, r3
 8006bee:	4b39      	ldr	r3, [pc, #228]	; (8006cd4 <Set_Random_Motion_Values+0x8f0>)
 8006bf0:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8006bf2:	f001 fd93 	bl	800871c <rand>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f04f 0400 	mov.w	r4, #0
 8006c04:	fb03 f502 	mul.w	r5, r3, r2
 8006c08:	fb01 f004 	mul.w	r0, r1, r4
 8006c0c:	4428      	add	r0, r5
 8006c0e:	fba1 5603 	umull	r5, r6, r1, r3
 8006c12:	1983      	adds	r3, r0, r6
 8006c14:	461e      	mov	r6, r3
 8006c16:	4629      	mov	r1, r5
 8006c18:	4632      	mov	r2, r6
 8006c1a:	f04f 0300 	mov.w	r3, #0
 8006c1e:	f04f 0400 	mov.w	r4, #0
 8006c22:	00d4      	lsls	r4, r2, #3
 8006c24:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006c28:	00cb      	lsls	r3, r1, #3
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	194b      	adds	r3, r1, r5
 8006c30:	eb42 0406 	adc.w	r4, r2, r6
 8006c34:	4618      	mov	r0, r3
 8006c36:	4621      	mov	r1, r4
 8006c38:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006c3c:	f04f 0300 	mov.w	r3, #0
 8006c40:	f7f9 fd0e 	bl	8000660 <__aeabi_uldivmod>
 8006c44:	4603      	mov	r3, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	1ccb      	adds	r3, r1, #3
 8006c4e:	f142 0400 	adc.w	r4, r2, #0
 8006c52:	4a20      	ldr	r2, [pc, #128]	; (8006cd4 <Set_Random_Motion_Values+0x8f0>)
 8006c54:	6852      	ldr	r2, [r2, #4]
 8006c56:	4413      	add	r3, r2
 8006c58:	461a      	mov	r2, r3
 8006c5a:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <Set_Random_Motion_Values+0x8f0>)
 8006c5c:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8006c5e:	f001 fd5d 	bl	800871c <rand>
 8006c62:	4603      	mov	r3, r0
 8006c64:	4619      	mov	r1, r3
 8006c66:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f04f 0400 	mov.w	r4, #0
 8006c70:	fb03 f502 	mul.w	r5, r3, r2
 8006c74:	fb01 f004 	mul.w	r0, r1, r4
 8006c78:	4428      	add	r0, r5
 8006c7a:	fba1 3403 	umull	r3, r4, r1, r3
 8006c7e:	1902      	adds	r2, r0, r4
 8006c80:	4614      	mov	r4, r2
 8006c82:	461d      	mov	r5, r3
 8006c84:	4626      	mov	r6, r4
 8006c86:	1969      	adds	r1, r5, r5
 8006c88:	eb46 0206 	adc.w	r2, r6, r6
 8006c8c:	460d      	mov	r5, r1
 8006c8e:	4616      	mov	r6, r2
 8006c90:	18e8      	adds	r0, r5, r3
 8006c92:	eb46 0104 	adc.w	r1, r6, r4
 8006c96:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006c9a:	f04f 0300 	mov.w	r3, #0
 8006c9e:	f7f9 fcdf 	bl	8000660 <__aeabi_uldivmod>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4622      	mov	r2, r4
 8006caa:	f06f 0302 	mvn.w	r3, #2
 8006cae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006cb2:	1a5b      	subs	r3, r3, r1
 8006cb4:	eb64 0402 	sbc.w	r4, r4, r2
 8006cb8:	461d      	mov	r5, r3
 8006cba:	4626      	mov	r6, r4
 8006cbc:	4a05      	ldr	r2, [pc, #20]	; (8006cd4 <Set_Random_Motion_Values+0x8f0>)
 8006cbe:	6892      	ldr	r2, [r2, #8]
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	4413      	add	r3, r2
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	4b03      	ldr	r3, [pc, #12]	; (8006cd4 <Set_Random_Motion_Values+0x8f0>)
 8006cc8:	609a      	str	r2, [r3, #8]
 8006cca:	e005      	b.n	8006cd8 <Set_Random_Motion_Values+0x8f4>
 8006ccc:	2000049c 	.word	0x2000049c
 8006cd0:	200004a8 	.word	0x200004a8
 8006cd4:	200004b4 	.word	0x200004b4
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8006cd8:	f001 fd20 	bl	800871c <rand>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	4619      	mov	r1, r3
 8006ce0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f04f 0400 	mov.w	r4, #0
 8006cea:	fb03 f502 	mul.w	r5, r3, r2
 8006cee:	fb01 f004 	mul.w	r0, r1, r4
 8006cf2:	4428      	add	r0, r5
 8006cf4:	fba1 5603 	umull	r5, r6, r1, r3
 8006cf8:	1983      	adds	r3, r0, r6
 8006cfa:	461e      	mov	r6, r3
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	4632      	mov	r2, r6
 8006d00:	f04f 0300 	mov.w	r3, #0
 8006d04:	f04f 0400 	mov.w	r4, #0
 8006d08:	00d4      	lsls	r4, r2, #3
 8006d0a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006d0e:	00cb      	lsls	r3, r1, #3
 8006d10:	4619      	mov	r1, r3
 8006d12:	4622      	mov	r2, r4
 8006d14:	1b49      	subs	r1, r1, r5
 8006d16:	eb62 0206 	sbc.w	r2, r2, r6
 8006d1a:	4608      	mov	r0, r1
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	f7f9 fc9b 	bl	8000660 <__aeabi_uldivmod>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4622      	mov	r2, r4
 8006d32:	f111 03c8 	adds.w	r3, r1, #200	; 0xc8
 8006d36:	f142 0400 	adc.w	r4, r2, #0
 8006d3a:	4a38      	ldr	r2, [pc, #224]	; (8006e1c <Set_Random_Motion_Values+0xa38>)
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	4413      	add	r3, r2
 8006d40:	461a      	mov	r2, r3
 8006d42:	4b36      	ldr	r3, [pc, #216]	; (8006e1c <Set_Random_Motion_Values+0xa38>)
 8006d44:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8006d46:	f001 fce9 	bl	800871c <rand>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f04f 0400 	mov.w	r4, #0
 8006d58:	fb03 f502 	mul.w	r5, r3, r2
 8006d5c:	fb01 f004 	mul.w	r0, r1, r4
 8006d60:	4428      	add	r0, r5
 8006d62:	fba1 3403 	umull	r3, r4, r1, r3
 8006d66:	1902      	adds	r2, r0, r4
 8006d68:	4614      	mov	r4, r2
 8006d6a:	461d      	mov	r5, r3
 8006d6c:	4626      	mov	r6, r4
 8006d6e:	1969      	adds	r1, r5, r5
 8006d70:	eb46 0206 	adc.w	r2, r6, r6
 8006d74:	460d      	mov	r5, r1
 8006d76:	4616      	mov	r6, r2
 8006d78:	18e8      	adds	r0, r5, r3
 8006d7a:	eb46 0104 	adc.w	r1, r6, r4
 8006d7e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006d82:	f04f 0300 	mov.w	r3, #0
 8006d86:	f7f9 fc6b 	bl	8000660 <__aeabi_uldivmod>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4622      	mov	r2, r4
 8006d92:	f111 0396 	adds.w	r3, r1, #150	; 0x96
 8006d96:	f142 0400 	adc.w	r4, r2, #0
 8006d9a:	4a20      	ldr	r2, [pc, #128]	; (8006e1c <Set_Random_Motion_Values+0xa38>)
 8006d9c:	6852      	ldr	r2, [r2, #4]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	4b1e      	ldr	r3, [pc, #120]	; (8006e1c <Set_Random_Motion_Values+0xa38>)
 8006da4:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8006da6:	f001 fcb9 	bl	800871c <rand>
 8006daa:	4603      	mov	r3, r0
 8006dac:	4619      	mov	r1, r3
 8006dae:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f04f 0400 	mov.w	r4, #0
 8006db8:	fb03 f502 	mul.w	r5, r3, r2
 8006dbc:	fb01 f004 	mul.w	r0, r1, r4
 8006dc0:	4428      	add	r0, r5
 8006dc2:	fba1 5603 	umull	r5, r6, r1, r3
 8006dc6:	1983      	adds	r3, r0, r6
 8006dc8:	461e      	mov	r6, r3
 8006dca:	4629      	mov	r1, r5
 8006dcc:	4632      	mov	r2, r6
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	f04f 0400 	mov.w	r4, #0
 8006dd6:	0094      	lsls	r4, r2, #2
 8006dd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ddc:	008b      	lsls	r3, r1, #2
 8006dde:	4619      	mov	r1, r3
 8006de0:	4622      	mov	r2, r4
 8006de2:	194b      	adds	r3, r1, r5
 8006de4:	eb42 0406 	adc.w	r4, r2, r6
 8006de8:	4618      	mov	r0, r3
 8006dea:	4621      	mov	r1, r4
 8006dec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006df0:	f04f 0300 	mov.w	r3, #0
 8006df4:	f7f9 fc34 	bl	8000660 <__aeabi_uldivmod>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4622      	mov	r2, r4
 8006e00:	f111 030a 	adds.w	r3, r1, #10
 8006e04:	f142 0400 	adc.w	r4, r2, #0
 8006e08:	4a04      	ldr	r2, [pc, #16]	; (8006e1c <Set_Random_Motion_Values+0xa38>)
 8006e0a:	6892      	ldr	r2, [r2, #8]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4b02      	ldr	r3, [pc, #8]	; (8006e1c <Set_Random_Motion_Values+0xa38>)
 8006e12:	609a      	str	r2, [r3, #8]
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e1c:	200004c0 	.word	0x200004c0

08006e20 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8006e24:	4b6e      	ldr	r3, [pc, #440]	; (8006fe0 <Reset_Motion_Values+0x1c0>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	4b6e      	ldr	r3, [pc, #440]	; (8006fe4 <Reset_Motion_Values+0x1c4>)
 8006e2a:	fb83 1302 	smull	r1, r3, r3, r2
 8006e2e:	11d9      	asrs	r1, r3, #7
 8006e30:	17d3      	asrs	r3, r2, #31
 8006e32:	1acb      	subs	r3, r1, r3
 8006e34:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006e38:	fb01 f303 	mul.w	r3, r1, r3
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d103      	bne.n	8006e4a <Reset_Motion_Values+0x2a>
 8006e42:	4b67      	ldr	r3, [pc, #412]	; (8006fe0 <Reset_Motion_Values+0x1c0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	425b      	negs	r3, r3
 8006e48:	e000      	b.n	8006e4c <Reset_Motion_Values+0x2c>
 8006e4a:	230a      	movs	r3, #10
 8006e4c:	4a64      	ldr	r2, [pc, #400]	; (8006fe0 <Reset_Motion_Values+0x1c0>)
 8006e4e:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8006e50:	4b63      	ldr	r3, [pc, #396]	; (8006fe0 <Reset_Motion_Values+0x1c0>)
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	4b63      	ldr	r3, [pc, #396]	; (8006fe4 <Reset_Motion_Values+0x1c4>)
 8006e56:	fb83 1302 	smull	r1, r3, r3, r2
 8006e5a:	11d9      	asrs	r1, r3, #7
 8006e5c:	17d3      	asrs	r3, r2, #31
 8006e5e:	1acb      	subs	r3, r1, r3
 8006e60:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d103      	bne.n	8006e76 <Reset_Motion_Values+0x56>
 8006e6e:	4b5c      	ldr	r3, [pc, #368]	; (8006fe0 <Reset_Motion_Values+0x1c0>)
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	425b      	negs	r3, r3
 8006e74:	e001      	b.n	8006e7a <Reset_Motion_Values+0x5a>
 8006e76:	f06f 0309 	mvn.w	r3, #9
 8006e7a:	4a59      	ldr	r2, [pc, #356]	; (8006fe0 <Reset_Motion_Values+0x1c0>)
 8006e7c:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8006e7e:	4b58      	ldr	r3, [pc, #352]	; (8006fe0 <Reset_Motion_Values+0x1c0>)
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	4b58      	ldr	r3, [pc, #352]	; (8006fe4 <Reset_Motion_Values+0x1c4>)
 8006e84:	fb83 1302 	smull	r1, r3, r3, r2
 8006e88:	11d9      	asrs	r1, r3, #7
 8006e8a:	17d3      	asrs	r3, r2, #31
 8006e8c:	1acb      	subs	r3, r1, r3
 8006e8e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006e92:	fb01 f303 	mul.w	r3, r1, r3
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d103      	bne.n	8006ea4 <Reset_Motion_Values+0x84>
 8006e9c:	4b50      	ldr	r3, [pc, #320]	; (8006fe0 <Reset_Motion_Values+0x1c0>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	425b      	negs	r3, r3
 8006ea2:	e000      	b.n	8006ea6 <Reset_Motion_Values+0x86>
 8006ea4:	230a      	movs	r3, #10
 8006ea6:	4a4e      	ldr	r2, [pc, #312]	; (8006fe0 <Reset_Motion_Values+0x1c0>)
 8006ea8:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8006eaa:	4b4f      	ldr	r3, [pc, #316]	; (8006fe8 <Reset_Motion_Values+0x1c8>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b4d      	ldr	r3, [pc, #308]	; (8006fe4 <Reset_Motion_Values+0x1c4>)
 8006eb0:	fb83 1302 	smull	r1, r3, r3, r2
 8006eb4:	11d9      	asrs	r1, r3, #7
 8006eb6:	17d3      	asrs	r3, r2, #31
 8006eb8:	1acb      	subs	r3, r1, r3
 8006eba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <Reset_Motion_Values+0xb0>
 8006ec8:	4b47      	ldr	r3, [pc, #284]	; (8006fe8 <Reset_Motion_Values+0x1c8>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	425b      	negs	r3, r3
 8006ece:	e000      	b.n	8006ed2 <Reset_Motion_Values+0xb2>
 8006ed0:	2364      	movs	r3, #100	; 0x64
 8006ed2:	4a45      	ldr	r2, [pc, #276]	; (8006fe8 <Reset_Motion_Values+0x1c8>)
 8006ed4:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8006ed6:	4b44      	ldr	r3, [pc, #272]	; (8006fe8 <Reset_Motion_Values+0x1c8>)
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	4b42      	ldr	r3, [pc, #264]	; (8006fe4 <Reset_Motion_Values+0x1c4>)
 8006edc:	fb83 1302 	smull	r1, r3, r3, r2
 8006ee0:	11d9      	asrs	r1, r3, #7
 8006ee2:	17d3      	asrs	r3, r2, #31
 8006ee4:	1acb      	subs	r3, r1, r3
 8006ee6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006eea:	fb01 f303 	mul.w	r3, r1, r3
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d103      	bne.n	8006efc <Reset_Motion_Values+0xdc>
 8006ef4:	4b3c      	ldr	r3, [pc, #240]	; (8006fe8 <Reset_Motion_Values+0x1c8>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	425b      	negs	r3, r3
 8006efa:	e001      	b.n	8006f00 <Reset_Motion_Values+0xe0>
 8006efc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006f00:	4a39      	ldr	r2, [pc, #228]	; (8006fe8 <Reset_Motion_Values+0x1c8>)
 8006f02:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8006f04:	4b38      	ldr	r3, [pc, #224]	; (8006fe8 <Reset_Motion_Values+0x1c8>)
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	4b36      	ldr	r3, [pc, #216]	; (8006fe4 <Reset_Motion_Values+0x1c4>)
 8006f0a:	fb83 1302 	smull	r1, r3, r3, r2
 8006f0e:	11d9      	asrs	r1, r3, #7
 8006f10:	17d3      	asrs	r3, r2, #31
 8006f12:	1acb      	subs	r3, r1, r3
 8006f14:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006f18:	fb01 f303 	mul.w	r3, r1, r3
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <Reset_Motion_Values+0x10a>
 8006f22:	4b31      	ldr	r3, [pc, #196]	; (8006fe8 <Reset_Motion_Values+0x1c8>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	425b      	negs	r3, r3
 8006f28:	e000      	b.n	8006f2c <Reset_Motion_Values+0x10c>
 8006f2a:	2364      	movs	r3, #100	; 0x64
 8006f2c:	4a2e      	ldr	r2, [pc, #184]	; (8006fe8 <Reset_Motion_Values+0x1c8>)
 8006f2e:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8006f30:	4b2d      	ldr	r3, [pc, #180]	; (8006fe8 <Reset_Motion_Values+0x1c8>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	4b2b      	ldr	r3, [pc, #172]	; (8006fe4 <Reset_Motion_Values+0x1c4>)
 8006f36:	fb83 1302 	smull	r1, r3, r3, r2
 8006f3a:	11d9      	asrs	r1, r3, #7
 8006f3c:	17d3      	asrs	r3, r2, #31
 8006f3e:	1acb      	subs	r3, r1, r3
 8006f40:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006f44:	fb01 f303 	mul.w	r3, r1, r3
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d103      	bne.n	8006f56 <Reset_Motion_Values+0x136>
 8006f4e:	4b27      	ldr	r3, [pc, #156]	; (8006fec <Reset_Motion_Values+0x1cc>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	425b      	negs	r3, r3
 8006f54:	e000      	b.n	8006f58 <Reset_Motion_Values+0x138>
 8006f56:	2303      	movs	r3, #3
 8006f58:	4a24      	ldr	r2, [pc, #144]	; (8006fec <Reset_Motion_Values+0x1cc>)
 8006f5a:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8006f5c:	4b22      	ldr	r3, [pc, #136]	; (8006fe8 <Reset_Motion_Values+0x1c8>)
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	4b20      	ldr	r3, [pc, #128]	; (8006fe4 <Reset_Motion_Values+0x1c4>)
 8006f62:	fb83 1302 	smull	r1, r3, r3, r2
 8006f66:	11d9      	asrs	r1, r3, #7
 8006f68:	17d3      	asrs	r3, r2, #31
 8006f6a:	1acb      	subs	r3, r1, r3
 8006f6c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d103      	bne.n	8006f82 <Reset_Motion_Values+0x162>
 8006f7a:	4b1c      	ldr	r3, [pc, #112]	; (8006fec <Reset_Motion_Values+0x1cc>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	425b      	negs	r3, r3
 8006f80:	e001      	b.n	8006f86 <Reset_Motion_Values+0x166>
 8006f82:	f06f 0302 	mvn.w	r3, #2
 8006f86:	4a19      	ldr	r2, [pc, #100]	; (8006fec <Reset_Motion_Values+0x1cc>)
 8006f88:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8006f8a:	4b17      	ldr	r3, [pc, #92]	; (8006fe8 <Reset_Motion_Values+0x1c8>)
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	4b15      	ldr	r3, [pc, #84]	; (8006fe4 <Reset_Motion_Values+0x1c4>)
 8006f90:	fb83 1302 	smull	r1, r3, r3, r2
 8006f94:	11d9      	asrs	r1, r3, #7
 8006f96:	17d3      	asrs	r3, r2, #31
 8006f98:	1acb      	subs	r3, r1, r3
 8006f9a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006f9e:	fb01 f303 	mul.w	r3, r1, r3
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d103      	bne.n	8006fb0 <Reset_Motion_Values+0x190>
 8006fa8:	4b10      	ldr	r3, [pc, #64]	; (8006fec <Reset_Motion_Values+0x1cc>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	425b      	negs	r3, r3
 8006fae:	e000      	b.n	8006fb2 <Reset_Motion_Values+0x192>
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	4a0e      	ldr	r2, [pc, #56]	; (8006fec <Reset_Motion_Values+0x1cc>)
 8006fb4:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8006fb6:	4b0e      	ldr	r3, [pc, #56]	; (8006ff0 <Reset_Motion_Values+0x1d0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	425b      	negs	r3, r3
 8006fbc:	4a0c      	ldr	r2, [pc, #48]	; (8006ff0 <Reset_Motion_Values+0x1d0>)
 8006fbe:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <Reset_Motion_Values+0x1d0>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	425b      	negs	r3, r3
 8006fc6:	4a0a      	ldr	r2, [pc, #40]	; (8006ff0 <Reset_Motion_Values+0x1d0>)
 8006fc8:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8006fca:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <Reset_Motion_Values+0x1d0>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	425b      	negs	r3, r3
 8006fd0:	4a07      	ldr	r2, [pc, #28]	; (8006ff0 <Reset_Motion_Values+0x1d0>)
 8006fd2:	6093      	str	r3, [r2, #8]
}
 8006fd4:	bf00      	nop
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	2000049c 	.word	0x2000049c
 8006fe4:	10624dd3 	.word	0x10624dd3
 8006fe8:	200004a8 	.word	0x200004a8
 8006fec:	200004b4 	.word	0x200004b4
 8006ff0:	200004c0 	.word	0x200004c0

08006ff4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8006ffe:	4b04      	ldr	r3, [pc, #16]	; (8007010 <BSP_PB_Callback+0x1c>)
 8007000:	2201      	movs	r2, #1
 8007002:	701a      	strb	r2, [r3, #0]
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	2000038d 	.word	0x2000038d

08007014 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8007014:	b5b0      	push	{r4, r5, r7, lr}
 8007016:	b08c      	sub	sp, #48	; 0x30
 8007018:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  
  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);  
 800701a:	231b      	movs	r3, #27
 800701c:	713b      	strb	r3, [r7, #4]
 800701e:	23c5      	movs	r3, #197	; 0xc5
 8007020:	717b      	strb	r3, [r7, #5]
 8007022:	23d5      	movs	r3, #213	; 0xd5
 8007024:	71bb      	strb	r3, [r7, #6]
 8007026:	23a5      	movs	r3, #165	; 0xa5
 8007028:	71fb      	strb	r3, [r7, #7]
 800702a:	2302      	movs	r3, #2
 800702c:	723b      	strb	r3, [r7, #8]
 800702e:	2300      	movs	r3, #0
 8007030:	727b      	strb	r3, [r7, #9]
 8007032:	23b4      	movs	r3, #180	; 0xb4
 8007034:	72bb      	strb	r3, [r7, #10]
 8007036:	239a      	movs	r3, #154	; 0x9a
 8007038:	72fb      	strb	r3, [r7, #11]
 800703a:	23e1      	movs	r3, #225	; 0xe1
 800703c:	733b      	strb	r3, [r7, #12]
 800703e:	2311      	movs	r3, #17
 8007040:	737b      	strb	r3, [r7, #13]
 8007042:	2301      	movs	r3, #1
 8007044:	73bb      	strb	r3, [r7, #14]
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
 800704a:	2300      	movs	r3, #0
 800704c:	743b      	strb	r3, [r7, #16]
 800704e:	2300      	movs	r3, #0
 8007050:	747b      	strb	r3, [r7, #17]
 8007052:	2300      	movs	r3, #0
 8007054:	74bb      	strb	r3, [r7, #18]
 8007056:	2300      	movs	r3, #0
 8007058:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800705a:	4b55      	ldr	r3, [pc, #340]	; (80071b0 <Add_HWServW2ST_Service+0x19c>)
 800705c:	461d      	mov	r5, r3
 800705e:	1d3c      	adds	r4, r7, #4
 8007060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007062:	6028      	str	r0, [r5, #0]
 8007064:	6069      	str	r1, [r5, #4]
 8007066:	60aa      	str	r2, [r5, #8]
 8007068:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 800706a:	4b52      	ldr	r3, [pc, #328]	; (80071b4 <Add_HWServW2ST_Service+0x1a0>)
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	2310      	movs	r3, #16
 8007070:	2201      	movs	r2, #1
 8007072:	494f      	ldr	r1, [pc, #316]	; (80071b0 <Add_HWServW2ST_Service+0x19c>)
 8007074:	2002      	movs	r0, #2
 8007076:	f7fe f83a 	bl	80050ee <aci_gatt_add_serv>
 800707a:	4603      	mov	r3, r0
 800707c:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle); 
  if (ret != BLE_STATUS_SUCCESS) 
 800707e:	7dfb      	ldrb	r3, [r7, #23]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <Add_HWServW2ST_Service+0x74>
    return BLE_STATUS_ERROR;    
 8007084:	2347      	movs	r3, #71	; 0x47
 8007086:	e08e      	b.n	80071a6 <Add_HWServW2ST_Service+0x192>
  
  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8007088:	231b      	movs	r3, #27
 800708a:	713b      	strb	r3, [r7, #4]
 800708c:	23c5      	movs	r3, #197	; 0xc5
 800708e:	717b      	strb	r3, [r7, #5]
 8007090:	23d5      	movs	r3, #213	; 0xd5
 8007092:	71bb      	strb	r3, [r7, #6]
 8007094:	23a5      	movs	r3, #165	; 0xa5
 8007096:	71fb      	strb	r3, [r7, #7]
 8007098:	2302      	movs	r3, #2
 800709a:	723b      	strb	r3, [r7, #8]
 800709c:	2300      	movs	r3, #0
 800709e:	727b      	strb	r3, [r7, #9]
 80070a0:	2336      	movs	r3, #54	; 0x36
 80070a2:	72bb      	strb	r3, [r7, #10]
 80070a4:	23ac      	movs	r3, #172	; 0xac
 80070a6:	72fb      	strb	r3, [r7, #11]
 80070a8:	23e1      	movs	r3, #225	; 0xe1
 80070aa:	733b      	strb	r3, [r7, #12]
 80070ac:	2311      	movs	r3, #17
 80070ae:	737b      	strb	r3, [r7, #13]
 80070b0:	2301      	movs	r3, #1
 80070b2:	73bb      	strb	r3, [r7, #14]
 80070b4:	2300      	movs	r3, #0
 80070b6:	73fb      	strb	r3, [r7, #15]
 80070b8:	2300      	movs	r3, #0
 80070ba:	743b      	strb	r3, [r7, #16]
 80070bc:	2300      	movs	r3, #0
 80070be:	747b      	strb	r3, [r7, #17]
 80070c0:	2300      	movs	r3, #0
 80070c2:	74bb      	strb	r3, [r7, #18]
 80070c4:	2300      	movs	r3, #0
 80070c6:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 80070c8:	7cbb      	ldrb	r3, [r7, #18]
 80070ca:	f043 0304 	orr.w	r3, r3, #4
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 80070d2:	7cbb      	ldrb	r3, [r7, #18]
 80070d4:	f043 0310 	orr.w	r3, r3, #16
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 80070dc:	4b36      	ldr	r3, [pc, #216]	; (80071b8 <Add_HWServW2ST_Service+0x1a4>)
 80070de:	461d      	mov	r5, r3
 80070e0:	1d3c      	adds	r4, r7, #4
 80070e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070e4:	6028      	str	r0, [r5, #0]
 80070e6:	6069      	str	r1, [r5, #4]
 80070e8:	60aa      	str	r2, [r5, #8]
 80070ea:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 80070ec:	4b31      	ldr	r3, [pc, #196]	; (80071b4 <Add_HWServW2ST_Service+0x1a0>)
 80070ee:	8818      	ldrh	r0, [r3, #0]
 80070f0:	4b32      	ldr	r3, [pc, #200]	; (80071bc <Add_HWServW2ST_Service+0x1a8>)
 80070f2:	9305      	str	r3, [sp, #20]
 80070f4:	2300      	movs	r3, #0
 80070f6:	9304      	str	r3, [sp, #16]
 80070f8:	2310      	movs	r3, #16
 80070fa:	9303      	str	r3, [sp, #12]
 80070fc:	2304      	movs	r3, #4
 80070fe:	9302      	str	r3, [sp, #8]
 8007100:	2300      	movs	r3, #0
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	2312      	movs	r3, #18
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	2308      	movs	r3, #8
 800710a:	4a2b      	ldr	r2, [pc, #172]	; (80071b8 <Add_HWServW2ST_Service+0x1a4>)
 800710c:	2102      	movs	r1, #2
 800710e:	f7fe f87a 	bl	8005206 <aci_gatt_add_char>
 8007112:	4603      	mov	r3, r0
 8007114:	75fb      	strb	r3, [r7, #23]
                           2+2+4, 
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ, 
                           ATTR_PERMISSION_NONE, 
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS) 
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <Add_HWServW2ST_Service+0x10c>
    return BLE_STATUS_ERROR;
 800711c:	2347      	movs	r3, #71	; 0x47
 800711e:	e042      	b.n	80071a6 <Add_HWServW2ST_Service+0x192>
  
  
  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8007120:	231b      	movs	r3, #27
 8007122:	713b      	strb	r3, [r7, #4]
 8007124:	23c5      	movs	r3, #197	; 0xc5
 8007126:	717b      	strb	r3, [r7, #5]
 8007128:	23d5      	movs	r3, #213	; 0xd5
 800712a:	71bb      	strb	r3, [r7, #6]
 800712c:	23a5      	movs	r3, #165	; 0xa5
 800712e:	71fb      	strb	r3, [r7, #7]
 8007130:	2302      	movs	r3, #2
 8007132:	723b      	strb	r3, [r7, #8]
 8007134:	2300      	movs	r3, #0
 8007136:	727b      	strb	r3, [r7, #9]
 8007138:	2336      	movs	r3, #54	; 0x36
 800713a:	72bb      	strb	r3, [r7, #10]
 800713c:	23ac      	movs	r3, #172	; 0xac
 800713e:	72fb      	strb	r3, [r7, #11]
 8007140:	23e1      	movs	r3, #225	; 0xe1
 8007142:	733b      	strb	r3, [r7, #12]
 8007144:	2311      	movs	r3, #17
 8007146:	737b      	strb	r3, [r7, #13]
 8007148:	2301      	movs	r3, #1
 800714a:	73bb      	strb	r3, [r7, #14]
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
 8007150:	2300      	movs	r3, #0
 8007152:	743b      	strb	r3, [r7, #16]
 8007154:	2300      	movs	r3, #0
 8007156:	747b      	strb	r3, [r7, #17]
 8007158:	23e0      	movs	r3, #224	; 0xe0
 800715a:	74bb      	strb	r3, [r7, #18]
 800715c:	2300      	movs	r3, #0
 800715e:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 8007160:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <Add_HWServW2ST_Service+0x1a4>)
 8007162:	461d      	mov	r5, r3
 8007164:	1d3c      	adds	r4, r7, #4
 8007166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007168:	6028      	str	r0, [r5, #0]
 800716a:	6069      	str	r1, [r5, #4]
 800716c:	60aa      	str	r2, [r5, #8]
 800716e:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8007170:	4b10      	ldr	r3, [pc, #64]	; (80071b4 <Add_HWServW2ST_Service+0x1a0>)
 8007172:	8818      	ldrh	r0, [r3, #0]
 8007174:	4b12      	ldr	r3, [pc, #72]	; (80071c0 <Add_HWServW2ST_Service+0x1ac>)
 8007176:	9305      	str	r3, [sp, #20]
 8007178:	2300      	movs	r3, #0
 800717a:	9304      	str	r3, [sp, #16]
 800717c:	2310      	movs	r3, #16
 800717e:	9303      	str	r3, [sp, #12]
 8007180:	2304      	movs	r3, #4
 8007182:	9302      	str	r3, [sp, #8]
 8007184:	2300      	movs	r3, #0
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	2310      	movs	r3, #16
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	2314      	movs	r3, #20
 800718e:	4a0a      	ldr	r2, [pc, #40]	; (80071b8 <Add_HWServW2ST_Service+0x1a4>)
 8007190:	2102      	movs	r1, #2
 8007192:	f7fe f838 	bl	8005206 <aci_gatt_add_char>
 8007196:	4603      	mov	r3, r0
 8007198:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2, 
                           CHAR_PROP_NOTIFY, 
                           ATTR_PERMISSION_NONE, 
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS) 
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <Add_HWServW2ST_Service+0x190>
    return BLE_STATUS_ERROR;
 80071a0:	2347      	movs	r3, #71	; 0x47
 80071a2:	e000      	b.n	80071a6 <Add_HWServW2ST_Service+0x192>
  
  return BLE_STATUS_SUCCESS;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bdb0      	pop	{r4, r5, r7, pc}
 80071ae:	bf00      	nop
 80071b0:	200005a0 	.word	0x200005a0
 80071b4:	2000059a 	.word	0x2000059a
 80071b8:	20000588 	.word	0x20000588
 80071bc:	20000584 	.word	0x20000584
 80071c0:	2000059c 	.word	0x2000059c

080071c4 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80071c4:	b5b0      	push	{r4, r5, r7, lr}
 80071c6:	b08c      	sub	sp, #48	; 0x30
 80071c8:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 80071ca:	2301      	movs	r3, #1
 80071cc:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80071ce:	231b      	movs	r3, #27
 80071d0:	703b      	strb	r3, [r7, #0]
 80071d2:	23c5      	movs	r3, #197	; 0xc5
 80071d4:	707b      	strb	r3, [r7, #1]
 80071d6:	23d5      	movs	r3, #213	; 0xd5
 80071d8:	70bb      	strb	r3, [r7, #2]
 80071da:	23a5      	movs	r3, #165	; 0xa5
 80071dc:	70fb      	strb	r3, [r7, #3]
 80071de:	2302      	movs	r3, #2
 80071e0:	713b      	strb	r3, [r7, #4]
 80071e2:	2300      	movs	r3, #0
 80071e4:	717b      	strb	r3, [r7, #5]
 80071e6:	23b4      	movs	r3, #180	; 0xb4
 80071e8:	71bb      	strb	r3, [r7, #6]
 80071ea:	239a      	movs	r3, #154	; 0x9a
 80071ec:	71fb      	strb	r3, [r7, #7]
 80071ee:	23e1      	movs	r3, #225	; 0xe1
 80071f0:	723b      	strb	r3, [r7, #8]
 80071f2:	2311      	movs	r3, #17
 80071f4:	727b      	strb	r3, [r7, #9]
 80071f6:	2302      	movs	r3, #2
 80071f8:	72bb      	strb	r3, [r7, #10]
 80071fa:	2300      	movs	r3, #0
 80071fc:	72fb      	strb	r3, [r7, #11]
 80071fe:	2300      	movs	r3, #0
 8007200:	733b      	strb	r3, [r7, #12]
 8007202:	2300      	movs	r3, #0
 8007204:	737b      	strb	r3, [r7, #13]
 8007206:	2300      	movs	r3, #0
 8007208:	73bb      	strb	r3, [r7, #14]
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800720e:	4b33      	ldr	r3, [pc, #204]	; (80072dc <Add_SWServW2ST_Service+0x118>)
 8007210:	461d      	mov	r5, r3
 8007212:	463c      	mov	r4, r7
 8007214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007216:	6028      	str	r0, [r5, #0]
 8007218:	6069      	str	r1, [r5, #4]
 800721a:	60aa      	str	r2, [r5, #8]
 800721c:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	461a      	mov	r2, r3
 8007224:	0052      	lsls	r2, r2, #1
 8007226:	4413      	add	r3, r2
 8007228:	b2db      	uxtb	r3, r3
 800722a:	3301      	adds	r3, #1
 800722c:	b2da      	uxtb	r2, r3
 800722e:	4b2c      	ldr	r3, [pc, #176]	; (80072e0 <Add_SWServW2ST_Service+0x11c>)
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	4613      	mov	r3, r2
 8007234:	2201      	movs	r2, #1
 8007236:	4929      	ldr	r1, [pc, #164]	; (80072dc <Add_SWServW2ST_Service+0x118>)
 8007238:	2002      	movs	r0, #2
 800723a:	f7fd ff58 	bl	80050ee <aci_gatt_add_serv>
 800723e:	4603      	mov	r3, r0
 8007240:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8007242:	7cfb      	ldrb	r3, [r7, #19]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d141      	bne.n	80072cc <Add_SWServW2ST_Service+0x108>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8007248:	231b      	movs	r3, #27
 800724a:	703b      	strb	r3, [r7, #0]
 800724c:	23c5      	movs	r3, #197	; 0xc5
 800724e:	707b      	strb	r3, [r7, #1]
 8007250:	23d5      	movs	r3, #213	; 0xd5
 8007252:	70bb      	strb	r3, [r7, #2]
 8007254:	23a5      	movs	r3, #165	; 0xa5
 8007256:	70fb      	strb	r3, [r7, #3]
 8007258:	2302      	movs	r3, #2
 800725a:	713b      	strb	r3, [r7, #4]
 800725c:	2300      	movs	r3, #0
 800725e:	717b      	strb	r3, [r7, #5]
 8007260:	2336      	movs	r3, #54	; 0x36
 8007262:	71bb      	strb	r3, [r7, #6]
 8007264:	23ac      	movs	r3, #172	; 0xac
 8007266:	71fb      	strb	r3, [r7, #7]
 8007268:	23e1      	movs	r3, #225	; 0xe1
 800726a:	723b      	strb	r3, [r7, #8]
 800726c:	2311      	movs	r3, #17
 800726e:	727b      	strb	r3, [r7, #9]
 8007270:	2301      	movs	r3, #1
 8007272:	72bb      	strb	r3, [r7, #10]
 8007274:	2300      	movs	r3, #0
 8007276:	72fb      	strb	r3, [r7, #11]
 8007278:	2300      	movs	r3, #0
 800727a:	733b      	strb	r3, [r7, #12]
 800727c:	2301      	movs	r3, #1
 800727e:	737b      	strb	r3, [r7, #13]
 8007280:	2300      	movs	r3, #0
 8007282:	73bb      	strb	r3, [r7, #14]
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8007288:	4b16      	ldr	r3, [pc, #88]	; (80072e4 <Add_SWServW2ST_Service+0x120>)
 800728a:	461d      	mov	r5, r3
 800728c:	463c      	mov	r4, r7
 800728e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007290:	6028      	str	r0, [r5, #0]
 8007292:	6069      	str	r1, [r5, #4]
 8007294:	60aa      	str	r2, [r5, #8]
 8007296:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8007298:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <Add_SWServW2ST_Service+0x11c>)
 800729a:	8818      	ldrh	r0, [r3, #0]
 800729c:	4b12      	ldr	r3, [pc, #72]	; (80072e8 <Add_SWServW2ST_Service+0x124>)
 800729e:	9305      	str	r3, [sp, #20]
 80072a0:	2300      	movs	r3, #0
 80072a2:	9304      	str	r3, [sp, #16]
 80072a4:	2310      	movs	r3, #16
 80072a6:	9303      	str	r3, [sp, #12]
 80072a8:	2304      	movs	r3, #4
 80072aa:	9302      	str	r3, [sp, #8]
 80072ac:	2300      	movs	r3, #0
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	2310      	movs	r3, #16
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	2308      	movs	r3, #8
 80072b6:	4a0b      	ldr	r2, [pc, #44]	; (80072e4 <Add_SWServW2ST_Service+0x120>)
 80072b8:	2102      	movs	r1, #2
 80072ba:	f7fd ffa4 	bl	8005206 <aci_gatt_add_char>
 80072be:	4603      	mov	r3, r0
 80072c0:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80072c2:	7cfb      	ldrb	r3, [r7, #19]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d103      	bne.n	80072d0 <Add_SWServW2ST_Service+0x10c>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 80072c8:	2300      	movs	r3, #0
 80072ca:	e003      	b.n	80072d4 <Add_SWServW2ST_Service+0x110>
    goto fail;
 80072cc:	bf00      	nop
 80072ce:	e000      	b.n	80072d2 <Add_SWServW2ST_Service+0x10e>
    goto fail;
 80072d0:	bf00      	nop

fail:  
  return BLE_STATUS_ERROR;
 80072d2:	2347      	movs	r3, #71	; 0x47
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bdb0      	pop	{r4, r5, r7, pc}
 80072dc:	200005a0 	.word	0x200005a0
 80072e0:	20000598 	.word	0x20000598
 80072e4:	20000588 	.word	0x20000588
 80072e8:	20000586 	.word	0x20000586

080072ec <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{  
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08c      	sub	sp, #48	; 0x30
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;
  
  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80072f8:	f7f9 fd76 	bl	8000de8 <HAL_GetTick>
 80072fc:	4603      	mov	r3, r0
 80072fe:	08db      	lsrs	r3, r3, #3
 8007300:	b2db      	uxtb	r3, r3
 8007302:	743b      	strb	r3, [r7, #16]
 8007304:	f7f9 fd70 	bl	8000de8 <HAL_GetTick>
 8007308:	4603      	mov	r3, r0
 800730a:	0adb      	lsrs	r3, r3, #11
 800730c:	b2db      	uxtb	r3, r3
 800730e:	747b      	strb	r3, [r7, #17]
  
  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	425b      	negs	r3, r3
 8007318:	b2db      	uxtb	r3, r3
 800731a:	74bb      	strb	r3, [r7, #18]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	425b      	negs	r3, r3
 8007322:	121b      	asrs	r3, r3, #8
 8007324:	b2db      	uxtb	r3, r3
 8007326:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	753b      	strb	r3, [r7, #20]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	121b      	asrs	r3, r3, #8
 8007336:	b2db      	uxtb	r3, r3
 8007338:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	425b      	negs	r3, r3
 8007342:	b2db      	uxtb	r3, r3
 8007344:	75bb      	strb	r3, [r7, #22]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	425b      	negs	r3, r3
 800734c:	121b      	asrs	r3, r3, #8
 800734e:	b2db      	uxtb	r3, r3
 8007350:	75fb      	strb	r3, [r7, #23]
    
  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	763b      	strb	r3, [r7, #24]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	121b      	asrs	r3, r3, #8
 8007360:	b2db      	uxtb	r3, r3
 8007362:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	76bb      	strb	r3, [r7, #26]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	121b      	asrs	r3, r3, #8
 8007372:	b2db      	uxtb	r3, r3
 8007374:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	773b      	strb	r3, [r7, #28]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	121b      	asrs	r3, r3, #8
 8007384:	b2db      	uxtb	r3, r3
 8007386:	777b      	strb	r3, [r7, #29]
  
  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	77bb      	strb	r3, [r7, #30]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	121b      	asrs	r3, r3, #8
 8007396:	b2db      	uxtb	r3, r3
 8007398:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f887 3020 	strb.w	r3, [r7, #32]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	121b      	asrs	r3, r3, #8
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	121b      	asrs	r3, r3, #8
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 80073c6:	4b0f      	ldr	r3, [pc, #60]	; (8007404 <Acc_Update+0x118>)
 80073c8:	8818      	ldrh	r0, [r3, #0]
 80073ca:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <Acc_Update+0x11c>)
 80073cc:	8819      	ldrh	r1, [r3, #0]
 80073ce:	f107 0310 	add.w	r3, r7, #16
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	2314      	movs	r3, #20
 80073d6:	2200      	movs	r2, #0
 80073d8:	f7fd ffe7 	bl	80053aa <aci_gatt_update_char_value>
 80073dc:	4603      	mov	r3, r0
 80073de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80073e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d007      	beq.n	80073fa <Acc_Update+0x10e>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
 80073ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ee:	4619      	mov	r1, r3
 80073f0:	4806      	ldr	r0, [pc, #24]	; (800740c <Acc_Update+0x120>)
 80073f2:	f001 f8df 	bl	80085b4 <iprintf>
    return BLE_STATUS_ERROR ;
 80073f6:	2347      	movs	r3, #71	; 0x47
 80073f8:	e000      	b.n	80073fc <Acc_Update+0x110>
  }

  return BLE_STATUS_SUCCESS;  
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3728      	adds	r7, #40	; 0x28
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	2000059a 	.word	0x2000059a
 8007408:	2000059c 	.word	0x2000059c
 800740c:	080097e8 	.word	0x080097e8

08007410 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af02      	add	r7, sp, #8
 8007416:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8007418:	f7f9 fce6 	bl	8000de8 <HAL_GetTick>
 800741c:	4603      	mov	r3, r0
 800741e:	08db      	lsrs	r3, r3, #3
 8007420:	b2db      	uxtb	r3, r3
 8007422:	733b      	strb	r3, [r7, #12]
 8007424:	f7f9 fce0 	bl	8000de8 <HAL_GetTick>
 8007428:	4603      	mov	r3, r0
 800742a:	0adb      	lsrs	r3, r3, #11
 800742c:	b2db      	uxtb	r3, r3
 800742e:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	b2db      	uxtb	r3, r3
 8007436:	73bb      	strb	r3, [r7, #14]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	121b      	asrs	r3, r3, #8
 800743e:	b2db      	uxtb	r3, r3
 8007440:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	743b      	strb	r3, [r7, #16]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	121b      	asrs	r3, r3, #8
 8007450:	b2db      	uxtb	r3, r3
 8007452:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	74bb      	strb	r3, [r7, #18]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	121b      	asrs	r3, r3, #8
 8007462:	b2db      	uxtb	r3, r3
 8007464:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif
  
  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8007466:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <Quat_Update+0x90>)
 8007468:	8818      	ldrh	r0, [r3, #0]
 800746a:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <Quat_Update+0x94>)
 800746c:	8819      	ldrh	r1, [r3, #0]
 800746e:	f107 030c 	add.w	r3, r7, #12
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	2308      	movs	r3, #8
 8007476:	2200      	movs	r2, #0
 8007478:	f7fd ff97 	bl	80053aa <aci_gatt_update_char_value>
 800747c:	4603      	mov	r3, r0
 800747e:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d006      	beq.n	8007494 <Quat_Update+0x84>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	4619      	mov	r1, r3
 800748a:	4807      	ldr	r0, [pc, #28]	; (80074a8 <Quat_Update+0x98>)
 800748c:	f001 f892 	bl	80085b4 <iprintf>
    return BLE_STATUS_ERROR ;
 8007490:	2347      	movs	r3, #71	; 0x47
 8007492:	e000      	b.n	8007496 <Quat_Update+0x86>
  }
  
  return BLE_STATUS_SUCCESS;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20000598 	.word	0x20000598
 80074a4:	20000586 	.word	0x20000586
 80074a8:	08009824 	.word	0x08009824

080074ac <Read_Request_CB>:
* Description    : Update the sensor valuse.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 80074ac:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80074b0:	b086      	sub	sp, #24
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	4603      	mov	r3, r0
 80074b6:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;
  
  if(handle == AccGyroMagCharHandle + 1)
 80074b8:	88fa      	ldrh	r2, [r7, #6]
 80074ba:	4b57      	ldr	r3, [pc, #348]	; (8007618 <Read_Request_CB+0x16c>)
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	3301      	adds	r3, #1
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d105      	bne.n	80074d0 <Read_Request_CB+0x24>
  {    
    Acc_Update(&x_axes, &g_axes, &m_axes);
 80074c4:	4a55      	ldr	r2, [pc, #340]	; (800761c <Read_Request_CB+0x170>)
 80074c6:	4956      	ldr	r1, [pc, #344]	; (8007620 <Read_Request_CB+0x174>)
 80074c8:	4856      	ldr	r0, [pc, #344]	; (8007624 <Read_Request_CB+0x178>)
 80074ca:	f7ff ff0f 	bl	80072ec <Acc_Update>
 80074ce:	e08b      	b.n	80075e8 <Read_Request_CB+0x13c>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 80074d0:	88fa      	ldrh	r2, [r7, #6]
 80074d2:	4b55      	ldr	r3, [pc, #340]	; (8007628 <Read_Request_CB+0x17c>)
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	3301      	adds	r3, #1
 80074d8:	429a      	cmp	r2, r3
 80074da:	f040 8085 	bne.w	80075e8 <Read_Request_CB+0x13c>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation        
 80074de:	f001 f91d 	bl	800871c <rand>
 80074e2:	4603      	mov	r3, r0
 80074e4:	461d      	mov	r5, r3
 80074e6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80074ea:	4629      	mov	r1, r5
 80074ec:	4632      	mov	r2, r6
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	f04f 0400 	mov.w	r4, #0
 80074f6:	0094      	lsls	r4, r2, #2
 80074f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074fc:	008b      	lsls	r3, r1, #2
 80074fe:	4619      	mov	r1, r3
 8007500:	4622      	mov	r2, r4
 8007502:	194b      	adds	r3, r1, r5
 8007504:	eb42 0406 	adc.w	r4, r2, r6
 8007508:	4618      	mov	r0, r3
 800750a:	4621      	mov	r1, r4
 800750c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	f7f9 f8a4 	bl	8000660 <__aeabi_uldivmod>
 8007518:	4603      	mov	r3, r0
 800751a:	460c      	mov	r4, r1
 800751c:	4618      	mov	r0, r3
 800751e:	4621      	mov	r1, r4
 8007520:	f7f9 f818 	bl	8000554 <__aeabi_ul2d>
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	4b40      	ldr	r3, [pc, #256]	; (800762c <Read_Request_CB+0x180>)
 800752a:	f7f8 fe93 	bl	8000254 <__adddf3>
 800752e:	4603      	mov	r3, r0
 8007530:	460c      	mov	r4, r1
 8007532:	4618      	mov	r0, r3
 8007534:	4621      	mov	r1, r4
 8007536:	f7f9 f843 	bl	80005c0 <__aeabi_d2f>
 800753a:	4603      	mov	r3, r0
 800753c:	617b      	str	r3, [r7, #20]
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 800753e:	f001 f8ed 	bl	800871c <rand>
 8007542:	4603      	mov	r3, r0
 8007544:	461d      	mov	r5, r3
 8007546:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800754a:	46ab      	mov	fp, r5
 800754c:	46b4      	mov	ip, r6
 800754e:	eb1b 030b 	adds.w	r3, fp, fp
 8007552:	eb4c 040c 	adc.w	r4, ip, ip
 8007556:	469b      	mov	fp, r3
 8007558:	46a4      	mov	ip, r4
 800755a:	eb1b 0b05 	adds.w	fp, fp, r5
 800755e:	eb4c 0c06 	adc.w	ip, ip, r6
 8007562:	f04f 0100 	mov.w	r1, #0
 8007566:	f04f 0200 	mov.w	r2, #0
 800756a:	ea4f 124c 	mov.w	r2, ip, lsl #5
 800756e:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 8007572:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8007576:	eb1b 0b01 	adds.w	fp, fp, r1
 800757a:	eb4c 0c02 	adc.w	ip, ip, r2
 800757e:	eb1b 0005 	adds.w	r0, fp, r5
 8007582:	eb4c 0106 	adc.w	r1, ip, r6
 8007586:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	f7f9 f867 	bl	8000660 <__aeabi_uldivmod>
 8007592:	4603      	mov	r3, r0
 8007594:	460c      	mov	r4, r1
 8007596:	4618      	mov	r0, r3
 8007598:	4621      	mov	r1, r4
 800759a:	f7f8 ffdb 	bl	8000554 <__aeabi_ul2d>
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	4b23      	ldr	r3, [pc, #140]	; (8007630 <Read_Request_CB+0x184>)
 80075a4:	f7f8 fe56 	bl	8000254 <__adddf3>
 80075a8:	4603      	mov	r3, r0
 80075aa:	460c      	mov	r4, r1
 80075ac:	4618      	mov	r0, r3
 80075ae:	4621      	mov	r1, r4
 80075b0:	f7f9 f806 	bl	80005c0 <__aeabi_d2f>
 80075b4:	4603      	mov	r3, r0
 80075b6:	613b      	str	r3, [r7, #16]
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 80075b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80075bc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007634 <Read_Request_CB+0x188>
 80075c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075c4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80075c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80075cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80075d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075d8:	ee17 3a90 	vmov	r3, s15
 80075dc:	b21b      	sxth	r3, r3
 80075de:	4619      	mov	r1, r3
 80075e0:	ee16 0a90 	vmov	r0, s13
 80075e4:	f000 f82c 	bl	8007640 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 80075e8:	4b13      	ldr	r3, [pc, #76]	; (8007638 <Read_Request_CB+0x18c>)
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00e      	beq.n	800760e <Read_Request_CB+0x162>
  { 
    ret = aci_gatt_allow_read(connection_handle);
 80075f0:	4b11      	ldr	r3, [pc, #68]	; (8007638 <Read_Request_CB+0x18c>)
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fd ff6b 	bl	80054d0 <aci_gatt_allow_read>
 80075fa:	4603      	mov	r3, r0
 80075fc:	73fb      	strb	r3, [r7, #15]
    if (ret != BLE_STATUS_SUCCESS)
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d004      	beq.n	800760e <Read_Request_CB+0x162>
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret); 
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	4619      	mov	r1, r3
 8007608:	480c      	ldr	r0, [pc, #48]	; (800763c <Read_Request_CB+0x190>)
 800760a:	f000 ffd3 	bl	80085b4 <iprintf>
    }
  }
}
 800760e:	bf00      	nop
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8007618:	2000059c 	.word	0x2000059c
 800761c:	200004b4 	.word	0x200004b4
 8007620:	200004a8 	.word	0x200004a8
 8007624:	2000049c 	.word	0x2000049c
 8007628:	20000584 	.word	0x20000584
 800762c:	403b0000 	.word	0x403b0000
 8007630:	408f4000 	.word	0x408f4000
 8007634:	42c80000 	.word	0x42c80000
 8007638:	20000494 	.word	0x20000494
 800763c:	08009860 	.word	0x08009860

08007640 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{  
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af02      	add	r7, sp, #8
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 800764c:	f7f9 fbcc 	bl	8000de8 <HAL_GetTick>
 8007650:	4603      	mov	r3, r0
 8007652:	08db      	lsrs	r3, r3, #3
 8007654:	b2db      	uxtb	r3, r3
 8007656:	733b      	strb	r3, [r7, #12]
 8007658:	f7f9 fbc6 	bl	8000de8 <HAL_GetTick>
 800765c:	4603      	mov	r3, r0
 800765e:	0adb      	lsrs	r3, r3, #11
 8007660:	b2db      	uxtb	r3, r3
 8007662:	737b      	strb	r3, [r7, #13]
  
  HOST_TO_LE_32(buff+2,press);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	b2db      	uxtb	r3, r3
 8007668:	73bb      	strb	r3, [r7, #14]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	121b      	asrs	r3, r3, #8
 800766e:	b2db      	uxtb	r3, r3
 8007670:	73fb      	strb	r3, [r7, #15]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	141b      	asrs	r3, r3, #16
 8007676:	b2db      	uxtb	r3, r3
 8007678:	743b      	strb	r3, [r7, #16]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	161b      	asrs	r3, r3, #24
 800767e:	b2db      	uxtb	r3, r3
 8007680:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8007682:	887b      	ldrh	r3, [r7, #2]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	74bb      	strb	r3, [r7, #18]
 8007688:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800768c:	121b      	asrs	r3, r3, #8
 800768e:	b21b      	sxth	r3, r3
 8007690:	b2db      	uxtb	r3, r3
 8007692:	74fb      	strb	r3, [r7, #19]
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 8007694:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <BlueMS_Environmental_Update+0x8c>)
 8007696:	8818      	ldrh	r0, [r3, #0]
 8007698:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <BlueMS_Environmental_Update+0x90>)
 800769a:	8819      	ldrh	r1, [r3, #0]
 800769c:	f107 030c 	add.w	r3, r7, #12
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	2308      	movs	r3, #8
 80076a4:	2200      	movs	r2, #0
 80076a6:	f7fd fe80 	bl	80053aa <aci_gatt_update_char_value>
 80076aa:	4603      	mov	r3, r0
 80076ac:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);
  
  if (ret != BLE_STATUS_SUCCESS){
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d006      	beq.n	80076c2 <BlueMS_Environmental_Update+0x82>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	4619      	mov	r1, r3
 80076b8:	4806      	ldr	r0, [pc, #24]	; (80076d4 <BlueMS_Environmental_Update+0x94>)
 80076ba:	f000 ff7b 	bl	80085b4 <iprintf>
    return BLE_STATUS_ERROR ;
 80076be:	2347      	movs	r3, #71	; 0x47
 80076c0:	e000      	b.n	80076c4 <BlueMS_Environmental_Update+0x84>
  }
  
  return BLE_STATUS_SUCCESS;	
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	2000059a 	.word	0x2000059a
 80076d0:	20000584 	.word	0x20000584
 80076d4:	08009888 	.word	0x08009888

080076d8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076e0:	4b1d      	ldr	r3, [pc, #116]	; (8007758 <HCI_TL_SPI_Init+0x80>)
 80076e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e4:	4a1c      	ldr	r2, [pc, #112]	; (8007758 <HCI_TL_SPI_Init+0x80>)
 80076e6:	f043 0301 	orr.w	r3, r3, #1
 80076ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076ec:	4b1a      	ldr	r3, [pc, #104]	; (8007758 <HCI_TL_SPI_Init+0x80>)
 80076ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	60bb      	str	r3, [r7, #8]
 80076f6:	68bb      	ldr	r3, [r7, #8]
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80076f8:	2308      	movs	r3, #8
 80076fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80076fc:	4b17      	ldr	r3, [pc, #92]	; (800775c <HCI_TL_SPI_Init+0x84>)
 80076fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8007704:	f107 030c 	add.w	r3, r7, #12
 8007708:	4619      	mov	r1, r3
 800770a:	4815      	ldr	r0, [pc, #84]	; (8007760 <HCI_TL_SPI_Init+0x88>)
 800770c:	f7f9 fd4e 	bl	80011ac <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8007710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007716:	2301      	movs	r3, #1
 8007718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800771e:	2300      	movs	r3, #0
 8007720:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8007722:	f107 030c 	add.w	r3, r7, #12
 8007726:	4619      	mov	r1, r3
 8007728:	480e      	ldr	r0, [pc, #56]	; (8007764 <HCI_TL_SPI_Init+0x8c>)
 800772a:	f7f9 fd3f 	bl	80011ac <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800772e:	2304      	movs	r3, #4
 8007730:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007732:	2301      	movs	r3, #1
 8007734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800773a:	2300      	movs	r3, #0
 800773c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800773e:	f107 030c 	add.w	r3, r7, #12
 8007742:	4619      	mov	r1, r3
 8007744:	4806      	ldr	r0, [pc, #24]	; (8007760 <HCI_TL_SPI_Init+0x88>)
 8007746:	f7f9 fd31 	bl	80011ac <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 800774a:	f000 fca3 	bl	8008094 <BSP_SPI1_Init>
 800774e:	4603      	mov	r3, r0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	40021000 	.word	0x40021000
 800775c:	10110000 	.word	0x10110000
 8007760:	42020000 	.word	0x42020000
 8007764:	42021400 	.word	0x42021400

08007768 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 800776c:	2108      	movs	r1, #8
 800776e:	4807      	ldr	r0, [pc, #28]	; (800778c <HCI_TL_SPI_DeInit+0x24>)
 8007770:	f7f9 fe9c 	bl	80014ac <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8007774:	2104      	movs	r1, #4
 8007776:	4805      	ldr	r0, [pc, #20]	; (800778c <HCI_TL_SPI_DeInit+0x24>)
 8007778:	f7f9 fe98 	bl	80014ac <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800777c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007780:	4803      	ldr	r0, [pc, #12]	; (8007790 <HCI_TL_SPI_DeInit+0x28>)
 8007782:	f7f9 fe93 	bl	80014ac <HAL_GPIO_DeInit>
  return 0;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	bd80      	pop	{r7, pc}
 800778c:	42020000 	.word	0x42020000
 8007790:	42021400 	.word	0x42021400

08007794 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8007798:	2200      	movs	r2, #0
 800779a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800779e:	4809      	ldr	r0, [pc, #36]	; (80077c4 <HCI_TL_SPI_Reset+0x30>)
 80077a0:	f7f9 ff8a 	bl	80016b8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80077a4:	2005      	movs	r0, #5
 80077a6:	f7f9 fb2b 	bl	8000e00 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80077aa:	2201      	movs	r2, #1
 80077ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80077b0:	4804      	ldr	r0, [pc, #16]	; (80077c4 <HCI_TL_SPI_Reset+0x30>)
 80077b2:	f7f9 ff81 	bl	80016b8 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80077b6:	2005      	movs	r0, #5
 80077b8:	f7f9 fb22 	bl	8000e00 <HAL_Delay>
  return 0;
 80077bc:	2300      	movs	r3, #0
}  
 80077be:	4618      	mov	r0, r3
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	42021400 	.word	0x42021400

080077c8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80077d8:	23ff      	movs	r3, #255	; 0xff
 80077da:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80077dc:	230b      	movs	r3, #11
 80077de:	743b      	strb	r3, [r7, #16]
 80077e0:	2300      	movs	r3, #0
 80077e2:	747b      	strb	r3, [r7, #17]
 80077e4:	2300      	movs	r3, #0
 80077e6:	74bb      	strb	r3, [r7, #18]
 80077e8:	2300      	movs	r3, #0
 80077ea:	74fb      	strb	r3, [r7, #19]
 80077ec:	2300      	movs	r3, #0
 80077ee:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80077f0:	2200      	movs	r2, #0
 80077f2:	2104      	movs	r1, #4
 80077f4:	482d      	ldr	r0, [pc, #180]	; (80078ac <HCI_TL_SPI_Receive+0xe4>)
 80077f6:	f7f9 ff5f 	bl	80016b8 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80077fa:	f107 0108 	add.w	r1, r7, #8
 80077fe:	f107 0310 	add.w	r3, r7, #16
 8007802:	2205      	movs	r2, #5
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fc75 	bl	80080f4 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 800780a:	7a3b      	ldrb	r3, [r7, #8]
 800780c:	2b02      	cmp	r3, #2
 800780e:	d129      	bne.n	8007864 <HCI_TL_SPI_Receive+0x9c>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8007810:	7b3b      	ldrb	r3, [r7, #12]
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	b21a      	sxth	r2, r3
 8007816:	7afb      	ldrb	r3, [r7, #11]
 8007818:	b21b      	sxth	r3, r3
 800781a:	4313      	orrs	r3, r2
 800781c:	b21b      	sxth	r3, r3
 800781e:	83fb      	strh	r3, [r7, #30]
  
    if(byte_count > 0) {
 8007820:	8bfb      	ldrh	r3, [r7, #30]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d01e      	beq.n	8007864 <HCI_TL_SPI_Receive+0x9c>
  
      /* avoid to read more data that size of the buffer */

      if (byte_count > size){
 8007826:	8bfa      	ldrh	r2, [r7, #30]
 8007828:	887b      	ldrh	r3, [r7, #2]
 800782a:	429a      	cmp	r2, r3
 800782c:	d901      	bls.n	8007832 <HCI_TL_SPI_Receive+0x6a>
        byte_count = size;
 800782e:	887b      	ldrh	r3, [r7, #2]
 8007830:	83fb      	strh	r3, [r7, #30]
      }        
  
      for(len = 0; len < byte_count; len++)
 8007832:	2300      	movs	r3, #0
 8007834:	777b      	strb	r3, [r7, #29]
 8007836:	e010      	b.n	800785a <HCI_TL_SPI_Receive+0x92>
      {                                               
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8007838:	f107 0116 	add.w	r1, r7, #22
 800783c:	f107 0317 	add.w	r3, r7, #23
 8007840:	2201      	movs	r2, #1
 8007842:	4618      	mov	r0, r3
 8007844:	f000 fc56 	bl	80080f4 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8007848:	7f7b      	ldrb	r3, [r7, #29]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	4413      	add	r3, r2
 800784e:	7dba      	ldrb	r2, [r7, #22]
 8007850:	b2d2      	uxtb	r2, r2
 8007852:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8007854:	7f7b      	ldrb	r3, [r7, #29]
 8007856:	3301      	adds	r3, #1
 8007858:	777b      	strb	r3, [r7, #29]
 800785a:	7f7b      	ldrb	r3, [r7, #29]
 800785c:	b29b      	uxth	r3, r3
 800785e:	8bfa      	ldrh	r2, [r7, #30]
 8007860:	429a      	cmp	r2, r3
 8007862:	d8e9      	bhi.n	8007838 <HCI_TL_SPI_Receive+0x70>
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8007864:	2201      	movs	r2, #1
 8007866:	2104      	movs	r1, #4
 8007868:	4810      	ldr	r0, [pc, #64]	; (80078ac <HCI_TL_SPI_Receive+0xe4>)
 800786a:	f7f9 ff25 	bl	80016b8 <HAL_GPIO_WritePin>
  
#if PRINT_CSV_FORMAT
  if (len > 0) {
 800786e:	7f7b      	ldrb	r3, [r7, #29]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d016      	beq.n	80078a2 <HCI_TL_SPI_Receive+0xda>
    print_csv_time();
 8007874:	f7fe fb60 	bl	8005f38 <print_csv_time>
    for (int i=0; i<len; i++) {
 8007878:	2300      	movs	r3, #0
 800787a:	61bb      	str	r3, [r7, #24]
 800787c:	e00a      	b.n	8007894 <HCI_TL_SPI_Receive+0xcc>
      PRINT_CSV(" %02x", buffer[i]);
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	4413      	add	r3, r2
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	4619      	mov	r1, r3
 8007888:	4809      	ldr	r0, [pc, #36]	; (80078b0 <HCI_TL_SPI_Receive+0xe8>)
 800788a:	f000 fe93 	bl	80085b4 <iprintf>
    for (int i=0; i<len; i++) {
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	3301      	adds	r3, #1
 8007892:	61bb      	str	r3, [r7, #24]
 8007894:	7f7b      	ldrb	r3, [r7, #29]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	429a      	cmp	r2, r3
 800789a:	dbf0      	blt.n	800787e <HCI_TL_SPI_Receive+0xb6>
    }
    PRINT_CSV("\n");
 800789c:	200a      	movs	r0, #10
 800789e:	f000 fea1 	bl	80085e4 <putchar>
  }
#endif
  
  return len;  
 80078a2:	7f7b      	ldrb	r3, [r7, #29]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3720      	adds	r7, #32
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	42020000 	.word	0x42020000
 80078b0:	080098bc 	.word	0x080098bc

080078b4 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	807b      	strh	r3, [r7, #2]
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80078c0:	230a      	movs	r3, #10
 80078c2:	743b      	strb	r3, [r7, #16]
 80078c4:	2300      	movs	r3, #0
 80078c6:	747b      	strb	r3, [r7, #17]
 80078c8:	2300      	movs	r3, #0
 80078ca:	74bb      	strb	r3, [r7, #18]
 80078cc:	2300      	movs	r3, #0
 80078ce:	74fb      	strb	r3, [r7, #19]
 80078d0:	2300      	movs	r3, #0
 80078d2:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80078d4:	f7f9 fa88 	bl	8000de8 <HAL_GetTick>
 80078d8:	61b8      	str	r0, [r7, #24]
  
  do
  {
    result = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80078de:	2200      	movs	r2, #0
 80078e0:	2104      	movs	r1, #4
 80078e2:	481c      	ldr	r0, [pc, #112]	; (8007954 <HCI_TL_SPI_Send+0xa0>)
 80078e4:	f7f9 fee8 	bl	80016b8 <HAL_GPIO_WritePin>
    
    /* Read header */  
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80078e8:	f107 0108 	add.w	r1, r7, #8
 80078ec:	f107 0310 	add.w	r3, r7, #16
 80078f0:	2205      	movs	r2, #5
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 fbfe 	bl	80080f4 <BSP_SPI1_SendRecv>
    
    if(header_slave[0] == 0x02) 
 80078f8:	7a3b      	ldrb	r3, [r7, #8]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d10f      	bne.n	800791e <HCI_TL_SPI_Send+0x6a>
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 80078fe:	7a7b      	ldrb	r3, [r7, #9]
 8007900:	b29b      	uxth	r3, r3
 8007902:	887a      	ldrh	r2, [r7, #2]
 8007904:	429a      	cmp	r2, r3
 8007906:	d806      	bhi.n	8007916 <HCI_TL_SPI_Send+0x62>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8007908:	887b      	ldrh	r3, [r7, #2]
 800790a:	461a      	mov	r2, r3
 800790c:	4912      	ldr	r1, [pc, #72]	; (8007958 <HCI_TL_SPI_Send+0xa4>)
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fbf0 	bl	80080f4 <BSP_SPI1_SendRecv>
 8007914:	e006      	b.n	8007924 <HCI_TL_SPI_Send+0x70>
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 8007916:	f06f 0301 	mvn.w	r3, #1
 800791a:	61fb      	str	r3, [r7, #28]
 800791c:	e002      	b.n	8007924 <HCI_TL_SPI_Send+0x70>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 800791e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007922:	61fb      	str	r3, [r7, #28]
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8007924:	2201      	movs	r2, #1
 8007926:	2104      	movs	r1, #4
 8007928:	480a      	ldr	r0, [pc, #40]	; (8007954 <HCI_TL_SPI_Send+0xa0>)
 800792a:	f7f9 fec5 	bl	80016b8 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800792e:	f7f9 fa5b 	bl	8000de8 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b0f      	cmp	r3, #15
 800793a:	d903      	bls.n	8007944 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 800793c:	f06f 0302 	mvn.w	r3, #2
 8007940:	61fb      	str	r3, [r7, #28]
      break;
 8007942:	e002      	b.n	800794a <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	2b00      	cmp	r3, #0
 8007948:	dbc7      	blt.n	80078da <HCI_TL_SPI_Send+0x26>
  
  return result;
 800794a:	69fb      	ldr	r3, [r7, #28]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3720      	adds	r7, #32
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	42020000 	.word	0x42020000
 8007958:	20000394 	.word	0x20000394

0800795c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8007960:	2108      	movs	r1, #8
 8007962:	4805      	ldr	r0, [pc, #20]	; (8007978 <IsDataAvailable+0x1c>)
 8007964:	f7f9 fe90 	bl	8001688 <HAL_GPIO_ReadPin>
 8007968:	4603      	mov	r3, r0
 800796a:	2b01      	cmp	r3, #1
 800796c:	bf0c      	ite	eq
 800796e:	2301      	moveq	r3, #1
 8007970:	2300      	movne	r3, #0
 8007972:	b2db      	uxtb	r3, r3
} 
 8007974:	4618      	mov	r0, r3
 8007976:	bd80      	pop	{r7, pc}
 8007978:	42020000 	.word	0x42020000

0800797c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b088      	sub	sp, #32
 8007980:	af00      	add	r7, sp, #0
  
  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8007982:	4b12      	ldr	r3, [pc, #72]	; (80079cc <hci_tl_lowlevel_init+0x50>)
 8007984:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8007986:	4b12      	ldr	r3, [pc, #72]	; (80079d0 <hci_tl_lowlevel_init+0x54>)
 8007988:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800798a:	4b12      	ldr	r3, [pc, #72]	; (80079d4 <hci_tl_lowlevel_init+0x58>)
 800798c:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800798e:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <hci_tl_lowlevel_init+0x5c>)
 8007990:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <hci_tl_lowlevel_init+0x60>)
 8007994:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8007996:	4b12      	ldr	r3, [pc, #72]	; (80079e0 <hci_tl_lowlevel_init+0x64>)
 8007998:	61fb      	str	r3, [r7, #28]
  
  hci_register_io_bus (&fops);
 800799a:	1d3b      	adds	r3, r7, #4
 800799c:	4618      	mov	r0, r3
 800799e:	f7fe f813 	bl	80059c8 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti3, EXTI_LINE_3);
 80079a2:	4910      	ldr	r1, [pc, #64]	; (80079e4 <hci_tl_lowlevel_init+0x68>)
 80079a4:	4810      	ldr	r0, [pc, #64]	; (80079e8 <hci_tl_lowlevel_init+0x6c>)
 80079a6:	f7f9 fba5 	bl	80010f4 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti3, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80079aa:	4a10      	ldr	r2, [pc, #64]	; (80079ec <hci_tl_lowlevel_init+0x70>)
 80079ac:	2100      	movs	r1, #0
 80079ae:	480e      	ldr	r0, [pc, #56]	; (80079e8 <hci_tl_lowlevel_init+0x6c>)
 80079b0:	f7f9 fb77 	bl	80010a2 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80079b4:	2200      	movs	r2, #0
 80079b6:	2100      	movs	r1, #0
 80079b8:	200e      	movs	r0, #14
 80079ba:	f7f9 fb3e 	bl	800103a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80079be:	200e      	movs	r0, #14
 80079c0:	f7f9 fb55 	bl	800106e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80079c4:	bf00      	nop
 80079c6:	3720      	adds	r7, #32
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	080076d9 	.word	0x080076d9
 80079d0:	08007769 	.word	0x08007769
 80079d4:	080078b5 	.word	0x080078b5
 80079d8:	080077c9 	.word	0x080077c9
 80079dc:	08007795 	.word	0x08007795
 80079e0:	08008135 	.word	0x08008135
 80079e4:	06000003 	.word	0x06000003
 80079e8:	200005b0 	.word	0x200005b0
 80079ec:	080079f1 	.word	0x080079f1

080079f0 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80079f4:	e005      	b.n	8007a02 <hci_tl_lowlevel_isr+0x12>
  {        
    if (hci_notify_asynch_evt(NULL))
 80079f6:	2000      	movs	r0, #0
 80079f8:	f7fe f948 	bl	8005c8c <hci_notify_asynch_evt>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d105      	bne.n	8007a0e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8007a02:	f7ff ffab 	bl	800795c <IsDataAvailable>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1f4      	bne.n	80079f6 <hci_tl_lowlevel_isr+0x6>
 8007a0c:	e000      	b.n	8007a10 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8007a0e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <SystemClock_Decrease>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void SystemClock_Decrease(void)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b098      	sub	sp, #96	; 0x60
 8007a16:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	605a      	str	r2, [r3, #4]
 8007a22:	609a      	str	r2, [r3, #8]
 8007a24:	60da      	str	r2, [r3, #12]
 8007a26:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a28:	1d3b      	adds	r3, r7, #4
 8007a2a:	2248      	movs	r2, #72	; 0x48
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fdb7 	bl	80085a2 <memset>

  /* Select MSI as system clock source */
  /* Note: Keep AHB and APB prescaler settings from previous structure initialization */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8007a34:	2301      	movs	r3, #1
 8007a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	653b      	str	r3, [r7, #80]	; 0x50
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007a3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007a40:	2100      	movs	r1, #0
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fa fc08 	bl	8002258 <HAL_RCC_ClockConfig>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <SystemClock_Decrease+0x40>
  {
    /* Initialization Error */
    Error_Handler();
 8007a4e:	f000 f98d 	bl	8007d6c <Error_Handler>
  }

  /* Disable PLL to reduce power consumption since MSI is used from that point */
  /* Change MSI frequency */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8007a52:	2310      	movs	r3, #16
 8007a54:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007a56:	2301      	movs	r3, #1
 8007a58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8007a5a:	2350      	movs	r3, #80	; 0x50
 8007a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	633b      	str	r3, [r7, #48]	; 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a62:	1d3b      	adds	r3, r7, #4
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7f9 ff8b 	bl	8001980 <HAL_RCC_OscConfig>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <SystemClock_Decrease+0x62>
  {
    /* Initialization Error */
    Error_Handler();
 8007a70:	f000 f97c 	bl	8007d6c <Error_Handler>
  }
}
 8007a74:	bf00      	nop
 8007a76:	3760      	adds	r7, #96	; 0x60
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <main>:

int main(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a80:	f7f9 f94c 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a84:	f000 f816 	bl	8007ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a88:	f000 f866 	bl	8007b58 <MX_GPIO_Init>
  MX_BlueNRG_MS_Init();
 8007a8c:	f7fe faa4 	bl	8005fd8 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
 // HAL_Delay(200);
  MX_BlueNRG_MS_Process();
 8007a90:	f7fe fba8 	bl	80061e4 <MX_BlueNRG_MS_Process>
  /* Reduce the System clock to below 2 MHz */
    SystemClock_Decrease();
 8007a94:	f7ff ffbd 	bl	8007a12 <SystemClock_Decrease>
    /* Otherwise the Systick interrupt will wake up the device within 1ms     */
    /* (HAL time base).
     *    printf("Reset button\n");
     *                                                      */

   HAL_SuspendTick();
 8007a98:	f7f9 f9d4 	bl	8000e44 <HAL_SuspendTick>

    /* De-init LED1 */
    /* Enter Sleep Mode, wake up is done once User push-button is pressed */
    HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007aa2:	f7f9 fe3b 	bl	800171c <HAL_PWR_EnterSLEEPMode>
    /* ... Low-power SLEEP mode ... */

    /* System is Low Power Run mode when exiting Low Power Sleep mode,
       disable low power run mode and reset the clock to initialization configuration */
    HAL_PWREx_DisableLowPowerRunMode();
 8007aa6:	f7f9 fef7 	bl	8001898 <HAL_PWREx_DisableLowPowerRunMode>

    /* Configure the system clock for the RUN mode */
    SystemClock_Config();
 8007aaa:	f000 f803 	bl	8007ab4 <SystemClock_Config>

    /* Re-init LED1 to toggle during Run mode */

    /* Resume Tick interrupt if disabled prior to Low Power Sleep mode entry */
    HAL_ResumeTick();
 8007aae:	f7f9 f9d9 	bl	8000e64 <HAL_ResumeTick>
  MX_BlueNRG_MS_Process();
 8007ab2:	e7ed      	b.n	8007a90 <main+0x14>

08007ab4 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b098      	sub	sp, #96	; 0x60
 8007ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007aba:	f107 0318 	add.w	r3, r7, #24
 8007abe:	2248      	movs	r2, #72	; 0x48
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fd6d 	bl	80085a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ac8:	1d3b      	adds	r3, r7, #4
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	605a      	str	r2, [r3, #4]
 8007ad0:	609a      	str	r2, [r3, #8]
 8007ad2:	60da      	str	r2, [r3, #12]
 8007ad4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	f7f9 fe62 	bl	80017a0 <HAL_PWREx_ControlVoltageScaling>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8007ae2:	f000 f943 	bl	8007d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8007ae6:	2310      	movs	r3, #16
 8007ae8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007aea:	2301      	movs	r3, #1
 8007aec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8007aee:	2300      	movs	r3, #0
 8007af0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007af2:	2360      	movs	r3, #96	; 0x60
 8007af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007af6:	2302      	movs	r3, #2
 8007af8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007afa:	2301      	movs	r3, #1
 8007afc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007afe:	2301      	movs	r3, #1
 8007b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8007b02:	2337      	movs	r3, #55	; 0x37
 8007b04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007b06:	2307      	movs	r3, #7
 8007b08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b12:	f107 0318 	add.w	r3, r7, #24
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7f9 ff32 	bl	8001980 <HAL_RCC_OscConfig>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8007b22:	f000 f923 	bl	8007d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b26:	230f      	movs	r3, #15
 8007b28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007b32:	2300      	movs	r3, #0
 8007b34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007b36:	2300      	movs	r3, #0
 8007b38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007b3a:	1d3b      	adds	r3, r7, #4
 8007b3c:	2105      	movs	r1, #5
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fa fb8a 	bl	8002258 <HAL_RCC_ClockConfig>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007b4a:	f000 f90f 	bl	8007d6c <Error_Handler>
  }
}
 8007b4e:	bf00      	nop
 8007b50:	3760      	adds	r7, #96	; 0x60
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	; 0x28
 8007b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b5e:	f107 0314 	add.w	r3, r7, #20
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	605a      	str	r2, [r3, #4]
 8007b68:	609a      	str	r2, [r3, #8]
 8007b6a:	60da      	str	r2, [r3, #12]
 8007b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b6e:	4b79      	ldr	r3, [pc, #484]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b72:	4a78      	ldr	r2, [pc, #480]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007b74:	f043 0304 	orr.w	r3, r3, #4
 8007b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b7a:	4b76      	ldr	r3, [pc, #472]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b7e:	f003 0304 	and.w	r3, r3, #4
 8007b82:	613b      	str	r3, [r7, #16]
 8007b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b86:	4b73      	ldr	r3, [pc, #460]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b8a:	4a72      	ldr	r2, [pc, #456]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007b8c:	f043 0301 	orr.w	r3, r3, #1
 8007b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b92:	4b70      	ldr	r3, [pc, #448]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007b9e:	4b6d      	ldr	r3, [pc, #436]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba2:	4a6c      	ldr	r2, [pc, #432]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007ba4:	f043 0320 	orr.w	r3, r3, #32
 8007ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007baa:	4b6a      	ldr	r3, [pc, #424]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bae:	f003 0320 	and.w	r3, r3, #32
 8007bb2:	60bb      	str	r3, [r7, #8]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bb6:	4b67      	ldr	r3, [pc, #412]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bba:	4a66      	ldr	r2, [pc, #408]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007bbc:	f043 0302 	orr.w	r3, r3, #2
 8007bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007bc2:	4b64      	ldr	r3, [pc, #400]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	607b      	str	r3, [r7, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007bce:	4b61      	ldr	r3, [pc, #388]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd2:	4a60      	ldr	r2, [pc, #384]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007bda:	4b5e      	ldr	r3, [pc, #376]	; (8007d54 <MX_GPIO_Init+0x1fc>)
 8007bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be2:	603b      	str	r3, [r7, #0]
 8007be4:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8007be6:	f7f9 fe37 	bl	8001858 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|LED_GREEN_Pin, GPIO_PIN_RESET);
 8007bea:	2200      	movs	r2, #0
 8007bec:	2181      	movs	r1, #129	; 0x81
 8007bee:	485a      	ldr	r0, [pc, #360]	; (8007d58 <MX_GPIO_Init+0x200>)
 8007bf0:	f7f9 fd62 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|LED_RED_Pin, GPIO_PIN_RESET);
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007bfa:	4858      	ldr	r0, [pc, #352]	; (8007d5c <MX_GPIO_Init+0x204>)
 8007bfc:	f7f9 fd5c 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8007c00:	2200      	movs	r2, #0
 8007c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007c06:	4856      	ldr	r0, [pc, #344]	; (8007d60 <MX_GPIO_Init+0x208>)
 8007c08:	f7f9 fd56 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	21a0      	movs	r1, #160	; 0xa0
 8007c10:	4854      	ldr	r0, [pc, #336]	; (8007d64 <MX_GPIO_Init+0x20c>)
 8007c12:	f7f9 fd51 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007c1c:	4b52      	ldr	r3, [pc, #328]	; (8007d68 <MX_GPIO_Init+0x210>)
 8007c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c24:	f107 0314 	add.w	r3, r7, #20
 8007c28:	4619      	mov	r1, r3
 8007c2a:	484b      	ldr	r0, [pc, #300]	; (8007d58 <MX_GPIO_Init+0x200>)
 8007c2c:	f7f9 fabe 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LED_GREEN_Pin;
 8007c30:	2381      	movs	r3, #129	; 0x81
 8007c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c34:	2301      	movs	r3, #1
 8007c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c40:	f107 0314 	add.w	r3, r7, #20
 8007c44:	4619      	mov	r1, r3
 8007c46:	4844      	ldr	r0, [pc, #272]	; (8007d58 <MX_GPIO_Init+0x200>)
 8007c48:	f7f9 fab0 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c50:	2303      	movs	r3, #3
 8007c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c54:	2300      	movs	r3, #0
 8007c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8007c58:	f107 0314 	add.w	r3, r7, #20
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	483e      	ldr	r0, [pc, #248]	; (8007d58 <MX_GPIO_Init+0x200>)
 8007c60:	f7f9 faa4 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 LED_RED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LED_RED_Pin;
 8007c64:	f44f 7301 	mov.w	r3, #516	; 0x204
 8007c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c72:	2300      	movs	r3, #0
 8007c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c76:	f107 0314 	add.w	r3, r7, #20
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4837      	ldr	r0, [pc, #220]	; (8007d5c <MX_GPIO_Init+0x204>)
 8007c7e:	f7f9 fa95 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007c82:	2308      	movs	r3, #8
 8007c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007c86:	4b38      	ldr	r3, [pc, #224]	; (8007d68 <MX_GPIO_Init+0x210>)
 8007c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c8e:	f107 0314 	add.w	r3, r7, #20
 8007c92:	4619      	mov	r1, r3
 8007c94:	4831      	ldr	r0, [pc, #196]	; (8007d5c <MX_GPIO_Init+0x204>)
 8007c96:	f7f9 fa89 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007cac:	f107 0314 	add.w	r3, r7, #20
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	482b      	ldr	r0, [pc, #172]	; (8007d60 <MX_GPIO_Init+0x208>)
 8007cb4:	f7f9 fa7a 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8007cb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007cbe:	4b2a      	ldr	r3, [pc, #168]	; (8007d68 <MX_GPIO_Init+0x210>)
 8007cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8007cc6:	f107 0314 	add.w	r3, r7, #20
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4825      	ldr	r0, [pc, #148]	; (8007d64 <MX_GPIO_Init+0x20c>)
 8007cce:	f7f9 fa6d 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ce0:	f107 0314 	add.w	r3, r7, #20
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	481f      	ldr	r0, [pc, #124]	; (8007d64 <MX_GPIO_Init+0x20c>)
 8007ce8:	f7f9 fa60 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007cec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8007cfe:	230a      	movs	r3, #10
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d02:	f107 0314 	add.w	r3, r7, #20
 8007d06:	4619      	mov	r1, r3
 8007d08:	4814      	ldr	r0, [pc, #80]	; (8007d5c <MX_GPIO_Init+0x204>)
 8007d0a:	f7f9 fa4f 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8007d0e:	23a0      	movs	r3, #160	; 0xa0
 8007d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d12:	2301      	movs	r3, #1
 8007d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d1e:	f107 0314 	add.w	r3, r7, #20
 8007d22:	4619      	mov	r1, r3
 8007d24:	480f      	ldr	r0, [pc, #60]	; (8007d64 <MX_GPIO_Init+0x20c>)
 8007d26:	f7f9 fa41 	bl	80011ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	200e      	movs	r0, #14
 8007d30:	f7f9 f983 	bl	800103a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8007d34:	200e      	movs	r0, #14
 8007d36:	f7f9 f99a 	bl	800106e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	2018      	movs	r0, #24
 8007d40:	f7f9 f97b 	bl	800103a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8007d44:	2018      	movs	r0, #24
 8007d46:	f7f9 f992 	bl	800106e <HAL_NVIC_EnableIRQ>

}
 8007d4a:	bf00      	nop
 8007d4c:	3728      	adds	r7, #40	; 0x28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	40021000 	.word	0x40021000
 8007d58:	42020800 	.word	0x42020800
 8007d5c:	42020000 	.word	0x42020000
 8007d60:	42021400 	.word	0x42021400
 8007d64:	42020400 	.word	0x42020400
 8007d68:	10110000 	.word	0x10110000

08007d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007d70:	bf00      	nop
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
	...

08007d7c <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{  
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b092      	sub	sp, #72	; 0x48
 8007d80:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME}; 
 8007d82:	4a3f      	ldr	r2, [pc, #252]	; (8007e80 <Set_DeviceConnectable+0x104>)
 8007d84:	f107 031c 	add.w	r3, r7, #28
 8007d88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d8c:	e883 0003 	stmia.w	r3, {r0, r1}
    
  uint8_t manuf_data[26] = {
 8007d90:	2302      	movs	r3, #2
 8007d92:	703b      	strb	r3, [r7, #0]
 8007d94:	230a      	movs	r3, #10
 8007d96:	707b      	strb	r3, [r7, #1]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	70bb      	strb	r3, [r7, #2]
 8007d9c:	2308      	movs	r3, #8
 8007d9e:	70fb      	strb	r3, [r7, #3]
 8007da0:	2309      	movs	r3, #9
 8007da2:	713b      	strb	r3, [r7, #4]
 8007da4:	2342      	movs	r3, #66	; 0x42
 8007da6:	717b      	strb	r3, [r7, #5]
 8007da8:	236c      	movs	r3, #108	; 0x6c
 8007daa:	71bb      	strb	r3, [r7, #6]
 8007dac:	2375      	movs	r3, #117	; 0x75
 8007dae:	71fb      	strb	r3, [r7, #7]
 8007db0:	2365      	movs	r3, #101	; 0x65
 8007db2:	723b      	strb	r3, [r7, #8]
 8007db4:	234e      	movs	r3, #78	; 0x4e
 8007db6:	727b      	strb	r3, [r7, #9]
 8007db8:	2352      	movs	r3, #82	; 0x52
 8007dba:	72bb      	strb	r3, [r7, #10]
 8007dbc:	2347      	movs	r3, #71	; 0x47
 8007dbe:	72fb      	strb	r3, [r7, #11]
 8007dc0:	230d      	movs	r3, #13
 8007dc2:	733b      	strb	r3, [r7, #12]
 8007dc4:	23ff      	movs	r3, #255	; 0xff
 8007dc6:	737b      	strb	r3, [r7, #13]
 8007dc8:	2301      	movs	r3, #1
 8007dca:	73bb      	strb	r3, [r7, #14]
 8007dcc:	2302      	movs	r3, #2
 8007dce:	73fb      	strb	r3, [r7, #15]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	743b      	strb	r3, [r7, #16]
 8007dd4:	23f4      	movs	r3, #244	; 0xf4
 8007dd6:	747b      	strb	r3, [r7, #17]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	74bb      	strb	r3, [r7, #18]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	74fb      	strb	r3, [r7, #19]
    0x02,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8007de0:	4b28      	ldr	r3, [pc, #160]	; (8007e84 <Set_DeviceConnectable+0x108>)
 8007de2:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8007de4:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8007de6:	4b27      	ldr	r3, [pc, #156]	; (8007e84 <Set_DeviceConnectable+0x108>)
 8007de8:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8007dea:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8007dec:	4b25      	ldr	r3, [pc, #148]	; (8007e84 <Set_DeviceConnectable+0x108>)
 8007dee:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8007df0:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8007df2:	4b24      	ldr	r3, [pc, #144]	; (8007e84 <Set_DeviceConnectable+0x108>)
 8007df4:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8007df6:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8007df8:	4b22      	ldr	r3, [pc, #136]	; (8007e84 <Set_DeviceConnectable+0x108>)
 8007dfa:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8007dfc:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8007dfe:	4b21      	ldr	r3, [pc, #132]	; (8007e84 <Set_DeviceConnectable+0x108>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8007e02:	767b      	strb	r3, [r7, #25]
  };
  
  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8007e04:	7cbb      	ldrb	r3, [r7, #18]
 8007e06:	f043 0301 	orr.w	r3, r3, #1
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	74bb      	strb	r3, [r7, #18]
  
  hci_le_set_scan_resp_data(0, NULL);
 8007e0e:	2100      	movs	r1, #0
 8007e10:	2000      	movs	r0, #0
 8007e12:	f7fd fcbe 	bl	8005792 <hci_le_set_scan_resp_data>
  
  PRINTF("Set General Discoverable Mode.\n");
 8007e16:	481c      	ldr	r0, [pc, #112]	; (8007e88 <Set_DeviceConnectable+0x10c>)
 8007e18:	f000 fc54 	bl	80086c4 <puts>
  
  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9306      	str	r3, [sp, #24]
 8007e20:	2300      	movs	r3, #0
 8007e22:	9305      	str	r3, [sp, #20]
 8007e24:	2300      	movs	r3, #0
 8007e26:	9304      	str	r3, [sp, #16]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	9303      	str	r3, [sp, #12]
 8007e2c:	f107 031c 	add.w	r3, r7, #28
 8007e30:	9302      	str	r3, [sp, #8]
 8007e32:	2308      	movs	r3, #8
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	2300      	movs	r3, #0
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8007e40:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8007e44:	2000      	movs	r0, #0
 8007e46:	f7fc ff9f 	bl	8004d88 <aci_gap_set_discoverable>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0); 
  
  aci_gap_update_adv_data(26, manuf_data);
 8007e50:	463b      	mov	r3, r7
 8007e52:	4619      	mov	r1, r3
 8007e54:	201a      	movs	r0, #26
 8007e56:	f7fd f8d5 	bl	8005004 <aci_gap_update_adv_data>
  
  if(ret != BLE_STATUS_SUCCESS)
 8007e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d006      	beq.n	8007e70 <Set_DeviceConnectable+0xf4>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 8007e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e66:	4619      	mov	r1, r3
 8007e68:	4808      	ldr	r0, [pc, #32]	; (8007e8c <Set_DeviceConnectable+0x110>)
 8007e6a:	f000 fba3 	bl	80085b4 <iprintf>
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8007e6e:	e002      	b.n	8007e76 <Set_DeviceConnectable+0xfa>
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
 8007e70:	4807      	ldr	r0, [pc, #28]	; (8007e90 <Set_DeviceConnectable+0x114>)
 8007e72:	f000 fc27 	bl	80086c4 <puts>
}
 8007e76:	bf00      	nop
 8007e78:	3728      	adds	r7, #40	; 0x28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	08009938 	.word	0x08009938
 8007e84:	2000057c 	.word	0x2000057c
 8007e88:	080098c4 	.word	0x080098c4
 8007e8c:	080098e4 	.word	0x080098e4
 8007e90:	08009910 	.word	0x08009910

08007e94 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	61bb      	str	r3, [r7, #24]
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d139      	bne.n	8007f22 <user_notify+0x8e>
    return;
  
  switch(event_pckt->evt){
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b3e      	cmp	r3, #62	; 0x3e
 8007eb4:	d006      	beq.n	8007ec4 <user_notify+0x30>
 8007eb6:	2bff      	cmp	r3, #255	; 0xff
 8007eb8:	d01b      	beq.n	8007ef2 <user_notify+0x5e>
 8007eba:	2b05      	cmp	r3, #5
 8007ebc:	d132      	bne.n	8007f24 <user_notify+0x90>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8007ebe:	f000 f835 	bl	8007f2c <GAP_DisconnectionComplete_CB>
    }
    break;
 8007ec2:	e02f      	b.n	8007f24 <user_notify+0x90>
    
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	60fb      	str	r3, [r7, #12]
      
      switch(evt->subevent){
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d000      	beq.n	8007ed4 <user_notify+0x40>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
        }
        break;
      }
    }
    break;
 8007ed2:	e027      	b.n	8007f24 <user_notify+0x90>
          evt_le_connection_complete *cc = (void *)evt->data;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	1d5a      	adds	r2, r3, #5
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4610      	mov	r0, r2
 8007eea:	f000 f839 	bl	8007f60 <GAP_ConnectionComplete_CB>
        break;
 8007eee:	bf00      	nop
    break;
 8007ef0:	e018      	b.n	8007f24 <user_notify+0x90>
    
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	461a      	mov	r2, r3
 8007f00:	f640 4314 	movw	r3, #3092	; 0xc14
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d000      	beq.n	8007f0a <user_notify+0x76>
        }
        break;        
      }
      
    }
    break;
 8007f08:	e00c      	b.n	8007f24 <user_notify+0x90>
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;                    
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);                    
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	885b      	ldrh	r3, [r3, #2]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff fac8 	bl	80074ac <Read_Request_CB>
        break;        
 8007f1c:	bf00      	nop
    break;
 8007f1e:	bf00      	nop
 8007f20:	e000      	b.n	8007f24 <user_notify+0x90>
    return;
 8007f22:	bf00      	nop
  }    
}
 8007f24:	3720      	adds	r7, #32
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  connected = FALSE;
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <GAP_DisconnectionComplete_CB+0x24>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
 8007f36:	4807      	ldr	r0, [pc, #28]	; (8007f54 <GAP_DisconnectionComplete_CB+0x28>)
 8007f38:	f000 fbc4 	bl	80086c4 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8007f3c:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <GAP_DisconnectionComplete_CB+0x2c>)
 8007f3e:	2201      	movs	r2, #1
 8007f40:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8007f42:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <GAP_DisconnectionComplete_CB+0x30>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	701a      	strb	r2, [r3, #0]
  MX_BlueNRG_MS_Process();
 8007f48:	f7fe f94c 	bl	80061e4 <MX_BlueNRG_MS_Process>
}
 8007f4c:	bf00      	nop
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	20000498 	.word	0x20000498
 8007f54:	08009940 	.word	0x08009940
 8007f58:	20000021 	.word	0x20000021
 8007f5c:	20000496 	.word	0x20000496

08007f60 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8007f6c:	4b11      	ldr	r3, [pc, #68]	; (8007fb4 <GAP_ConnectionComplete_CB+0x54>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8007f72:	4a11      	ldr	r2, [pc, #68]	; (8007fb8 <GAP_ConnectionComplete_CB+0x58>)
 8007f74:	887b      	ldrh	r3, [r7, #2]
 8007f76:	8013      	strh	r3, [r2, #0]
  
  PRINTF("Connected to device:");
 8007f78:	4810      	ldr	r0, [pc, #64]	; (8007fbc <GAP_ConnectionComplete_CB+0x5c>)
 8007f7a:	f000 fb1b 	bl	80085b4 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8007f7e:	2305      	movs	r3, #5
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	e00a      	b.n	8007f9a <GAP_ConnectionComplete_CB+0x3a>
    PRINTF("%02X-", addr[i]);
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4413      	add	r3, r2
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	480c      	ldr	r0, [pc, #48]	; (8007fc0 <GAP_ConnectionComplete_CB+0x60>)
 8007f90:	f000 fb10 	bl	80085b4 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	60fb      	str	r3, [r7, #12]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1f1      	bne.n	8007f84 <GAP_ConnectionComplete_CB+0x24>
  }
  PRINTF("%02X\n", addr[0]);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4807      	ldr	r0, [pc, #28]	; (8007fc4 <GAP_ConnectionComplete_CB+0x64>)
 8007fa8:	f000 fb04 	bl	80085b4 <iprintf>
//  set_connectable = TRUE;
}
 8007fac:	bf00      	nop
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20000498 	.word	0x20000498
 8007fb8:	20000494 	.word	0x20000494
 8007fbc:	08009950 	.word	0x08009950
 8007fc0:	08009968 	.word	0x08009968
 8007fc4:	08009970 	.word	0x08009970

08007fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <HAL_MspInit+0x44>)
 8007fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd2:	4a0e      	ldr	r2, [pc, #56]	; (800800c <HAL_MspInit+0x44>)
 8007fd4:	f043 0301 	orr.w	r3, r3, #1
 8007fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8007fda:	4b0c      	ldr	r3, [pc, #48]	; (800800c <HAL_MspInit+0x44>)
 8007fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	607b      	str	r3, [r7, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007fe6:	4b09      	ldr	r3, [pc, #36]	; (800800c <HAL_MspInit+0x44>)
 8007fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fea:	4a08      	ldr	r2, [pc, #32]	; (800800c <HAL_MspInit+0x44>)
 8007fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8007ff2:	4b06      	ldr	r3, [pc, #24]	; (800800c <HAL_MspInit+0x44>)
 8007ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8007ffe:	f7f9 fc8b 	bl	8001918 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	40021000 	.word	0x40021000

08008010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008014:	bf00      	nop
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800801e:	b480      	push	{r7}
 8008020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008022:	e7fe      	b.n	8008022 <HardFault_Handler+0x4>

08008024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008024:	b480      	push	{r7}
 8008026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008028:	e7fe      	b.n	8008028 <MemManage_Handler+0x4>

0800802a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800802a:	b480      	push	{r7}
 800802c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800802e:	e7fe      	b.n	800802e <BusFault_Handler+0x4>

08008030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008030:	b480      	push	{r7}
 8008032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008034:	e7fe      	b.n	8008034 <UsageFault_Handler+0x4>

08008036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008036:	b480      	push	{r7}
 8008038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800803a:	bf00      	nop
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008044:	b480      	push	{r7}
 8008046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008048:	bf00      	nop
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008052:	b480      	push	{r7}
 8008054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008056:	bf00      	nop
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008064:	f7f8 feae 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008068:	bf00      	nop
 800806a:	bd80      	pop	{r7, pc}

0800806c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_3);
 8008070:	4802      	ldr	r0, [pc, #8]	; (800807c <EXTI3_IRQHandler+0x10>)
 8008072:	f7f9 f853 	bl	800111c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008076:	bf00      	nop
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	200005b0 	.word	0x200005b0

08008080 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8008084:	4802      	ldr	r0, [pc, #8]	; (8008090 <EXTI13_IRQHandler+0x10>)
 8008086:	f7f9 f849 	bl	800111c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800808a:	bf00      	nop
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20000008 	.word	0x20000008

08008094 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL. 
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) 
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800809a:	2300      	movs	r3, #0
 800809c:	607b      	str	r3, [r7, #4]
  
  hspi1.Instance  = SPI1;
 800809e:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <BSP_SPI1_Init+0x54>)
 80080a0:	4a12      	ldr	r2, [pc, #72]	; (80080ec <BSP_SPI1_Init+0x58>)
 80080a2:	601a      	str	r2, [r3, #0]
  
  if(SPI1InitCounter++ == 0)
 80080a4:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <BSP_SPI1_Init+0x5c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	4911      	ldr	r1, [pc, #68]	; (80080f0 <BSP_SPI1_Init+0x5c>)
 80080ac:	600a      	str	r2, [r1, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d114      	bne.n	80080dc <BSP_SPI1_Init+0x48>
  {    
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) 
 80080b2:	480d      	ldr	r0, [pc, #52]	; (80080e8 <BSP_SPI1_Init+0x54>)
 80080b4:	f7fa fe4b 	bl	8002d4e <HAL_SPI_GetState>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10e      	bne.n	80080dc <BSP_SPI1_Init+0x48>
	{ 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 80080be:	480a      	ldr	r0, [pc, #40]	; (80080e8 <BSP_SPI1_Init+0x54>)
 80080c0:	f000 f882 	bl	80081c8 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}	
#endif   
		if(ret == BSP_ERROR_NONE)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d108      	bne.n	80080dc <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80080ca:	4807      	ldr	r0, [pc, #28]	; (80080e8 <BSP_SPI1_Init+0x54>)
 80080cc:	f000 f83a 	bl	8008144 <MX_SPI1_Init>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 80080d6:	f06f 0307 	mvn.w	r3, #7
 80080da:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }	

  return ret;
 80080dc:	687b      	ldr	r3, [r7, #4]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	200005bc 	.word	0x200005bc
 80080ec:	40013000 	.word	0x40013000
 80080f0:	200004cc 	.word	0x200004cc

080080f4 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af02      	add	r7, sp, #8
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	4613      	mov	r3, r2
 8008100:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]
  
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8008106:	88fa      	ldrh	r2, [r7, #6]
 8008108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	4613      	mov	r3, r2
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	4806      	ldr	r0, [pc, #24]	; (8008130 <BSP_SPI1_SendRecv+0x3c>)
 8008116:	f7fa fc07 	bl	8002928 <HAL_SPI_TransmitReceive>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8008120:	f06f 0305 	mvn.w	r3, #5
 8008124:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8008126:	697b      	ldr	r3, [r7, #20]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	200005bc 	.word	0x200005bc

08008134 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008138:	f7f8 fe56 	bl	8000de8 <HAL_GetTick>
 800813c:	4603      	mov	r3, r0
}
 800813e:	4618      	mov	r0, r3
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <MX_SPI1_Init>:

/* SPI1 init function */ 

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a1c      	ldr	r2, [pc, #112]	; (80081c4 <MX_SPI1_Init+0x80>)
 8008154:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f44f 7282 	mov.w	r2, #260	; 0x104
 800815c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800816a:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800817e:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2218      	movs	r2, #24
 8008184:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2207      	movs	r2, #7
 800819c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2208      	movs	r2, #8
 80081a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7fa fb28 	bl	8002800 <HAL_SPI_Init>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	40013000 	.word	0x40013000

080081c8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	; 0x28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80081d0:	4b15      	ldr	r3, [pc, #84]	; (8008228 <SPI1_MspInit+0x60>)
 80081d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081d4:	4a14      	ldr	r2, [pc, #80]	; (8008228 <SPI1_MspInit+0x60>)
 80081d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081da:	6613      	str	r3, [r2, #96]	; 0x60
 80081dc:	4b12      	ldr	r3, [pc, #72]	; (8008228 <SPI1_MspInit+0x60>)
 80081de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081e4:	613b      	str	r3, [r7, #16]
 80081e6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081e8:	4b0f      	ldr	r3, [pc, #60]	; (8008228 <SPI1_MspInit+0x60>)
 80081ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ec:	4a0e      	ldr	r2, [pc, #56]	; (8008228 <SPI1_MspInit+0x60>)
 80081ee:	f043 0301 	orr.w	r3, r3, #1
 80081f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081f4:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <SPI1_MspInit+0x60>)
 80081f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008200:	23e0      	movs	r3, #224	; 0xe0
 8008202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008204:	2302      	movs	r3, #2
 8008206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008208:	2300      	movs	r3, #0
 800820a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800820c:	2300      	movs	r3, #0
 800820e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008210:	2305      	movs	r3, #5
 8008212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008214:	f107 0314 	add.w	r3, r7, #20
 8008218:	4619      	mov	r1, r3
 800821a:	4804      	ldr	r0, [pc, #16]	; (800822c <SPI1_MspInit+0x64>)
 800821c:	f7f8 ffc6 	bl	80011ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8008220:	bf00      	nop
 8008222:	3728      	adds	r7, #40	; 0x28
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40021000 	.word	0x40021000
 800822c:	42020000 	.word	0x42020000

08008230 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800823c:	2300      	movs	r3, #0
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	e00a      	b.n	8008258 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008242:	e000      	b.n	8008246 <_read+0x16>
 8008244:	bf00      	nop
 8008246:	4601      	mov	r1, r0
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	60ba      	str	r2, [r7, #8]
 800824e:	b2ca      	uxtb	r2, r1
 8008250:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	3301      	adds	r3, #1
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	429a      	cmp	r2, r3
 800825e:	dbf0      	blt.n	8008242 <_read+0x12>
	}

return len;
 8008260:	687b      	ldr	r3, [r7, #4]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b086      	sub	sp, #24
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008276:	2300      	movs	r3, #0
 8008278:	617b      	str	r3, [r7, #20]
 800827a:	e009      	b.n	8008290 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	1c5a      	adds	r2, r3, #1
 8008280:	60ba      	str	r2, [r7, #8]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	f7f8 fcf5 	bl	8000c74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	3301      	adds	r3, #1
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	429a      	cmp	r2, r3
 8008296:	dbf1      	blt.n	800827c <_write+0x12>
	}
	return len;
 8008298:	687b      	ldr	r3, [r7, #4]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <_close>:

int _close(int file)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
	return -1;
 80082aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80082ca:	605a      	str	r2, [r3, #4]
	return 0;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <_isatty>:

int _isatty(int file)
{
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
	return 1;
 80082e2:	2301      	movs	r3, #1
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
	return 0;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
	...

0800830c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008314:	4b11      	ldr	r3, [pc, #68]	; (800835c <_sbrk+0x50>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <_sbrk+0x16>
		heap_end = &end;
 800831c:	4b0f      	ldr	r3, [pc, #60]	; (800835c <_sbrk+0x50>)
 800831e:	4a10      	ldr	r2, [pc, #64]	; (8008360 <_sbrk+0x54>)
 8008320:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008322:	4b0e      	ldr	r3, [pc, #56]	; (800835c <_sbrk+0x50>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008328:	4b0c      	ldr	r3, [pc, #48]	; (800835c <_sbrk+0x50>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4413      	add	r3, r2
 8008330:	466a      	mov	r2, sp
 8008332:	4293      	cmp	r3, r2
 8008334:	d907      	bls.n	8008346 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008336:	f000 f8ff 	bl	8008538 <__errno>
 800833a:	4602      	mov	r2, r0
 800833c:	230c      	movs	r3, #12
 800833e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008344:	e006      	b.n	8008354 <_sbrk+0x48>
	}

	heap_end += incr;
 8008346:	4b05      	ldr	r3, [pc, #20]	; (800835c <_sbrk+0x50>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4413      	add	r3, r2
 800834e:	4a03      	ldr	r2, [pc, #12]	; (800835c <_sbrk+0x50>)
 8008350:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008352:	68fb      	ldr	r3, [r7, #12]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	200004d0 	.word	0x200004d0
 8008360:	20000628 	.word	0x20000628

08008364 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008368:	4b06      	ldr	r3, [pc, #24]	; (8008384 <SystemInit+0x20>)
 800836a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836e:	4a05      	ldr	r2, [pc, #20]	; (8008384 <SystemInit+0x20>)
 8008370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8008378:	bf00      	nop
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	e000ed00 	.word	0xe000ed00

08008388 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800838e:	4b4f      	ldr	r3, [pc, #316]	; (80084cc <SystemCoreClockUpdate+0x144>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0308 	and.w	r3, r3, #8
 8008396:	2b00      	cmp	r3, #0
 8008398:	d107      	bne.n	80083aa <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800839a:	4b4c      	ldr	r3, [pc, #304]	; (80084cc <SystemCoreClockUpdate+0x144>)
 800839c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083a0:	0a1b      	lsrs	r3, r3, #8
 80083a2:	f003 030f 	and.w	r3, r3, #15
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	e005      	b.n	80083b6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80083aa:	4b48      	ldr	r3, [pc, #288]	; (80084cc <SystemCoreClockUpdate+0x144>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	091b      	lsrs	r3, r3, #4
 80083b0:	f003 030f 	and.w	r3, r3, #15
 80083b4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80083b6:	4a46      	ldr	r2, [pc, #280]	; (80084d0 <SystemCoreClockUpdate+0x148>)
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083be:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083c0:	4b42      	ldr	r3, [pc, #264]	; (80084cc <SystemCoreClockUpdate+0x144>)
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f003 030c 	and.w	r3, r3, #12
 80083c8:	2b0c      	cmp	r3, #12
 80083ca:	d865      	bhi.n	8008498 <SystemCoreClockUpdate+0x110>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <SystemCoreClockUpdate+0x4c>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	08008409 	.word	0x08008409
 80083d8:	08008499 	.word	0x08008499
 80083dc:	08008499 	.word	0x08008499
 80083e0:	08008499 	.word	0x08008499
 80083e4:	08008411 	.word	0x08008411
 80083e8:	08008499 	.word	0x08008499
 80083ec:	08008499 	.word	0x08008499
 80083f0:	08008499 	.word	0x08008499
 80083f4:	08008419 	.word	0x08008419
 80083f8:	08008499 	.word	0x08008499
 80083fc:	08008499 	.word	0x08008499
 8008400:	08008499 	.word	0x08008499
 8008404:	08008421 	.word	0x08008421
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8008408:	4a32      	ldr	r2, [pc, #200]	; (80084d4 <SystemCoreClockUpdate+0x14c>)
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	6013      	str	r3, [r2, #0]
      break;
 800840e:	e047      	b.n	80084a0 <SystemCoreClockUpdate+0x118>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8008410:	4b30      	ldr	r3, [pc, #192]	; (80084d4 <SystemCoreClockUpdate+0x14c>)
 8008412:	4a31      	ldr	r2, [pc, #196]	; (80084d8 <SystemCoreClockUpdate+0x150>)
 8008414:	601a      	str	r2, [r3, #0]
      break;
 8008416:	e043      	b.n	80084a0 <SystemCoreClockUpdate+0x118>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8008418:	4b2e      	ldr	r3, [pc, #184]	; (80084d4 <SystemCoreClockUpdate+0x14c>)
 800841a:	4a30      	ldr	r2, [pc, #192]	; (80084dc <SystemCoreClockUpdate+0x154>)
 800841c:	601a      	str	r2, [r3, #0]
      break;
 800841e:	e03f      	b.n	80084a0 <SystemCoreClockUpdate+0x118>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008420:	4b2a      	ldr	r3, [pc, #168]	; (80084cc <SystemCoreClockUpdate+0x144>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f003 0303 	and.w	r3, r3, #3
 8008428:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800842a:	4b28      	ldr	r3, [pc, #160]	; (80084cc <SystemCoreClockUpdate+0x144>)
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	091b      	lsrs	r3, r3, #4
 8008430:	f003 030f 	and.w	r3, r3, #15
 8008434:	3301      	adds	r3, #1
 8008436:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d002      	beq.n	8008444 <SystemCoreClockUpdate+0xbc>
 800843e:	2b03      	cmp	r3, #3
 8008440:	d006      	beq.n	8008450 <SystemCoreClockUpdate+0xc8>
 8008442:	e00b      	b.n	800845c <SystemCoreClockUpdate+0xd4>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8008444:	4a24      	ldr	r2, [pc, #144]	; (80084d8 <SystemCoreClockUpdate+0x150>)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	fbb2 f3f3 	udiv	r3, r2, r3
 800844c:	613b      	str	r3, [r7, #16]
          break;
 800844e:	e00b      	b.n	8008468 <SystemCoreClockUpdate+0xe0>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8008450:	4a22      	ldr	r2, [pc, #136]	; (80084dc <SystemCoreClockUpdate+0x154>)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	fbb2 f3f3 	udiv	r3, r2, r3
 8008458:	613b      	str	r3, [r7, #16]
          break;
 800845a:	e005      	b.n	8008468 <SystemCoreClockUpdate+0xe0>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	fbb2 f3f3 	udiv	r3, r2, r3
 8008464:	613b      	str	r3, [r7, #16]
          break;
 8008466:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8008468:	4b18      	ldr	r3, [pc, #96]	; (80084cc <SystemCoreClockUpdate+0x144>)
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	0a1b      	lsrs	r3, r3, #8
 800846e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	fb02 f303 	mul.w	r3, r2, r3
 8008478:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800847a:	4b14      	ldr	r3, [pc, #80]	; (80084cc <SystemCoreClockUpdate+0x144>)
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	0e5b      	lsrs	r3, r3, #25
 8008480:	f003 0303 	and.w	r3, r3, #3
 8008484:	3301      	adds	r3, #1
 8008486:	005b      	lsls	r3, r3, #1
 8008488:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008492:	4a10      	ldr	r2, [pc, #64]	; (80084d4 <SystemCoreClockUpdate+0x14c>)
 8008494:	6013      	str	r3, [r2, #0]
      break;
 8008496:	e003      	b.n	80084a0 <SystemCoreClockUpdate+0x118>

    default:
      SystemCoreClock = msirange;
 8008498:	4a0e      	ldr	r2, [pc, #56]	; (80084d4 <SystemCoreClockUpdate+0x14c>)
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	6013      	str	r3, [r2, #0]
      break;
 800849e:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80084a0:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <SystemCoreClockUpdate+0x144>)
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	091b      	lsrs	r3, r3, #4
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	4a0d      	ldr	r2, [pc, #52]	; (80084e0 <SystemCoreClockUpdate+0x158>)
 80084ac:	5cd3      	ldrb	r3, [r2, r3]
 80084ae:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80084b0:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <SystemCoreClockUpdate+0x14c>)
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	fa22 f303 	lsr.w	r3, r2, r3
 80084ba:	4a06      	ldr	r2, [pc, #24]	; (80084d4 <SystemCoreClockUpdate+0x14c>)
 80084bc:	6013      	str	r3, [r2, #0]
}
 80084be:	bf00      	nop
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	40021000 	.word	0x40021000
 80084d0:	0800999c 	.word	0x0800999c
 80084d4:	20000024 	.word	0x20000024
 80084d8:	00f42400 	.word	0x00f42400
 80084dc:	007a1200 	.word	0x007a1200
 80084e0:	08009984 	.word	0x08009984

080084e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80084e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800851c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80084e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80084ea:	e003      	b.n	80084f4 <LoopCopyDataInit>

080084ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80084ec:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80084ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80084f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80084f2:	3104      	adds	r1, #4

080084f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80084f4:	480b      	ldr	r0, [pc, #44]	; (8008524 <LoopForever+0xa>)
	ldr	r3, =_edata
 80084f6:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <LoopForever+0xe>)
	adds	r2, r0, r1
 80084f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80084fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80084fc:	d3f6      	bcc.n	80084ec <CopyDataInit>
	ldr	r2, =_sbss
 80084fe:	4a0b      	ldr	r2, [pc, #44]	; (800852c <LoopForever+0x12>)
	b	LoopFillZerobss
 8008500:	e002      	b.n	8008508 <LoopFillZerobss>

08008502 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008502:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008504:	f842 3b04 	str.w	r3, [r2], #4

08008508 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008508:	4b09      	ldr	r3, [pc, #36]	; (8008530 <LoopForever+0x16>)
	cmp	r2, r3
 800850a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800850c:	d3f9      	bcc.n	8008502 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800850e:	f7ff ff29 	bl	8008364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008512:	f000 f817 	bl	8008544 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008516:	f7ff fab1 	bl	8007a7c <main>

0800851a <LoopForever>:

LoopForever:
    b LoopForever
 800851a:	e7fe      	b.n	800851a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800851c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8008520:	08009a90 	.word	0x08009a90
	ldr	r0, =_sdata
 8008524:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008528:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 800852c:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8008530:	20000628 	.word	0x20000628

08008534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008534:	e7fe      	b.n	8008534 <ADC1_2_IRQHandler>
	...

08008538 <__errno>:
 8008538:	4b01      	ldr	r3, [pc, #4]	; (8008540 <__errno+0x8>)
 800853a:	6818      	ldr	r0, [r3, #0]
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	20000028 	.word	0x20000028

08008544 <__libc_init_array>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	4e0d      	ldr	r6, [pc, #52]	; (800857c <__libc_init_array+0x38>)
 8008548:	2500      	movs	r5, #0
 800854a:	4c0d      	ldr	r4, [pc, #52]	; (8008580 <__libc_init_array+0x3c>)
 800854c:	1ba4      	subs	r4, r4, r6
 800854e:	10a4      	asrs	r4, r4, #2
 8008550:	42a5      	cmp	r5, r4
 8008552:	d109      	bne.n	8008568 <__libc_init_array+0x24>
 8008554:	4e0b      	ldr	r6, [pc, #44]	; (8008584 <__libc_init_array+0x40>)
 8008556:	2500      	movs	r5, #0
 8008558:	4c0b      	ldr	r4, [pc, #44]	; (8008588 <__libc_init_array+0x44>)
 800855a:	f001 f82b 	bl	80095b4 <_init>
 800855e:	1ba4      	subs	r4, r4, r6
 8008560:	10a4      	asrs	r4, r4, #2
 8008562:	42a5      	cmp	r5, r4
 8008564:	d105      	bne.n	8008572 <__libc_init_array+0x2e>
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800856c:	3501      	adds	r5, #1
 800856e:	4798      	blx	r3
 8008570:	e7ee      	b.n	8008550 <__libc_init_array+0xc>
 8008572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008576:	3501      	adds	r5, #1
 8008578:	4798      	blx	r3
 800857a:	e7f2      	b.n	8008562 <__libc_init_array+0x1e>
 800857c:	08009a80 	.word	0x08009a80
 8008580:	08009a80 	.word	0x08009a80
 8008584:	08009a80 	.word	0x08009a80
 8008588:	08009a84 	.word	0x08009a84

0800858c <memcpy>:
 800858c:	1e43      	subs	r3, r0, #1
 800858e:	440a      	add	r2, r1
 8008590:	b510      	push	{r4, lr}
 8008592:	4291      	cmp	r1, r2
 8008594:	d100      	bne.n	8008598 <memcpy+0xc>
 8008596:	bd10      	pop	{r4, pc}
 8008598:	f811 4b01 	ldrb.w	r4, [r1], #1
 800859c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085a0:	e7f7      	b.n	8008592 <memcpy+0x6>

080085a2 <memset>:
 80085a2:	4402      	add	r2, r0
 80085a4:	4603      	mov	r3, r0
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d100      	bne.n	80085ac <memset+0xa>
 80085aa:	4770      	bx	lr
 80085ac:	f803 1b01 	strb.w	r1, [r3], #1
 80085b0:	e7f9      	b.n	80085a6 <memset+0x4>
	...

080085b4 <iprintf>:
 80085b4:	b40f      	push	{r0, r1, r2, r3}
 80085b6:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <iprintf+0x2c>)
 80085b8:	b513      	push	{r0, r1, r4, lr}
 80085ba:	681c      	ldr	r4, [r3, #0]
 80085bc:	b124      	cbz	r4, 80085c8 <iprintf+0x14>
 80085be:	69a3      	ldr	r3, [r4, #24]
 80085c0:	b913      	cbnz	r3, 80085c8 <iprintf+0x14>
 80085c2:	4620      	mov	r0, r4
 80085c4:	f000 fa8c 	bl	8008ae0 <__sinit>
 80085c8:	ab05      	add	r3, sp, #20
 80085ca:	9a04      	ldr	r2, [sp, #16]
 80085cc:	68a1      	ldr	r1, [r4, #8]
 80085ce:	4620      	mov	r0, r4
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	f000 fc4d 	bl	8008e70 <_vfiprintf_r>
 80085d6:	b002      	add	sp, #8
 80085d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085dc:	b004      	add	sp, #16
 80085de:	4770      	bx	lr
 80085e0:	20000028 	.word	0x20000028

080085e4 <putchar>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	4b08      	ldr	r3, [pc, #32]	; (8008608 <putchar+0x24>)
 80085e8:	4605      	mov	r5, r0
 80085ea:	681c      	ldr	r4, [r3, #0]
 80085ec:	b124      	cbz	r4, 80085f8 <putchar+0x14>
 80085ee:	69a3      	ldr	r3, [r4, #24]
 80085f0:	b913      	cbnz	r3, 80085f8 <putchar+0x14>
 80085f2:	4620      	mov	r0, r4
 80085f4:	f000 fa74 	bl	8008ae0 <__sinit>
 80085f8:	68a2      	ldr	r2, [r4, #8]
 80085fa:	4629      	mov	r1, r5
 80085fc:	4620      	mov	r0, r4
 80085fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008602:	f000 bed5 	b.w	80093b0 <_putc_r>
 8008606:	bf00      	nop
 8008608:	20000028 	.word	0x20000028

0800860c <_puts_r>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	460e      	mov	r6, r1
 8008610:	4605      	mov	r5, r0
 8008612:	b118      	cbz	r0, 800861c <_puts_r+0x10>
 8008614:	6983      	ldr	r3, [r0, #24]
 8008616:	b90b      	cbnz	r3, 800861c <_puts_r+0x10>
 8008618:	f000 fa62 	bl	8008ae0 <__sinit>
 800861c:	69ab      	ldr	r3, [r5, #24]
 800861e:	68ac      	ldr	r4, [r5, #8]
 8008620:	b913      	cbnz	r3, 8008628 <_puts_r+0x1c>
 8008622:	4628      	mov	r0, r5
 8008624:	f000 fa5c 	bl	8008ae0 <__sinit>
 8008628:	4b23      	ldr	r3, [pc, #140]	; (80086b8 <_puts_r+0xac>)
 800862a:	429c      	cmp	r4, r3
 800862c:	d117      	bne.n	800865e <_puts_r+0x52>
 800862e:	686c      	ldr	r4, [r5, #4]
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	071b      	lsls	r3, r3, #28
 8008634:	d51d      	bpl.n	8008672 <_puts_r+0x66>
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	b1db      	cbz	r3, 8008672 <_puts_r+0x66>
 800863a:	3e01      	subs	r6, #1
 800863c:	68a3      	ldr	r3, [r4, #8]
 800863e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008642:	3b01      	subs	r3, #1
 8008644:	60a3      	str	r3, [r4, #8]
 8008646:	b9e9      	cbnz	r1, 8008684 <_puts_r+0x78>
 8008648:	2b00      	cmp	r3, #0
 800864a:	da2e      	bge.n	80086aa <_puts_r+0x9e>
 800864c:	4622      	mov	r2, r4
 800864e:	210a      	movs	r1, #10
 8008650:	4628      	mov	r0, r5
 8008652:	f000 f897 	bl	8008784 <__swbuf_r>
 8008656:	3001      	adds	r0, #1
 8008658:	d011      	beq.n	800867e <_puts_r+0x72>
 800865a:	200a      	movs	r0, #10
 800865c:	e011      	b.n	8008682 <_puts_r+0x76>
 800865e:	4b17      	ldr	r3, [pc, #92]	; (80086bc <_puts_r+0xb0>)
 8008660:	429c      	cmp	r4, r3
 8008662:	d101      	bne.n	8008668 <_puts_r+0x5c>
 8008664:	68ac      	ldr	r4, [r5, #8]
 8008666:	e7e3      	b.n	8008630 <_puts_r+0x24>
 8008668:	4b15      	ldr	r3, [pc, #84]	; (80086c0 <_puts_r+0xb4>)
 800866a:	429c      	cmp	r4, r3
 800866c:	bf08      	it	eq
 800866e:	68ec      	ldreq	r4, [r5, #12]
 8008670:	e7de      	b.n	8008630 <_puts_r+0x24>
 8008672:	4621      	mov	r1, r4
 8008674:	4628      	mov	r0, r5
 8008676:	f000 f8d7 	bl	8008828 <__swsetup_r>
 800867a:	2800      	cmp	r0, #0
 800867c:	d0dd      	beq.n	800863a <_puts_r+0x2e>
 800867e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008682:	bd70      	pop	{r4, r5, r6, pc}
 8008684:	2b00      	cmp	r3, #0
 8008686:	da04      	bge.n	8008692 <_puts_r+0x86>
 8008688:	69a2      	ldr	r2, [r4, #24]
 800868a:	429a      	cmp	r2, r3
 800868c:	dc06      	bgt.n	800869c <_puts_r+0x90>
 800868e:	290a      	cmp	r1, #10
 8008690:	d004      	beq.n	800869c <_puts_r+0x90>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	6022      	str	r2, [r4, #0]
 8008698:	7019      	strb	r1, [r3, #0]
 800869a:	e7cf      	b.n	800863c <_puts_r+0x30>
 800869c:	4622      	mov	r2, r4
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f870 	bl	8008784 <__swbuf_r>
 80086a4:	3001      	adds	r0, #1
 80086a6:	d1c9      	bne.n	800863c <_puts_r+0x30>
 80086a8:	e7e9      	b.n	800867e <_puts_r+0x72>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	200a      	movs	r0, #10
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	6022      	str	r2, [r4, #0]
 80086b2:	7018      	strb	r0, [r3, #0]
 80086b4:	e7e5      	b.n	8008682 <_puts_r+0x76>
 80086b6:	bf00      	nop
 80086b8:	08009a00 	.word	0x08009a00
 80086bc:	08009a20 	.word	0x08009a20
 80086c0:	080099e0 	.word	0x080099e0

080086c4 <puts>:
 80086c4:	4b02      	ldr	r3, [pc, #8]	; (80086d0 <puts+0xc>)
 80086c6:	4601      	mov	r1, r0
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	f7ff bf9f 	b.w	800860c <_puts_r>
 80086ce:	bf00      	nop
 80086d0:	20000028 	.word	0x20000028

080086d4 <srand>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4b0d      	ldr	r3, [pc, #52]	; (800870c <srand+0x38>)
 80086d8:	4605      	mov	r5, r0
 80086da:	681c      	ldr	r4, [r3, #0]
 80086dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80086de:	b97b      	cbnz	r3, 8008700 <srand+0x2c>
 80086e0:	2018      	movs	r0, #24
 80086e2:	f000 faeb 	bl	8008cbc <malloc>
 80086e6:	4a0a      	ldr	r2, [pc, #40]	; (8008710 <srand+0x3c>)
 80086e8:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <srand+0x40>)
 80086ea:	63a0      	str	r0, [r4, #56]	; 0x38
 80086ec:	e9c0 2300 	strd	r2, r3, [r0]
 80086f0:	4b09      	ldr	r3, [pc, #36]	; (8008718 <srand+0x44>)
 80086f2:	2201      	movs	r2, #1
 80086f4:	6083      	str	r3, [r0, #8]
 80086f6:	230b      	movs	r3, #11
 80086f8:	8183      	strh	r3, [r0, #12]
 80086fa:	2300      	movs	r3, #0
 80086fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008700:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008702:	2200      	movs	r2, #0
 8008704:	611d      	str	r5, [r3, #16]
 8008706:	615a      	str	r2, [r3, #20]
 8008708:	bd38      	pop	{r3, r4, r5, pc}
 800870a:	bf00      	nop
 800870c:	20000028 	.word	0x20000028
 8008710:	abcd330e 	.word	0xabcd330e
 8008714:	e66d1234 	.word	0xe66d1234
 8008718:	0005deec 	.word	0x0005deec

0800871c <rand>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4b13      	ldr	r3, [pc, #76]	; (800876c <rand+0x50>)
 8008720:	681c      	ldr	r4, [r3, #0]
 8008722:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008724:	b97b      	cbnz	r3, 8008746 <rand+0x2a>
 8008726:	2018      	movs	r0, #24
 8008728:	f000 fac8 	bl	8008cbc <malloc>
 800872c:	4a10      	ldr	r2, [pc, #64]	; (8008770 <rand+0x54>)
 800872e:	4b11      	ldr	r3, [pc, #68]	; (8008774 <rand+0x58>)
 8008730:	63a0      	str	r0, [r4, #56]	; 0x38
 8008732:	e9c0 2300 	strd	r2, r3, [r0]
 8008736:	4b10      	ldr	r3, [pc, #64]	; (8008778 <rand+0x5c>)
 8008738:	2201      	movs	r2, #1
 800873a:	6083      	str	r3, [r0, #8]
 800873c:	230b      	movs	r3, #11
 800873e:	8183      	strh	r3, [r0, #12]
 8008740:	2300      	movs	r3, #0
 8008742:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008746:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008748:	480c      	ldr	r0, [pc, #48]	; (800877c <rand+0x60>)
 800874a:	690a      	ldr	r2, [r1, #16]
 800874c:	694b      	ldr	r3, [r1, #20]
 800874e:	4c0c      	ldr	r4, [pc, #48]	; (8008780 <rand+0x64>)
 8008750:	4350      	muls	r0, r2
 8008752:	fb04 0003 	mla	r0, r4, r3, r0
 8008756:	fba2 2304 	umull	r2, r3, r2, r4
 800875a:	4403      	add	r3, r0
 800875c:	1c54      	adds	r4, r2, #1
 800875e:	f143 0500 	adc.w	r5, r3, #0
 8008762:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8008766:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	20000028 	.word	0x20000028
 8008770:	abcd330e 	.word	0xabcd330e
 8008774:	e66d1234 	.word	0xe66d1234
 8008778:	0005deec 	.word	0x0005deec
 800877c:	5851f42d 	.word	0x5851f42d
 8008780:	4c957f2d 	.word	0x4c957f2d

08008784 <__swbuf_r>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	460e      	mov	r6, r1
 8008788:	4614      	mov	r4, r2
 800878a:	4605      	mov	r5, r0
 800878c:	b118      	cbz	r0, 8008796 <__swbuf_r+0x12>
 800878e:	6983      	ldr	r3, [r0, #24]
 8008790:	b90b      	cbnz	r3, 8008796 <__swbuf_r+0x12>
 8008792:	f000 f9a5 	bl	8008ae0 <__sinit>
 8008796:	4b21      	ldr	r3, [pc, #132]	; (800881c <__swbuf_r+0x98>)
 8008798:	429c      	cmp	r4, r3
 800879a:	d12a      	bne.n	80087f2 <__swbuf_r+0x6e>
 800879c:	686c      	ldr	r4, [r5, #4]
 800879e:	69a3      	ldr	r3, [r4, #24]
 80087a0:	60a3      	str	r3, [r4, #8]
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	071a      	lsls	r2, r3, #28
 80087a6:	d52e      	bpl.n	8008806 <__swbuf_r+0x82>
 80087a8:	6923      	ldr	r3, [r4, #16]
 80087aa:	b363      	cbz	r3, 8008806 <__swbuf_r+0x82>
 80087ac:	6923      	ldr	r3, [r4, #16]
 80087ae:	b2f6      	uxtb	r6, r6
 80087b0:	6820      	ldr	r0, [r4, #0]
 80087b2:	4637      	mov	r7, r6
 80087b4:	1ac0      	subs	r0, r0, r3
 80087b6:	6963      	ldr	r3, [r4, #20]
 80087b8:	4283      	cmp	r3, r0
 80087ba:	dc04      	bgt.n	80087c6 <__swbuf_r+0x42>
 80087bc:	4621      	mov	r1, r4
 80087be:	4628      	mov	r0, r5
 80087c0:	f000 f924 	bl	8008a0c <_fflush_r>
 80087c4:	bb28      	cbnz	r0, 8008812 <__swbuf_r+0x8e>
 80087c6:	68a3      	ldr	r3, [r4, #8]
 80087c8:	3001      	adds	r0, #1
 80087ca:	3b01      	subs	r3, #1
 80087cc:	60a3      	str	r3, [r4, #8]
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	6022      	str	r2, [r4, #0]
 80087d4:	701e      	strb	r6, [r3, #0]
 80087d6:	6963      	ldr	r3, [r4, #20]
 80087d8:	4283      	cmp	r3, r0
 80087da:	d004      	beq.n	80087e6 <__swbuf_r+0x62>
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	07db      	lsls	r3, r3, #31
 80087e0:	d519      	bpl.n	8008816 <__swbuf_r+0x92>
 80087e2:	2e0a      	cmp	r6, #10
 80087e4:	d117      	bne.n	8008816 <__swbuf_r+0x92>
 80087e6:	4621      	mov	r1, r4
 80087e8:	4628      	mov	r0, r5
 80087ea:	f000 f90f 	bl	8008a0c <_fflush_r>
 80087ee:	b190      	cbz	r0, 8008816 <__swbuf_r+0x92>
 80087f0:	e00f      	b.n	8008812 <__swbuf_r+0x8e>
 80087f2:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <__swbuf_r+0x9c>)
 80087f4:	429c      	cmp	r4, r3
 80087f6:	d101      	bne.n	80087fc <__swbuf_r+0x78>
 80087f8:	68ac      	ldr	r4, [r5, #8]
 80087fa:	e7d0      	b.n	800879e <__swbuf_r+0x1a>
 80087fc:	4b09      	ldr	r3, [pc, #36]	; (8008824 <__swbuf_r+0xa0>)
 80087fe:	429c      	cmp	r4, r3
 8008800:	bf08      	it	eq
 8008802:	68ec      	ldreq	r4, [r5, #12]
 8008804:	e7cb      	b.n	800879e <__swbuf_r+0x1a>
 8008806:	4621      	mov	r1, r4
 8008808:	4628      	mov	r0, r5
 800880a:	f000 f80d 	bl	8008828 <__swsetup_r>
 800880e:	2800      	cmp	r0, #0
 8008810:	d0cc      	beq.n	80087ac <__swbuf_r+0x28>
 8008812:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008816:	4638      	mov	r0, r7
 8008818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800881a:	bf00      	nop
 800881c:	08009a00 	.word	0x08009a00
 8008820:	08009a20 	.word	0x08009a20
 8008824:	080099e0 	.word	0x080099e0

08008828 <__swsetup_r>:
 8008828:	4b32      	ldr	r3, [pc, #200]	; (80088f4 <__swsetup_r+0xcc>)
 800882a:	b570      	push	{r4, r5, r6, lr}
 800882c:	681d      	ldr	r5, [r3, #0]
 800882e:	4606      	mov	r6, r0
 8008830:	460c      	mov	r4, r1
 8008832:	b125      	cbz	r5, 800883e <__swsetup_r+0x16>
 8008834:	69ab      	ldr	r3, [r5, #24]
 8008836:	b913      	cbnz	r3, 800883e <__swsetup_r+0x16>
 8008838:	4628      	mov	r0, r5
 800883a:	f000 f951 	bl	8008ae0 <__sinit>
 800883e:	4b2e      	ldr	r3, [pc, #184]	; (80088f8 <__swsetup_r+0xd0>)
 8008840:	429c      	cmp	r4, r3
 8008842:	d10f      	bne.n	8008864 <__swsetup_r+0x3c>
 8008844:	686c      	ldr	r4, [r5, #4]
 8008846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884a:	b29a      	uxth	r2, r3
 800884c:	0715      	lsls	r5, r2, #28
 800884e:	d42c      	bmi.n	80088aa <__swsetup_r+0x82>
 8008850:	06d0      	lsls	r0, r2, #27
 8008852:	d411      	bmi.n	8008878 <__swsetup_r+0x50>
 8008854:	2209      	movs	r2, #9
 8008856:	6032      	str	r2, [r6, #0]
 8008858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800885c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	e03e      	b.n	80088e2 <__swsetup_r+0xba>
 8008864:	4b25      	ldr	r3, [pc, #148]	; (80088fc <__swsetup_r+0xd4>)
 8008866:	429c      	cmp	r4, r3
 8008868:	d101      	bne.n	800886e <__swsetup_r+0x46>
 800886a:	68ac      	ldr	r4, [r5, #8]
 800886c:	e7eb      	b.n	8008846 <__swsetup_r+0x1e>
 800886e:	4b24      	ldr	r3, [pc, #144]	; (8008900 <__swsetup_r+0xd8>)
 8008870:	429c      	cmp	r4, r3
 8008872:	bf08      	it	eq
 8008874:	68ec      	ldreq	r4, [r5, #12]
 8008876:	e7e6      	b.n	8008846 <__swsetup_r+0x1e>
 8008878:	0751      	lsls	r1, r2, #29
 800887a:	d512      	bpl.n	80088a2 <__swsetup_r+0x7a>
 800887c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800887e:	b141      	cbz	r1, 8008892 <__swsetup_r+0x6a>
 8008880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008884:	4299      	cmp	r1, r3
 8008886:	d002      	beq.n	800888e <__swsetup_r+0x66>
 8008888:	4630      	mov	r0, r6
 800888a:	f000 fa1f 	bl	8008ccc <_free_r>
 800888e:	2300      	movs	r3, #0
 8008890:	6363      	str	r3, [r4, #52]	; 0x34
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008898:	81a3      	strh	r3, [r4, #12]
 800889a:	2300      	movs	r3, #0
 800889c:	6063      	str	r3, [r4, #4]
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	f043 0308 	orr.w	r3, r3, #8
 80088a8:	81a3      	strh	r3, [r4, #12]
 80088aa:	6923      	ldr	r3, [r4, #16]
 80088ac:	b94b      	cbnz	r3, 80088c2 <__swsetup_r+0x9a>
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088b8:	d003      	beq.n	80088c2 <__swsetup_r+0x9a>
 80088ba:	4621      	mov	r1, r4
 80088bc:	4630      	mov	r0, r6
 80088be:	f000 f9bd 	bl	8008c3c <__smakebuf_r>
 80088c2:	89a2      	ldrh	r2, [r4, #12]
 80088c4:	f012 0301 	ands.w	r3, r2, #1
 80088c8:	d00c      	beq.n	80088e4 <__swsetup_r+0xbc>
 80088ca:	2300      	movs	r3, #0
 80088cc:	60a3      	str	r3, [r4, #8]
 80088ce:	6963      	ldr	r3, [r4, #20]
 80088d0:	425b      	negs	r3, r3
 80088d2:	61a3      	str	r3, [r4, #24]
 80088d4:	6923      	ldr	r3, [r4, #16]
 80088d6:	b953      	cbnz	r3, 80088ee <__swsetup_r+0xc6>
 80088d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80088e0:	d1ba      	bne.n	8008858 <__swsetup_r+0x30>
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	0792      	lsls	r2, r2, #30
 80088e6:	bf58      	it	pl
 80088e8:	6963      	ldrpl	r3, [r4, #20]
 80088ea:	60a3      	str	r3, [r4, #8]
 80088ec:	e7f2      	b.n	80088d4 <__swsetup_r+0xac>
 80088ee:	2000      	movs	r0, #0
 80088f0:	e7f7      	b.n	80088e2 <__swsetup_r+0xba>
 80088f2:	bf00      	nop
 80088f4:	20000028 	.word	0x20000028
 80088f8:	08009a00 	.word	0x08009a00
 80088fc:	08009a20 	.word	0x08009a20
 8008900:	080099e0 	.word	0x080099e0

08008904 <__sflush_r>:
 8008904:	898a      	ldrh	r2, [r1, #12]
 8008906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800890a:	4605      	mov	r5, r0
 800890c:	0710      	lsls	r0, r2, #28
 800890e:	460c      	mov	r4, r1
 8008910:	d458      	bmi.n	80089c4 <__sflush_r+0xc0>
 8008912:	684b      	ldr	r3, [r1, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	dc05      	bgt.n	8008924 <__sflush_r+0x20>
 8008918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800891a:	2b00      	cmp	r3, #0
 800891c:	dc02      	bgt.n	8008924 <__sflush_r+0x20>
 800891e:	2000      	movs	r0, #0
 8008920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008926:	2e00      	cmp	r6, #0
 8008928:	d0f9      	beq.n	800891e <__sflush_r+0x1a>
 800892a:	2300      	movs	r3, #0
 800892c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008930:	682f      	ldr	r7, [r5, #0]
 8008932:	6a21      	ldr	r1, [r4, #32]
 8008934:	602b      	str	r3, [r5, #0]
 8008936:	d032      	beq.n	800899e <__sflush_r+0x9a>
 8008938:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	075a      	lsls	r2, r3, #29
 800893e:	d505      	bpl.n	800894c <__sflush_r+0x48>
 8008940:	6863      	ldr	r3, [r4, #4]
 8008942:	1ac0      	subs	r0, r0, r3
 8008944:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008946:	b10b      	cbz	r3, 800894c <__sflush_r+0x48>
 8008948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800894a:	1ac0      	subs	r0, r0, r3
 800894c:	2300      	movs	r3, #0
 800894e:	4602      	mov	r2, r0
 8008950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008952:	4628      	mov	r0, r5
 8008954:	6a21      	ldr	r1, [r4, #32]
 8008956:	47b0      	blx	r6
 8008958:	1c43      	adds	r3, r0, #1
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	d106      	bne.n	800896c <__sflush_r+0x68>
 800895e:	6829      	ldr	r1, [r5, #0]
 8008960:	291d      	cmp	r1, #29
 8008962:	d847      	bhi.n	80089f4 <__sflush_r+0xf0>
 8008964:	4a28      	ldr	r2, [pc, #160]	; (8008a08 <__sflush_r+0x104>)
 8008966:	40ca      	lsrs	r2, r1
 8008968:	07d6      	lsls	r6, r2, #31
 800896a:	d543      	bpl.n	80089f4 <__sflush_r+0xf0>
 800896c:	2200      	movs	r2, #0
 800896e:	04d9      	lsls	r1, r3, #19
 8008970:	6062      	str	r2, [r4, #4]
 8008972:	6922      	ldr	r2, [r4, #16]
 8008974:	6022      	str	r2, [r4, #0]
 8008976:	d504      	bpl.n	8008982 <__sflush_r+0x7e>
 8008978:	1c42      	adds	r2, r0, #1
 800897a:	d101      	bne.n	8008980 <__sflush_r+0x7c>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	b903      	cbnz	r3, 8008982 <__sflush_r+0x7e>
 8008980:	6560      	str	r0, [r4, #84]	; 0x54
 8008982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008984:	602f      	str	r7, [r5, #0]
 8008986:	2900      	cmp	r1, #0
 8008988:	d0c9      	beq.n	800891e <__sflush_r+0x1a>
 800898a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800898e:	4299      	cmp	r1, r3
 8008990:	d002      	beq.n	8008998 <__sflush_r+0x94>
 8008992:	4628      	mov	r0, r5
 8008994:	f000 f99a 	bl	8008ccc <_free_r>
 8008998:	2000      	movs	r0, #0
 800899a:	6360      	str	r0, [r4, #52]	; 0x34
 800899c:	e7c0      	b.n	8008920 <__sflush_r+0x1c>
 800899e:	2301      	movs	r3, #1
 80089a0:	4628      	mov	r0, r5
 80089a2:	47b0      	blx	r6
 80089a4:	1c41      	adds	r1, r0, #1
 80089a6:	d1c8      	bne.n	800893a <__sflush_r+0x36>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0c5      	beq.n	800893a <__sflush_r+0x36>
 80089ae:	2b1d      	cmp	r3, #29
 80089b0:	d001      	beq.n	80089b6 <__sflush_r+0xb2>
 80089b2:	2b16      	cmp	r3, #22
 80089b4:	d101      	bne.n	80089ba <__sflush_r+0xb6>
 80089b6:	602f      	str	r7, [r5, #0]
 80089b8:	e7b1      	b.n	800891e <__sflush_r+0x1a>
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	e7ad      	b.n	8008920 <__sflush_r+0x1c>
 80089c4:	690f      	ldr	r7, [r1, #16]
 80089c6:	2f00      	cmp	r7, #0
 80089c8:	d0a9      	beq.n	800891e <__sflush_r+0x1a>
 80089ca:	0793      	lsls	r3, r2, #30
 80089cc:	680e      	ldr	r6, [r1, #0]
 80089ce:	600f      	str	r7, [r1, #0]
 80089d0:	bf0c      	ite	eq
 80089d2:	694b      	ldreq	r3, [r1, #20]
 80089d4:	2300      	movne	r3, #0
 80089d6:	eba6 0807 	sub.w	r8, r6, r7
 80089da:	608b      	str	r3, [r1, #8]
 80089dc:	f1b8 0f00 	cmp.w	r8, #0
 80089e0:	dd9d      	ble.n	800891e <__sflush_r+0x1a>
 80089e2:	4643      	mov	r3, r8
 80089e4:	463a      	mov	r2, r7
 80089e6:	6a21      	ldr	r1, [r4, #32]
 80089e8:	4628      	mov	r0, r5
 80089ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089ec:	47b0      	blx	r6
 80089ee:	2800      	cmp	r0, #0
 80089f0:	dc06      	bgt.n	8008a00 <__sflush_r+0xfc>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	e78f      	b.n	8008920 <__sflush_r+0x1c>
 8008a00:	4407      	add	r7, r0
 8008a02:	eba8 0800 	sub.w	r8, r8, r0
 8008a06:	e7e9      	b.n	80089dc <__sflush_r+0xd8>
 8008a08:	20400001 	.word	0x20400001

08008a0c <_fflush_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	690b      	ldr	r3, [r1, #16]
 8008a10:	4605      	mov	r5, r0
 8008a12:	460c      	mov	r4, r1
 8008a14:	b1db      	cbz	r3, 8008a4e <_fflush_r+0x42>
 8008a16:	b118      	cbz	r0, 8008a20 <_fflush_r+0x14>
 8008a18:	6983      	ldr	r3, [r0, #24]
 8008a1a:	b90b      	cbnz	r3, 8008a20 <_fflush_r+0x14>
 8008a1c:	f000 f860 	bl	8008ae0 <__sinit>
 8008a20:	4b0c      	ldr	r3, [pc, #48]	; (8008a54 <_fflush_r+0x48>)
 8008a22:	429c      	cmp	r4, r3
 8008a24:	d109      	bne.n	8008a3a <_fflush_r+0x2e>
 8008a26:	686c      	ldr	r4, [r5, #4]
 8008a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a2c:	b17b      	cbz	r3, 8008a4e <_fflush_r+0x42>
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4628      	mov	r0, r5
 8008a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a36:	f7ff bf65 	b.w	8008904 <__sflush_r>
 8008a3a:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <_fflush_r+0x4c>)
 8008a3c:	429c      	cmp	r4, r3
 8008a3e:	d101      	bne.n	8008a44 <_fflush_r+0x38>
 8008a40:	68ac      	ldr	r4, [r5, #8]
 8008a42:	e7f1      	b.n	8008a28 <_fflush_r+0x1c>
 8008a44:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <_fflush_r+0x50>)
 8008a46:	429c      	cmp	r4, r3
 8008a48:	bf08      	it	eq
 8008a4a:	68ec      	ldreq	r4, [r5, #12]
 8008a4c:	e7ec      	b.n	8008a28 <_fflush_r+0x1c>
 8008a4e:	2000      	movs	r0, #0
 8008a50:	bd38      	pop	{r3, r4, r5, pc}
 8008a52:	bf00      	nop
 8008a54:	08009a00 	.word	0x08009a00
 8008a58:	08009a20 	.word	0x08009a20
 8008a5c:	080099e0 	.word	0x080099e0

08008a60 <std>:
 8008a60:	2300      	movs	r3, #0
 8008a62:	b510      	push	{r4, lr}
 8008a64:	4604      	mov	r4, r0
 8008a66:	6083      	str	r3, [r0, #8]
 8008a68:	8181      	strh	r1, [r0, #12]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6643      	str	r3, [r0, #100]	; 0x64
 8008a6e:	81c2      	strh	r2, [r0, #14]
 8008a70:	2208      	movs	r2, #8
 8008a72:	6183      	str	r3, [r0, #24]
 8008a74:	e9c0 3300 	strd	r3, r3, [r0]
 8008a78:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a7c:	305c      	adds	r0, #92	; 0x5c
 8008a7e:	f7ff fd90 	bl	80085a2 <memset>
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <std+0x38>)
 8008a84:	6224      	str	r4, [r4, #32]
 8008a86:	6263      	str	r3, [r4, #36]	; 0x24
 8008a88:	4b04      	ldr	r3, [pc, #16]	; (8008a9c <std+0x3c>)
 8008a8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a8c:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <std+0x40>)
 8008a8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a90:	4b04      	ldr	r3, [pc, #16]	; (8008aa4 <std+0x44>)
 8008a92:	6323      	str	r3, [r4, #48]	; 0x30
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	bf00      	nop
 8008a98:	0800943d 	.word	0x0800943d
 8008a9c:	0800945f 	.word	0x0800945f
 8008aa0:	08009497 	.word	0x08009497
 8008aa4:	080094bb 	.word	0x080094bb

08008aa8 <_cleanup_r>:
 8008aa8:	4901      	ldr	r1, [pc, #4]	; (8008ab0 <_cleanup_r+0x8>)
 8008aaa:	f000 b885 	b.w	8008bb8 <_fwalk_reent>
 8008aae:	bf00      	nop
 8008ab0:	08008a0d 	.word	0x08008a0d

08008ab4 <__sfmoreglue>:
 8008ab4:	b570      	push	{r4, r5, r6, lr}
 8008ab6:	1e4a      	subs	r2, r1, #1
 8008ab8:	2568      	movs	r5, #104	; 0x68
 8008aba:	460e      	mov	r6, r1
 8008abc:	4355      	muls	r5, r2
 8008abe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ac2:	f000 f951 	bl	8008d68 <_malloc_r>
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	b140      	cbz	r0, 8008adc <__sfmoreglue+0x28>
 8008aca:	2100      	movs	r1, #0
 8008acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ad0:	e9c0 1600 	strd	r1, r6, [r0]
 8008ad4:	300c      	adds	r0, #12
 8008ad6:	60a0      	str	r0, [r4, #8]
 8008ad8:	f7ff fd63 	bl	80085a2 <memset>
 8008adc:	4620      	mov	r0, r4
 8008ade:	bd70      	pop	{r4, r5, r6, pc}

08008ae0 <__sinit>:
 8008ae0:	6983      	ldr	r3, [r0, #24]
 8008ae2:	b510      	push	{r4, lr}
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	bb33      	cbnz	r3, 8008b36 <__sinit+0x56>
 8008ae8:	6503      	str	r3, [r0, #80]	; 0x50
 8008aea:	4a13      	ldr	r2, [pc, #76]	; (8008b38 <__sinit+0x58>)
 8008aec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008af0:	4b12      	ldr	r3, [pc, #72]	; (8008b3c <__sinit+0x5c>)
 8008af2:	6282      	str	r2, [r0, #40]	; 0x28
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4298      	cmp	r0, r3
 8008af8:	bf04      	itt	eq
 8008afa:	2301      	moveq	r3, #1
 8008afc:	6183      	streq	r3, [r0, #24]
 8008afe:	f000 f81f 	bl	8008b40 <__sfp>
 8008b02:	6060      	str	r0, [r4, #4]
 8008b04:	4620      	mov	r0, r4
 8008b06:	f000 f81b 	bl	8008b40 <__sfp>
 8008b0a:	60a0      	str	r0, [r4, #8]
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f000 f817 	bl	8008b40 <__sfp>
 8008b12:	2200      	movs	r2, #0
 8008b14:	60e0      	str	r0, [r4, #12]
 8008b16:	2104      	movs	r1, #4
 8008b18:	6860      	ldr	r0, [r4, #4]
 8008b1a:	f7ff ffa1 	bl	8008a60 <std>
 8008b1e:	2201      	movs	r2, #1
 8008b20:	2109      	movs	r1, #9
 8008b22:	68a0      	ldr	r0, [r4, #8]
 8008b24:	f7ff ff9c 	bl	8008a60 <std>
 8008b28:	2202      	movs	r2, #2
 8008b2a:	2112      	movs	r1, #18
 8008b2c:	68e0      	ldr	r0, [r4, #12]
 8008b2e:	f7ff ff97 	bl	8008a60 <std>
 8008b32:	2301      	movs	r3, #1
 8008b34:	61a3      	str	r3, [r4, #24]
 8008b36:	bd10      	pop	{r4, pc}
 8008b38:	08008aa9 	.word	0x08008aa9
 8008b3c:	080099dc 	.word	0x080099dc

08008b40 <__sfp>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <__sfp+0x70>)
 8008b44:	4607      	mov	r7, r0
 8008b46:	681e      	ldr	r6, [r3, #0]
 8008b48:	69b3      	ldr	r3, [r6, #24]
 8008b4a:	b913      	cbnz	r3, 8008b52 <__sfp+0x12>
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	f7ff ffc7 	bl	8008ae0 <__sinit>
 8008b52:	3648      	adds	r6, #72	; 0x48
 8008b54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	d503      	bpl.n	8008b64 <__sfp+0x24>
 8008b5c:	6833      	ldr	r3, [r6, #0]
 8008b5e:	b133      	cbz	r3, 8008b6e <__sfp+0x2e>
 8008b60:	6836      	ldr	r6, [r6, #0]
 8008b62:	e7f7      	b.n	8008b54 <__sfp+0x14>
 8008b64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b68:	b16d      	cbz	r5, 8008b86 <__sfp+0x46>
 8008b6a:	3468      	adds	r4, #104	; 0x68
 8008b6c:	e7f4      	b.n	8008b58 <__sfp+0x18>
 8008b6e:	2104      	movs	r1, #4
 8008b70:	4638      	mov	r0, r7
 8008b72:	f7ff ff9f 	bl	8008ab4 <__sfmoreglue>
 8008b76:	6030      	str	r0, [r6, #0]
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d1f1      	bne.n	8008b60 <__sfp+0x20>
 8008b7c:	230c      	movs	r3, #12
 8008b7e:	4604      	mov	r4, r0
 8008b80:	603b      	str	r3, [r7, #0]
 8008b82:	4620      	mov	r0, r4
 8008b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b86:	4b0b      	ldr	r3, [pc, #44]	; (8008bb4 <__sfp+0x74>)
 8008b88:	2208      	movs	r2, #8
 8008b8a:	6665      	str	r5, [r4, #100]	; 0x64
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	60a5      	str	r5, [r4, #8]
 8008b90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b94:	e9c4 5500 	strd	r5, r5, [r4]
 8008b98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008b9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008ba0:	f7ff fcff 	bl	80085a2 <memset>
 8008ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bac:	e7e9      	b.n	8008b82 <__sfp+0x42>
 8008bae:	bf00      	nop
 8008bb0:	080099dc 	.word	0x080099dc
 8008bb4:	ffff0001 	.word	0xffff0001

08008bb8 <_fwalk_reent>:
 8008bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bbc:	4680      	mov	r8, r0
 8008bbe:	4689      	mov	r9, r1
 8008bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	b914      	cbnz	r4, 8008bce <_fwalk_reent+0x16>
 8008bc8:	4630      	mov	r0, r6
 8008bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008bd2:	3f01      	subs	r7, #1
 8008bd4:	d501      	bpl.n	8008bda <_fwalk_reent+0x22>
 8008bd6:	6824      	ldr	r4, [r4, #0]
 8008bd8:	e7f5      	b.n	8008bc6 <_fwalk_reent+0xe>
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d907      	bls.n	8008bf0 <_fwalk_reent+0x38>
 8008be0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008be4:	3301      	adds	r3, #1
 8008be6:	d003      	beq.n	8008bf0 <_fwalk_reent+0x38>
 8008be8:	4629      	mov	r1, r5
 8008bea:	4640      	mov	r0, r8
 8008bec:	47c8      	blx	r9
 8008bee:	4306      	orrs	r6, r0
 8008bf0:	3568      	adds	r5, #104	; 0x68
 8008bf2:	e7ee      	b.n	8008bd2 <_fwalk_reent+0x1a>

08008bf4 <__swhatbuf_r>:
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	460e      	mov	r6, r1
 8008bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfc:	b096      	sub	sp, #88	; 0x58
 8008bfe:	4614      	mov	r4, r2
 8008c00:	2900      	cmp	r1, #0
 8008c02:	461d      	mov	r5, r3
 8008c04:	da07      	bge.n	8008c16 <__swhatbuf_r+0x22>
 8008c06:	2300      	movs	r3, #0
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	89b3      	ldrh	r3, [r6, #12]
 8008c0c:	061a      	lsls	r2, r3, #24
 8008c0e:	d410      	bmi.n	8008c32 <__swhatbuf_r+0x3e>
 8008c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c14:	e00e      	b.n	8008c34 <__swhatbuf_r+0x40>
 8008c16:	466a      	mov	r2, sp
 8008c18:	f000 fc76 	bl	8009508 <_fstat_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	dbf2      	blt.n	8008c06 <__swhatbuf_r+0x12>
 8008c20:	9a01      	ldr	r2, [sp, #4]
 8008c22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c2a:	425a      	negs	r2, r3
 8008c2c:	415a      	adcs	r2, r3
 8008c2e:	602a      	str	r2, [r5, #0]
 8008c30:	e7ee      	b.n	8008c10 <__swhatbuf_r+0x1c>
 8008c32:	2340      	movs	r3, #64	; 0x40
 8008c34:	2000      	movs	r0, #0
 8008c36:	6023      	str	r3, [r4, #0]
 8008c38:	b016      	add	sp, #88	; 0x58
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}

08008c3c <__smakebuf_r>:
 8008c3c:	898b      	ldrh	r3, [r1, #12]
 8008c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c40:	079d      	lsls	r5, r3, #30
 8008c42:	4606      	mov	r6, r0
 8008c44:	460c      	mov	r4, r1
 8008c46:	d507      	bpl.n	8008c58 <__smakebuf_r+0x1c>
 8008c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	6123      	str	r3, [r4, #16]
 8008c50:	2301      	movs	r3, #1
 8008c52:	6163      	str	r3, [r4, #20]
 8008c54:	b002      	add	sp, #8
 8008c56:	bd70      	pop	{r4, r5, r6, pc}
 8008c58:	ab01      	add	r3, sp, #4
 8008c5a:	466a      	mov	r2, sp
 8008c5c:	f7ff ffca 	bl	8008bf4 <__swhatbuf_r>
 8008c60:	9900      	ldr	r1, [sp, #0]
 8008c62:	4605      	mov	r5, r0
 8008c64:	4630      	mov	r0, r6
 8008c66:	f000 f87f 	bl	8008d68 <_malloc_r>
 8008c6a:	b948      	cbnz	r0, 8008c80 <__smakebuf_r+0x44>
 8008c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c70:	059a      	lsls	r2, r3, #22
 8008c72:	d4ef      	bmi.n	8008c54 <__smakebuf_r+0x18>
 8008c74:	f023 0303 	bic.w	r3, r3, #3
 8008c78:	f043 0302 	orr.w	r3, r3, #2
 8008c7c:	81a3      	strh	r3, [r4, #12]
 8008c7e:	e7e3      	b.n	8008c48 <__smakebuf_r+0xc>
 8008c80:	4b0d      	ldr	r3, [pc, #52]	; (8008cb8 <__smakebuf_r+0x7c>)
 8008c82:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	6020      	str	r0, [r4, #0]
 8008c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c8c:	6120      	str	r0, [r4, #16]
 8008c8e:	81a3      	strh	r3, [r4, #12]
 8008c90:	9b00      	ldr	r3, [sp, #0]
 8008c92:	6163      	str	r3, [r4, #20]
 8008c94:	9b01      	ldr	r3, [sp, #4]
 8008c96:	b15b      	cbz	r3, 8008cb0 <__smakebuf_r+0x74>
 8008c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f000 fc45 	bl	800952c <_isatty_r>
 8008ca2:	b128      	cbz	r0, 8008cb0 <__smakebuf_r+0x74>
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	f023 0303 	bic.w	r3, r3, #3
 8008caa:	f043 0301 	orr.w	r3, r3, #1
 8008cae:	81a3      	strh	r3, [r4, #12]
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	431d      	orrs	r5, r3
 8008cb4:	81a5      	strh	r5, [r4, #12]
 8008cb6:	e7cd      	b.n	8008c54 <__smakebuf_r+0x18>
 8008cb8:	08008aa9 	.word	0x08008aa9

08008cbc <malloc>:
 8008cbc:	4b02      	ldr	r3, [pc, #8]	; (8008cc8 <malloc+0xc>)
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f000 b851 	b.w	8008d68 <_malloc_r>
 8008cc6:	bf00      	nop
 8008cc8:	20000028 	.word	0x20000028

08008ccc <_free_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4605      	mov	r5, r0
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	d045      	beq.n	8008d60 <_free_r+0x94>
 8008cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cd8:	1f0c      	subs	r4, r1, #4
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bfb8      	it	lt
 8008cde:	18e4      	addlt	r4, r4, r3
 8008ce0:	f000 fc54 	bl	800958c <__malloc_lock>
 8008ce4:	4a1f      	ldr	r2, [pc, #124]	; (8008d64 <_free_r+0x98>)
 8008ce6:	6813      	ldr	r3, [r2, #0]
 8008ce8:	4610      	mov	r0, r2
 8008cea:	b933      	cbnz	r3, 8008cfa <_free_r+0x2e>
 8008cec:	6063      	str	r3, [r4, #4]
 8008cee:	6014      	str	r4, [r2, #0]
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cf6:	f000 bc4a 	b.w	800958e <__malloc_unlock>
 8008cfa:	42a3      	cmp	r3, r4
 8008cfc:	d90c      	bls.n	8008d18 <_free_r+0x4c>
 8008cfe:	6821      	ldr	r1, [r4, #0]
 8008d00:	1862      	adds	r2, r4, r1
 8008d02:	4293      	cmp	r3, r2
 8008d04:	bf02      	ittt	eq
 8008d06:	681a      	ldreq	r2, [r3, #0]
 8008d08:	685b      	ldreq	r3, [r3, #4]
 8008d0a:	1852      	addeq	r2, r2, r1
 8008d0c:	6063      	str	r3, [r4, #4]
 8008d0e:	bf08      	it	eq
 8008d10:	6022      	streq	r2, [r4, #0]
 8008d12:	6004      	str	r4, [r0, #0]
 8008d14:	e7ec      	b.n	8008cf0 <_free_r+0x24>
 8008d16:	4613      	mov	r3, r2
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	b10a      	cbz	r2, 8008d20 <_free_r+0x54>
 8008d1c:	42a2      	cmp	r2, r4
 8008d1e:	d9fa      	bls.n	8008d16 <_free_r+0x4a>
 8008d20:	6819      	ldr	r1, [r3, #0]
 8008d22:	1858      	adds	r0, r3, r1
 8008d24:	42a0      	cmp	r0, r4
 8008d26:	d10b      	bne.n	8008d40 <_free_r+0x74>
 8008d28:	6820      	ldr	r0, [r4, #0]
 8008d2a:	4401      	add	r1, r0
 8008d2c:	1858      	adds	r0, r3, r1
 8008d2e:	6019      	str	r1, [r3, #0]
 8008d30:	4282      	cmp	r2, r0
 8008d32:	d1dd      	bne.n	8008cf0 <_free_r+0x24>
 8008d34:	6810      	ldr	r0, [r2, #0]
 8008d36:	6852      	ldr	r2, [r2, #4]
 8008d38:	4401      	add	r1, r0
 8008d3a:	605a      	str	r2, [r3, #4]
 8008d3c:	6019      	str	r1, [r3, #0]
 8008d3e:	e7d7      	b.n	8008cf0 <_free_r+0x24>
 8008d40:	d902      	bls.n	8008d48 <_free_r+0x7c>
 8008d42:	230c      	movs	r3, #12
 8008d44:	602b      	str	r3, [r5, #0]
 8008d46:	e7d3      	b.n	8008cf0 <_free_r+0x24>
 8008d48:	6820      	ldr	r0, [r4, #0]
 8008d4a:	1821      	adds	r1, r4, r0
 8008d4c:	428a      	cmp	r2, r1
 8008d4e:	bf02      	ittt	eq
 8008d50:	6811      	ldreq	r1, [r2, #0]
 8008d52:	6852      	ldreq	r2, [r2, #4]
 8008d54:	1809      	addeq	r1, r1, r0
 8008d56:	6062      	str	r2, [r4, #4]
 8008d58:	bf08      	it	eq
 8008d5a:	6021      	streq	r1, [r4, #0]
 8008d5c:	605c      	str	r4, [r3, #4]
 8008d5e:	e7c7      	b.n	8008cf0 <_free_r+0x24>
 8008d60:	bd38      	pop	{r3, r4, r5, pc}
 8008d62:	bf00      	nop
 8008d64:	200004d4 	.word	0x200004d4

08008d68 <_malloc_r>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	1ccd      	adds	r5, r1, #3
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	f025 0503 	bic.w	r5, r5, #3
 8008d72:	3508      	adds	r5, #8
 8008d74:	2d0c      	cmp	r5, #12
 8008d76:	bf38      	it	cc
 8008d78:	250c      	movcc	r5, #12
 8008d7a:	2d00      	cmp	r5, #0
 8008d7c:	db01      	blt.n	8008d82 <_malloc_r+0x1a>
 8008d7e:	42a9      	cmp	r1, r5
 8008d80:	d903      	bls.n	8008d8a <_malloc_r+0x22>
 8008d82:	230c      	movs	r3, #12
 8008d84:	6033      	str	r3, [r6, #0]
 8008d86:	2000      	movs	r0, #0
 8008d88:	bd70      	pop	{r4, r5, r6, pc}
 8008d8a:	f000 fbff 	bl	800958c <__malloc_lock>
 8008d8e:	4a21      	ldr	r2, [pc, #132]	; (8008e14 <_malloc_r+0xac>)
 8008d90:	6814      	ldr	r4, [r2, #0]
 8008d92:	4621      	mov	r1, r4
 8008d94:	b991      	cbnz	r1, 8008dbc <_malloc_r+0x54>
 8008d96:	4c20      	ldr	r4, [pc, #128]	; (8008e18 <_malloc_r+0xb0>)
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	b91b      	cbnz	r3, 8008da4 <_malloc_r+0x3c>
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f000 fb3d 	bl	800941c <_sbrk_r>
 8008da2:	6020      	str	r0, [r4, #0]
 8008da4:	4629      	mov	r1, r5
 8008da6:	4630      	mov	r0, r6
 8008da8:	f000 fb38 	bl	800941c <_sbrk_r>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d124      	bne.n	8008dfa <_malloc_r+0x92>
 8008db0:	230c      	movs	r3, #12
 8008db2:	4630      	mov	r0, r6
 8008db4:	6033      	str	r3, [r6, #0]
 8008db6:	f000 fbea 	bl	800958e <__malloc_unlock>
 8008dba:	e7e4      	b.n	8008d86 <_malloc_r+0x1e>
 8008dbc:	680b      	ldr	r3, [r1, #0]
 8008dbe:	1b5b      	subs	r3, r3, r5
 8008dc0:	d418      	bmi.n	8008df4 <_malloc_r+0x8c>
 8008dc2:	2b0b      	cmp	r3, #11
 8008dc4:	d90f      	bls.n	8008de6 <_malloc_r+0x7e>
 8008dc6:	18cc      	adds	r4, r1, r3
 8008dc8:	600b      	str	r3, [r1, #0]
 8008dca:	50cd      	str	r5, [r1, r3]
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f000 fbde 	bl	800958e <__malloc_unlock>
 8008dd2:	f104 000b 	add.w	r0, r4, #11
 8008dd6:	1d23      	adds	r3, r4, #4
 8008dd8:	f020 0007 	bic.w	r0, r0, #7
 8008ddc:	1ac3      	subs	r3, r0, r3
 8008dde:	d0d3      	beq.n	8008d88 <_malloc_r+0x20>
 8008de0:	425a      	negs	r2, r3
 8008de2:	50e2      	str	r2, [r4, r3]
 8008de4:	e7d0      	b.n	8008d88 <_malloc_r+0x20>
 8008de6:	428c      	cmp	r4, r1
 8008de8:	684b      	ldr	r3, [r1, #4]
 8008dea:	bf1a      	itte	ne
 8008dec:	6063      	strne	r3, [r4, #4]
 8008dee:	460c      	movne	r4, r1
 8008df0:	6013      	streq	r3, [r2, #0]
 8008df2:	e7eb      	b.n	8008dcc <_malloc_r+0x64>
 8008df4:	460c      	mov	r4, r1
 8008df6:	6849      	ldr	r1, [r1, #4]
 8008df8:	e7cc      	b.n	8008d94 <_malloc_r+0x2c>
 8008dfa:	1cc4      	adds	r4, r0, #3
 8008dfc:	f024 0403 	bic.w	r4, r4, #3
 8008e00:	42a0      	cmp	r0, r4
 8008e02:	d005      	beq.n	8008e10 <_malloc_r+0xa8>
 8008e04:	1a21      	subs	r1, r4, r0
 8008e06:	4630      	mov	r0, r6
 8008e08:	f000 fb08 	bl	800941c <_sbrk_r>
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	d0cf      	beq.n	8008db0 <_malloc_r+0x48>
 8008e10:	6025      	str	r5, [r4, #0]
 8008e12:	e7db      	b.n	8008dcc <_malloc_r+0x64>
 8008e14:	200004d4 	.word	0x200004d4
 8008e18:	200004d8 	.word	0x200004d8

08008e1c <__sfputc_r>:
 8008e1c:	6893      	ldr	r3, [r2, #8]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	6093      	str	r3, [r2, #8]
 8008e24:	b410      	push	{r4}
 8008e26:	da08      	bge.n	8008e3a <__sfputc_r+0x1e>
 8008e28:	6994      	ldr	r4, [r2, #24]
 8008e2a:	42a3      	cmp	r3, r4
 8008e2c:	db01      	blt.n	8008e32 <__sfputc_r+0x16>
 8008e2e:	290a      	cmp	r1, #10
 8008e30:	d103      	bne.n	8008e3a <__sfputc_r+0x1e>
 8008e32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e36:	f7ff bca5 	b.w	8008784 <__swbuf_r>
 8008e3a:	6813      	ldr	r3, [r2, #0]
 8008e3c:	1c58      	adds	r0, r3, #1
 8008e3e:	6010      	str	r0, [r2, #0]
 8008e40:	4608      	mov	r0, r1
 8008e42:	7019      	strb	r1, [r3, #0]
 8008e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <__sfputs_r>:
 8008e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	460f      	mov	r7, r1
 8008e50:	4614      	mov	r4, r2
 8008e52:	18d5      	adds	r5, r2, r3
 8008e54:	42ac      	cmp	r4, r5
 8008e56:	d101      	bne.n	8008e5c <__sfputs_r+0x12>
 8008e58:	2000      	movs	r0, #0
 8008e5a:	e007      	b.n	8008e6c <__sfputs_r+0x22>
 8008e5c:	463a      	mov	r2, r7
 8008e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7ff ffda 	bl	8008e1c <__sfputc_r>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d1f3      	bne.n	8008e54 <__sfputs_r+0xa>
 8008e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e70 <_vfiprintf_r>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	460c      	mov	r4, r1
 8008e76:	b09d      	sub	sp, #116	; 0x74
 8008e78:	4617      	mov	r7, r2
 8008e7a:	461d      	mov	r5, r3
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	b118      	cbz	r0, 8008e88 <_vfiprintf_r+0x18>
 8008e80:	6983      	ldr	r3, [r0, #24]
 8008e82:	b90b      	cbnz	r3, 8008e88 <_vfiprintf_r+0x18>
 8008e84:	f7ff fe2c 	bl	8008ae0 <__sinit>
 8008e88:	4b7c      	ldr	r3, [pc, #496]	; (800907c <_vfiprintf_r+0x20c>)
 8008e8a:	429c      	cmp	r4, r3
 8008e8c:	d158      	bne.n	8008f40 <_vfiprintf_r+0xd0>
 8008e8e:	6874      	ldr	r4, [r6, #4]
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	0718      	lsls	r0, r3, #28
 8008e94:	d55e      	bpl.n	8008f54 <_vfiprintf_r+0xe4>
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d05b      	beq.n	8008f54 <_vfiprintf_r+0xe4>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f04f 0b01 	mov.w	fp, #1
 8008ea2:	9503      	str	r5, [sp, #12]
 8008ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea6:	2320      	movs	r3, #32
 8008ea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eac:	2330      	movs	r3, #48	; 0x30
 8008eae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eb2:	46b8      	mov	r8, r7
 8008eb4:	4645      	mov	r5, r8
 8008eb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008eba:	b10b      	cbz	r3, 8008ec0 <_vfiprintf_r+0x50>
 8008ebc:	2b25      	cmp	r3, #37	; 0x25
 8008ebe:	d154      	bne.n	8008f6a <_vfiprintf_r+0xfa>
 8008ec0:	ebb8 0a07 	subs.w	sl, r8, r7
 8008ec4:	d00b      	beq.n	8008ede <_vfiprintf_r+0x6e>
 8008ec6:	4653      	mov	r3, sl
 8008ec8:	463a      	mov	r2, r7
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f7ff ffbc 	bl	8008e4a <__sfputs_r>
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	f000 80c2 	beq.w	800905c <_vfiprintf_r+0x1ec>
 8008ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eda:	4453      	add	r3, sl
 8008edc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ede:	f898 3000 	ldrb.w	r3, [r8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 80ba 	beq.w	800905c <_vfiprintf_r+0x1ec>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	9307      	str	r3, [sp, #28]
 8008ef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ef6:	931a      	str	r3, [sp, #104]	; 0x68
 8008ef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008efc:	46a8      	mov	r8, r5
 8008efe:	2205      	movs	r2, #5
 8008f00:	485f      	ldr	r0, [pc, #380]	; (8009080 <_vfiprintf_r+0x210>)
 8008f02:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008f06:	f000 fb33 	bl	8009570 <memchr>
 8008f0a:	9b04      	ldr	r3, [sp, #16]
 8008f0c:	bb78      	cbnz	r0, 8008f6e <_vfiprintf_r+0xfe>
 8008f0e:	06d9      	lsls	r1, r3, #27
 8008f10:	bf44      	itt	mi
 8008f12:	2220      	movmi	r2, #32
 8008f14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f18:	071a      	lsls	r2, r3, #28
 8008f1a:	bf44      	itt	mi
 8008f1c:	222b      	movmi	r2, #43	; 0x2b
 8008f1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f22:	782a      	ldrb	r2, [r5, #0]
 8008f24:	2a2a      	cmp	r2, #42	; 0x2a
 8008f26:	d02a      	beq.n	8008f7e <_vfiprintf_r+0x10e>
 8008f28:	46a8      	mov	r8, r5
 8008f2a:	9a07      	ldr	r2, [sp, #28]
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	250a      	movs	r5, #10
 8008f30:	4641      	mov	r1, r8
 8008f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f36:	3b30      	subs	r3, #48	; 0x30
 8008f38:	2b09      	cmp	r3, #9
 8008f3a:	d969      	bls.n	8009010 <_vfiprintf_r+0x1a0>
 8008f3c:	b360      	cbz	r0, 8008f98 <_vfiprintf_r+0x128>
 8008f3e:	e024      	b.n	8008f8a <_vfiprintf_r+0x11a>
 8008f40:	4b50      	ldr	r3, [pc, #320]	; (8009084 <_vfiprintf_r+0x214>)
 8008f42:	429c      	cmp	r4, r3
 8008f44:	d101      	bne.n	8008f4a <_vfiprintf_r+0xda>
 8008f46:	68b4      	ldr	r4, [r6, #8]
 8008f48:	e7a2      	b.n	8008e90 <_vfiprintf_r+0x20>
 8008f4a:	4b4f      	ldr	r3, [pc, #316]	; (8009088 <_vfiprintf_r+0x218>)
 8008f4c:	429c      	cmp	r4, r3
 8008f4e:	bf08      	it	eq
 8008f50:	68f4      	ldreq	r4, [r6, #12]
 8008f52:	e79d      	b.n	8008e90 <_vfiprintf_r+0x20>
 8008f54:	4621      	mov	r1, r4
 8008f56:	4630      	mov	r0, r6
 8008f58:	f7ff fc66 	bl	8008828 <__swsetup_r>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d09d      	beq.n	8008e9c <_vfiprintf_r+0x2c>
 8008f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f64:	b01d      	add	sp, #116	; 0x74
 8008f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6a:	46a8      	mov	r8, r5
 8008f6c:	e7a2      	b.n	8008eb4 <_vfiprintf_r+0x44>
 8008f6e:	4a44      	ldr	r2, [pc, #272]	; (8009080 <_vfiprintf_r+0x210>)
 8008f70:	4645      	mov	r5, r8
 8008f72:	1a80      	subs	r0, r0, r2
 8008f74:	fa0b f000 	lsl.w	r0, fp, r0
 8008f78:	4318      	orrs	r0, r3
 8008f7a:	9004      	str	r0, [sp, #16]
 8008f7c:	e7be      	b.n	8008efc <_vfiprintf_r+0x8c>
 8008f7e:	9a03      	ldr	r2, [sp, #12]
 8008f80:	1d11      	adds	r1, r2, #4
 8008f82:	6812      	ldr	r2, [r2, #0]
 8008f84:	2a00      	cmp	r2, #0
 8008f86:	9103      	str	r1, [sp, #12]
 8008f88:	db01      	blt.n	8008f8e <_vfiprintf_r+0x11e>
 8008f8a:	9207      	str	r2, [sp, #28]
 8008f8c:	e004      	b.n	8008f98 <_vfiprintf_r+0x128>
 8008f8e:	4252      	negs	r2, r2
 8008f90:	f043 0302 	orr.w	r3, r3, #2
 8008f94:	9207      	str	r2, [sp, #28]
 8008f96:	9304      	str	r3, [sp, #16]
 8008f98:	f898 3000 	ldrb.w	r3, [r8]
 8008f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8008f9e:	d10e      	bne.n	8008fbe <_vfiprintf_r+0x14e>
 8008fa0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa6:	d138      	bne.n	800901a <_vfiprintf_r+0x1aa>
 8008fa8:	9b03      	ldr	r3, [sp, #12]
 8008faa:	f108 0802 	add.w	r8, r8, #2
 8008fae:	1d1a      	adds	r2, r3, #4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	9203      	str	r2, [sp, #12]
 8008fb6:	bfb8      	it	lt
 8008fb8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008fbc:	9305      	str	r3, [sp, #20]
 8008fbe:	4d33      	ldr	r5, [pc, #204]	; (800908c <_vfiprintf_r+0x21c>)
 8008fc0:	2203      	movs	r2, #3
 8008fc2:	f898 1000 	ldrb.w	r1, [r8]
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 fad2 	bl	8009570 <memchr>
 8008fcc:	b140      	cbz	r0, 8008fe0 <_vfiprintf_r+0x170>
 8008fce:	2340      	movs	r3, #64	; 0x40
 8008fd0:	1b40      	subs	r0, r0, r5
 8008fd2:	f108 0801 	add.w	r8, r8, #1
 8008fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8008fda:	9b04      	ldr	r3, [sp, #16]
 8008fdc:	4303      	orrs	r3, r0
 8008fde:	9304      	str	r3, [sp, #16]
 8008fe0:	f898 1000 	ldrb.w	r1, [r8]
 8008fe4:	2206      	movs	r2, #6
 8008fe6:	482a      	ldr	r0, [pc, #168]	; (8009090 <_vfiprintf_r+0x220>)
 8008fe8:	f108 0701 	add.w	r7, r8, #1
 8008fec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ff0:	f000 fabe 	bl	8009570 <memchr>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d037      	beq.n	8009068 <_vfiprintf_r+0x1f8>
 8008ff8:	4b26      	ldr	r3, [pc, #152]	; (8009094 <_vfiprintf_r+0x224>)
 8008ffa:	bb1b      	cbnz	r3, 8009044 <_vfiprintf_r+0x1d4>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	3307      	adds	r3, #7
 8009000:	f023 0307 	bic.w	r3, r3, #7
 8009004:	3308      	adds	r3, #8
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900a:	444b      	add	r3, r9
 800900c:	9309      	str	r3, [sp, #36]	; 0x24
 800900e:	e750      	b.n	8008eb2 <_vfiprintf_r+0x42>
 8009010:	fb05 3202 	mla	r2, r5, r2, r3
 8009014:	2001      	movs	r0, #1
 8009016:	4688      	mov	r8, r1
 8009018:	e78a      	b.n	8008f30 <_vfiprintf_r+0xc0>
 800901a:	2300      	movs	r3, #0
 800901c:	f108 0801 	add.w	r8, r8, #1
 8009020:	250a      	movs	r5, #10
 8009022:	4619      	mov	r1, r3
 8009024:	9305      	str	r3, [sp, #20]
 8009026:	4640      	mov	r0, r8
 8009028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800902c:	3a30      	subs	r2, #48	; 0x30
 800902e:	2a09      	cmp	r2, #9
 8009030:	d903      	bls.n	800903a <_vfiprintf_r+0x1ca>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0c3      	beq.n	8008fbe <_vfiprintf_r+0x14e>
 8009036:	9105      	str	r1, [sp, #20]
 8009038:	e7c1      	b.n	8008fbe <_vfiprintf_r+0x14e>
 800903a:	fb05 2101 	mla	r1, r5, r1, r2
 800903e:	2301      	movs	r3, #1
 8009040:	4680      	mov	r8, r0
 8009042:	e7f0      	b.n	8009026 <_vfiprintf_r+0x1b6>
 8009044:	ab03      	add	r3, sp, #12
 8009046:	4622      	mov	r2, r4
 8009048:	a904      	add	r1, sp, #16
 800904a:	4630      	mov	r0, r6
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	4b12      	ldr	r3, [pc, #72]	; (8009098 <_vfiprintf_r+0x228>)
 8009050:	e000      	b.n	8009054 <_vfiprintf_r+0x1e4>
 8009052:	bf00      	nop
 8009054:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009058:	4681      	mov	r9, r0
 800905a:	d1d5      	bne.n	8009008 <_vfiprintf_r+0x198>
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	065b      	lsls	r3, r3, #25
 8009060:	f53f af7e 	bmi.w	8008f60 <_vfiprintf_r+0xf0>
 8009064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009066:	e77d      	b.n	8008f64 <_vfiprintf_r+0xf4>
 8009068:	ab03      	add	r3, sp, #12
 800906a:	4622      	mov	r2, r4
 800906c:	a904      	add	r1, sp, #16
 800906e:	4630      	mov	r0, r6
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	4b09      	ldr	r3, [pc, #36]	; (8009098 <_vfiprintf_r+0x228>)
 8009074:	f000 f88a 	bl	800918c <_printf_i>
 8009078:	e7ec      	b.n	8009054 <_vfiprintf_r+0x1e4>
 800907a:	bf00      	nop
 800907c:	08009a00 	.word	0x08009a00
 8009080:	08009a40 	.word	0x08009a40
 8009084:	08009a20 	.word	0x08009a20
 8009088:	080099e0 	.word	0x080099e0
 800908c:	08009a46 	.word	0x08009a46
 8009090:	08009a4a 	.word	0x08009a4a
 8009094:	00000000 	.word	0x00000000
 8009098:	08008e4b 	.word	0x08008e4b

0800909c <_printf_common>:
 800909c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a0:	4691      	mov	r9, r2
 80090a2:	461f      	mov	r7, r3
 80090a4:	688a      	ldr	r2, [r1, #8]
 80090a6:	4606      	mov	r6, r0
 80090a8:	690b      	ldr	r3, [r1, #16]
 80090aa:	460c      	mov	r4, r1
 80090ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090b0:	4293      	cmp	r3, r2
 80090b2:	bfb8      	it	lt
 80090b4:	4613      	movlt	r3, r2
 80090b6:	f8c9 3000 	str.w	r3, [r9]
 80090ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090be:	b112      	cbz	r2, 80090c6 <_printf_common+0x2a>
 80090c0:	3301      	adds	r3, #1
 80090c2:	f8c9 3000 	str.w	r3, [r9]
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	0699      	lsls	r1, r3, #26
 80090ca:	bf42      	ittt	mi
 80090cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80090d0:	3302      	addmi	r3, #2
 80090d2:	f8c9 3000 	strmi.w	r3, [r9]
 80090d6:	6825      	ldr	r5, [r4, #0]
 80090d8:	f015 0506 	ands.w	r5, r5, #6
 80090dc:	d107      	bne.n	80090ee <_printf_common+0x52>
 80090de:	f104 0a19 	add.w	sl, r4, #25
 80090e2:	68e3      	ldr	r3, [r4, #12]
 80090e4:	f8d9 2000 	ldr.w	r2, [r9]
 80090e8:	1a9b      	subs	r3, r3, r2
 80090ea:	42ab      	cmp	r3, r5
 80090ec:	dc2b      	bgt.n	8009146 <_printf_common+0xaa>
 80090ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80090f2:	6822      	ldr	r2, [r4, #0]
 80090f4:	3300      	adds	r3, #0
 80090f6:	bf18      	it	ne
 80090f8:	2301      	movne	r3, #1
 80090fa:	0692      	lsls	r2, r2, #26
 80090fc:	d430      	bmi.n	8009160 <_printf_common+0xc4>
 80090fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009102:	4639      	mov	r1, r7
 8009104:	4630      	mov	r0, r6
 8009106:	47c0      	blx	r8
 8009108:	3001      	adds	r0, #1
 800910a:	d023      	beq.n	8009154 <_printf_common+0xb8>
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	341a      	adds	r4, #26
 8009110:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8009114:	f003 0306 	and.w	r3, r3, #6
 8009118:	f8d9 2000 	ldr.w	r2, [r9]
 800911c:	f04f 0900 	mov.w	r9, #0
 8009120:	2b04      	cmp	r3, #4
 8009122:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009126:	bf08      	it	eq
 8009128:	1aad      	subeq	r5, r5, r2
 800912a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800912e:	bf14      	ite	ne
 8009130:	2500      	movne	r5, #0
 8009132:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009136:	4293      	cmp	r3, r2
 8009138:	bfc4      	itt	gt
 800913a:	1a9b      	subgt	r3, r3, r2
 800913c:	18ed      	addgt	r5, r5, r3
 800913e:	454d      	cmp	r5, r9
 8009140:	d11a      	bne.n	8009178 <_printf_common+0xdc>
 8009142:	2000      	movs	r0, #0
 8009144:	e008      	b.n	8009158 <_printf_common+0xbc>
 8009146:	2301      	movs	r3, #1
 8009148:	4652      	mov	r2, sl
 800914a:	4639      	mov	r1, r7
 800914c:	4630      	mov	r0, r6
 800914e:	47c0      	blx	r8
 8009150:	3001      	adds	r0, #1
 8009152:	d103      	bne.n	800915c <_printf_common+0xc0>
 8009154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915c:	3501      	adds	r5, #1
 800915e:	e7c0      	b.n	80090e2 <_printf_common+0x46>
 8009160:	18e1      	adds	r1, r4, r3
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	2030      	movs	r0, #48	; 0x30
 8009166:	3302      	adds	r3, #2
 8009168:	4422      	add	r2, r4
 800916a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800916e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009172:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009176:	e7c2      	b.n	80090fe <_printf_common+0x62>
 8009178:	2301      	movs	r3, #1
 800917a:	4622      	mov	r2, r4
 800917c:	4639      	mov	r1, r7
 800917e:	4630      	mov	r0, r6
 8009180:	47c0      	blx	r8
 8009182:	3001      	adds	r0, #1
 8009184:	d0e6      	beq.n	8009154 <_printf_common+0xb8>
 8009186:	f109 0901 	add.w	r9, r9, #1
 800918a:	e7d8      	b.n	800913e <_printf_common+0xa2>

0800918c <_printf_i>:
 800918c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009190:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009194:	460c      	mov	r4, r1
 8009196:	7e09      	ldrb	r1, [r1, #24]
 8009198:	b085      	sub	sp, #20
 800919a:	4617      	mov	r7, r2
 800919c:	4606      	mov	r6, r0
 800919e:	296e      	cmp	r1, #110	; 0x6e
 80091a0:	4698      	mov	r8, r3
 80091a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091a4:	f000 80b3 	beq.w	800930e <_printf_i+0x182>
 80091a8:	d822      	bhi.n	80091f0 <_printf_i+0x64>
 80091aa:	2963      	cmp	r1, #99	; 0x63
 80091ac:	d036      	beq.n	800921c <_printf_i+0x90>
 80091ae:	d80a      	bhi.n	80091c6 <_printf_i+0x3a>
 80091b0:	2900      	cmp	r1, #0
 80091b2:	f000 80b9 	beq.w	8009328 <_printf_i+0x19c>
 80091b6:	2958      	cmp	r1, #88	; 0x58
 80091b8:	f000 8083 	beq.w	80092c2 <_printf_i+0x136>
 80091bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80091c4:	e032      	b.n	800922c <_printf_i+0xa0>
 80091c6:	2964      	cmp	r1, #100	; 0x64
 80091c8:	d001      	beq.n	80091ce <_printf_i+0x42>
 80091ca:	2969      	cmp	r1, #105	; 0x69
 80091cc:	d1f6      	bne.n	80091bc <_printf_i+0x30>
 80091ce:	6820      	ldr	r0, [r4, #0]
 80091d0:	6813      	ldr	r3, [r2, #0]
 80091d2:	0605      	lsls	r5, r0, #24
 80091d4:	f103 0104 	add.w	r1, r3, #4
 80091d8:	d52a      	bpl.n	8009230 <_printf_i+0xa4>
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6011      	str	r1, [r2, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	da03      	bge.n	80091ea <_printf_i+0x5e>
 80091e2:	222d      	movs	r2, #45	; 0x2d
 80091e4:	425b      	negs	r3, r3
 80091e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80091ea:	486f      	ldr	r0, [pc, #444]	; (80093a8 <_printf_i+0x21c>)
 80091ec:	220a      	movs	r2, #10
 80091ee:	e039      	b.n	8009264 <_printf_i+0xd8>
 80091f0:	2973      	cmp	r1, #115	; 0x73
 80091f2:	f000 809d 	beq.w	8009330 <_printf_i+0x1a4>
 80091f6:	d808      	bhi.n	800920a <_printf_i+0x7e>
 80091f8:	296f      	cmp	r1, #111	; 0x6f
 80091fa:	d020      	beq.n	800923e <_printf_i+0xb2>
 80091fc:	2970      	cmp	r1, #112	; 0x70
 80091fe:	d1dd      	bne.n	80091bc <_printf_i+0x30>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	f043 0320 	orr.w	r3, r3, #32
 8009206:	6023      	str	r3, [r4, #0]
 8009208:	e003      	b.n	8009212 <_printf_i+0x86>
 800920a:	2975      	cmp	r1, #117	; 0x75
 800920c:	d017      	beq.n	800923e <_printf_i+0xb2>
 800920e:	2978      	cmp	r1, #120	; 0x78
 8009210:	d1d4      	bne.n	80091bc <_printf_i+0x30>
 8009212:	2378      	movs	r3, #120	; 0x78
 8009214:	4865      	ldr	r0, [pc, #404]	; (80093ac <_printf_i+0x220>)
 8009216:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800921a:	e055      	b.n	80092c8 <_printf_i+0x13c>
 800921c:	6813      	ldr	r3, [r2, #0]
 800921e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009222:	1d19      	adds	r1, r3, #4
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6011      	str	r1, [r2, #0]
 8009228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800922c:	2301      	movs	r3, #1
 800922e:	e08c      	b.n	800934a <_printf_i+0x1be>
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009236:	6011      	str	r1, [r2, #0]
 8009238:	bf18      	it	ne
 800923a:	b21b      	sxthne	r3, r3
 800923c:	e7cf      	b.n	80091de <_printf_i+0x52>
 800923e:	6813      	ldr	r3, [r2, #0]
 8009240:	6825      	ldr	r5, [r4, #0]
 8009242:	1d18      	adds	r0, r3, #4
 8009244:	6010      	str	r0, [r2, #0]
 8009246:	0628      	lsls	r0, r5, #24
 8009248:	d501      	bpl.n	800924e <_printf_i+0xc2>
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	e002      	b.n	8009254 <_printf_i+0xc8>
 800924e:	0668      	lsls	r0, r5, #25
 8009250:	d5fb      	bpl.n	800924a <_printf_i+0xbe>
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	296f      	cmp	r1, #111	; 0x6f
 8009256:	4854      	ldr	r0, [pc, #336]	; (80093a8 <_printf_i+0x21c>)
 8009258:	bf14      	ite	ne
 800925a:	220a      	movne	r2, #10
 800925c:	2208      	moveq	r2, #8
 800925e:	2100      	movs	r1, #0
 8009260:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009264:	6865      	ldr	r5, [r4, #4]
 8009266:	2d00      	cmp	r5, #0
 8009268:	60a5      	str	r5, [r4, #8]
 800926a:	f2c0 8095 	blt.w	8009398 <_printf_i+0x20c>
 800926e:	6821      	ldr	r1, [r4, #0]
 8009270:	f021 0104 	bic.w	r1, r1, #4
 8009274:	6021      	str	r1, [r4, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d13d      	bne.n	80092f6 <_printf_i+0x16a>
 800927a:	2d00      	cmp	r5, #0
 800927c:	f040 808e 	bne.w	800939c <_printf_i+0x210>
 8009280:	4665      	mov	r5, ip
 8009282:	2a08      	cmp	r2, #8
 8009284:	d10b      	bne.n	800929e <_printf_i+0x112>
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	07db      	lsls	r3, r3, #31
 800928a:	d508      	bpl.n	800929e <_printf_i+0x112>
 800928c:	6923      	ldr	r3, [r4, #16]
 800928e:	6862      	ldr	r2, [r4, #4]
 8009290:	429a      	cmp	r2, r3
 8009292:	bfde      	ittt	le
 8009294:	2330      	movle	r3, #48	; 0x30
 8009296:	f805 3c01 	strble.w	r3, [r5, #-1]
 800929a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800929e:	ebac 0305 	sub.w	r3, ip, r5
 80092a2:	6123      	str	r3, [r4, #16]
 80092a4:	f8cd 8000 	str.w	r8, [sp]
 80092a8:	463b      	mov	r3, r7
 80092aa:	aa03      	add	r2, sp, #12
 80092ac:	4621      	mov	r1, r4
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7ff fef4 	bl	800909c <_printf_common>
 80092b4:	3001      	adds	r0, #1
 80092b6:	d14d      	bne.n	8009354 <_printf_i+0x1c8>
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092bc:	b005      	add	sp, #20
 80092be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092c2:	4839      	ldr	r0, [pc, #228]	; (80093a8 <_printf_i+0x21c>)
 80092c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80092c8:	6813      	ldr	r3, [r2, #0]
 80092ca:	6821      	ldr	r1, [r4, #0]
 80092cc:	1d1d      	adds	r5, r3, #4
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6015      	str	r5, [r2, #0]
 80092d2:	060a      	lsls	r2, r1, #24
 80092d4:	d50b      	bpl.n	80092ee <_printf_i+0x162>
 80092d6:	07ca      	lsls	r2, r1, #31
 80092d8:	bf44      	itt	mi
 80092da:	f041 0120 	orrmi.w	r1, r1, #32
 80092de:	6021      	strmi	r1, [r4, #0]
 80092e0:	b91b      	cbnz	r3, 80092ea <_printf_i+0x15e>
 80092e2:	6822      	ldr	r2, [r4, #0]
 80092e4:	f022 0220 	bic.w	r2, r2, #32
 80092e8:	6022      	str	r2, [r4, #0]
 80092ea:	2210      	movs	r2, #16
 80092ec:	e7b7      	b.n	800925e <_printf_i+0xd2>
 80092ee:	064d      	lsls	r5, r1, #25
 80092f0:	bf48      	it	mi
 80092f2:	b29b      	uxthmi	r3, r3
 80092f4:	e7ef      	b.n	80092d6 <_printf_i+0x14a>
 80092f6:	4665      	mov	r5, ip
 80092f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80092fc:	fb02 3311 	mls	r3, r2, r1, r3
 8009300:	5cc3      	ldrb	r3, [r0, r3]
 8009302:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009306:	460b      	mov	r3, r1
 8009308:	2900      	cmp	r1, #0
 800930a:	d1f5      	bne.n	80092f8 <_printf_i+0x16c>
 800930c:	e7b9      	b.n	8009282 <_printf_i+0xf6>
 800930e:	6813      	ldr	r3, [r2, #0]
 8009310:	6825      	ldr	r5, [r4, #0]
 8009312:	1d18      	adds	r0, r3, #4
 8009314:	6961      	ldr	r1, [r4, #20]
 8009316:	6010      	str	r0, [r2, #0]
 8009318:	0628      	lsls	r0, r5, #24
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	d501      	bpl.n	8009322 <_printf_i+0x196>
 800931e:	6019      	str	r1, [r3, #0]
 8009320:	e002      	b.n	8009328 <_printf_i+0x19c>
 8009322:	066a      	lsls	r2, r5, #25
 8009324:	d5fb      	bpl.n	800931e <_printf_i+0x192>
 8009326:	8019      	strh	r1, [r3, #0]
 8009328:	2300      	movs	r3, #0
 800932a:	4665      	mov	r5, ip
 800932c:	6123      	str	r3, [r4, #16]
 800932e:	e7b9      	b.n	80092a4 <_printf_i+0x118>
 8009330:	6813      	ldr	r3, [r2, #0]
 8009332:	1d19      	adds	r1, r3, #4
 8009334:	6011      	str	r1, [r2, #0]
 8009336:	2100      	movs	r1, #0
 8009338:	681d      	ldr	r5, [r3, #0]
 800933a:	6862      	ldr	r2, [r4, #4]
 800933c:	4628      	mov	r0, r5
 800933e:	f000 f917 	bl	8009570 <memchr>
 8009342:	b108      	cbz	r0, 8009348 <_printf_i+0x1bc>
 8009344:	1b40      	subs	r0, r0, r5
 8009346:	6060      	str	r0, [r4, #4]
 8009348:	6863      	ldr	r3, [r4, #4]
 800934a:	6123      	str	r3, [r4, #16]
 800934c:	2300      	movs	r3, #0
 800934e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009352:	e7a7      	b.n	80092a4 <_printf_i+0x118>
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	462a      	mov	r2, r5
 8009358:	4639      	mov	r1, r7
 800935a:	4630      	mov	r0, r6
 800935c:	47c0      	blx	r8
 800935e:	3001      	adds	r0, #1
 8009360:	d0aa      	beq.n	80092b8 <_printf_i+0x12c>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	079b      	lsls	r3, r3, #30
 8009366:	d413      	bmi.n	8009390 <_printf_i+0x204>
 8009368:	68e0      	ldr	r0, [r4, #12]
 800936a:	9b03      	ldr	r3, [sp, #12]
 800936c:	4298      	cmp	r0, r3
 800936e:	bfb8      	it	lt
 8009370:	4618      	movlt	r0, r3
 8009372:	e7a3      	b.n	80092bc <_printf_i+0x130>
 8009374:	2301      	movs	r3, #1
 8009376:	464a      	mov	r2, r9
 8009378:	4639      	mov	r1, r7
 800937a:	4630      	mov	r0, r6
 800937c:	47c0      	blx	r8
 800937e:	3001      	adds	r0, #1
 8009380:	d09a      	beq.n	80092b8 <_printf_i+0x12c>
 8009382:	3501      	adds	r5, #1
 8009384:	68e3      	ldr	r3, [r4, #12]
 8009386:	9a03      	ldr	r2, [sp, #12]
 8009388:	1a9b      	subs	r3, r3, r2
 800938a:	42ab      	cmp	r3, r5
 800938c:	dcf2      	bgt.n	8009374 <_printf_i+0x1e8>
 800938e:	e7eb      	b.n	8009368 <_printf_i+0x1dc>
 8009390:	2500      	movs	r5, #0
 8009392:	f104 0919 	add.w	r9, r4, #25
 8009396:	e7f5      	b.n	8009384 <_printf_i+0x1f8>
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1ac      	bne.n	80092f6 <_printf_i+0x16a>
 800939c:	7803      	ldrb	r3, [r0, #0]
 800939e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093a6:	e76c      	b.n	8009282 <_printf_i+0xf6>
 80093a8:	08009a51 	.word	0x08009a51
 80093ac:	08009a62 	.word	0x08009a62

080093b0 <_putc_r>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	460d      	mov	r5, r1
 80093b4:	4614      	mov	r4, r2
 80093b6:	4606      	mov	r6, r0
 80093b8:	b118      	cbz	r0, 80093c2 <_putc_r+0x12>
 80093ba:	6983      	ldr	r3, [r0, #24]
 80093bc:	b90b      	cbnz	r3, 80093c2 <_putc_r+0x12>
 80093be:	f7ff fb8f 	bl	8008ae0 <__sinit>
 80093c2:	4b13      	ldr	r3, [pc, #76]	; (8009410 <_putc_r+0x60>)
 80093c4:	429c      	cmp	r4, r3
 80093c6:	d112      	bne.n	80093ee <_putc_r+0x3e>
 80093c8:	6874      	ldr	r4, [r6, #4]
 80093ca:	68a3      	ldr	r3, [r4, #8]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	60a3      	str	r3, [r4, #8]
 80093d2:	da16      	bge.n	8009402 <_putc_r+0x52>
 80093d4:	69a2      	ldr	r2, [r4, #24]
 80093d6:	4293      	cmp	r3, r2
 80093d8:	db02      	blt.n	80093e0 <_putc_r+0x30>
 80093da:	b2eb      	uxtb	r3, r5
 80093dc:	2b0a      	cmp	r3, #10
 80093de:	d110      	bne.n	8009402 <_putc_r+0x52>
 80093e0:	4622      	mov	r2, r4
 80093e2:	4629      	mov	r1, r5
 80093e4:	4630      	mov	r0, r6
 80093e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093ea:	f7ff b9cb 	b.w	8008784 <__swbuf_r>
 80093ee:	4b09      	ldr	r3, [pc, #36]	; (8009414 <_putc_r+0x64>)
 80093f0:	429c      	cmp	r4, r3
 80093f2:	d101      	bne.n	80093f8 <_putc_r+0x48>
 80093f4:	68b4      	ldr	r4, [r6, #8]
 80093f6:	e7e8      	b.n	80093ca <_putc_r+0x1a>
 80093f8:	4b07      	ldr	r3, [pc, #28]	; (8009418 <_putc_r+0x68>)
 80093fa:	429c      	cmp	r4, r3
 80093fc:	bf08      	it	eq
 80093fe:	68f4      	ldreq	r4, [r6, #12]
 8009400:	e7e3      	b.n	80093ca <_putc_r+0x1a>
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	b2e8      	uxtb	r0, r5
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	6022      	str	r2, [r4, #0]
 800940a:	701d      	strb	r5, [r3, #0]
 800940c:	bd70      	pop	{r4, r5, r6, pc}
 800940e:	bf00      	nop
 8009410:	08009a00 	.word	0x08009a00
 8009414:	08009a20 	.word	0x08009a20
 8009418:	080099e0 	.word	0x080099e0

0800941c <_sbrk_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	2300      	movs	r3, #0
 8009420:	4c05      	ldr	r4, [pc, #20]	; (8009438 <_sbrk_r+0x1c>)
 8009422:	4605      	mov	r5, r0
 8009424:	4608      	mov	r0, r1
 8009426:	6023      	str	r3, [r4, #0]
 8009428:	f7fe ff70 	bl	800830c <_sbrk>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d102      	bne.n	8009436 <_sbrk_r+0x1a>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	b103      	cbz	r3, 8009436 <_sbrk_r+0x1a>
 8009434:	602b      	str	r3, [r5, #0]
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	20000620 	.word	0x20000620

0800943c <__sread>:
 800943c:	b510      	push	{r4, lr}
 800943e:	460c      	mov	r4, r1
 8009440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009444:	f000 f8a4 	bl	8009590 <_read_r>
 8009448:	2800      	cmp	r0, #0
 800944a:	bfab      	itete	ge
 800944c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800944e:	89a3      	ldrhlt	r3, [r4, #12]
 8009450:	181b      	addge	r3, r3, r0
 8009452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009456:	bfac      	ite	ge
 8009458:	6563      	strge	r3, [r4, #84]	; 0x54
 800945a:	81a3      	strhlt	r3, [r4, #12]
 800945c:	bd10      	pop	{r4, pc}

0800945e <__swrite>:
 800945e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009462:	461f      	mov	r7, r3
 8009464:	898b      	ldrh	r3, [r1, #12]
 8009466:	4605      	mov	r5, r0
 8009468:	460c      	mov	r4, r1
 800946a:	05db      	lsls	r3, r3, #23
 800946c:	4616      	mov	r6, r2
 800946e:	d505      	bpl.n	800947c <__swrite+0x1e>
 8009470:	2302      	movs	r3, #2
 8009472:	2200      	movs	r2, #0
 8009474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009478:	f000 f868 	bl	800954c <_lseek_r>
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	4632      	mov	r2, r6
 8009480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009484:	4628      	mov	r0, r5
 8009486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800948a:	81a3      	strh	r3, [r4, #12]
 800948c:	463b      	mov	r3, r7
 800948e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009492:	f000 b817 	b.w	80094c4 <_write_r>

08009496 <__sseek>:
 8009496:	b510      	push	{r4, lr}
 8009498:	460c      	mov	r4, r1
 800949a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800949e:	f000 f855 	bl	800954c <_lseek_r>
 80094a2:	1c43      	adds	r3, r0, #1
 80094a4:	89a3      	ldrh	r3, [r4, #12]
 80094a6:	bf15      	itete	ne
 80094a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80094aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094b2:	81a3      	strheq	r3, [r4, #12]
 80094b4:	bf18      	it	ne
 80094b6:	81a3      	strhne	r3, [r4, #12]
 80094b8:	bd10      	pop	{r4, pc}

080094ba <__sclose>:
 80094ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094be:	f000 b813 	b.w	80094e8 <_close_r>
	...

080094c4 <_write_r>:
 80094c4:	b538      	push	{r3, r4, r5, lr}
 80094c6:	4605      	mov	r5, r0
 80094c8:	4c06      	ldr	r4, [pc, #24]	; (80094e4 <_write_r+0x20>)
 80094ca:	4608      	mov	r0, r1
 80094cc:	4611      	mov	r1, r2
 80094ce:	2200      	movs	r2, #0
 80094d0:	6022      	str	r2, [r4, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	f7fe fec9 	bl	800826a <_write>
 80094d8:	1c43      	adds	r3, r0, #1
 80094da:	d102      	bne.n	80094e2 <_write_r+0x1e>
 80094dc:	6823      	ldr	r3, [r4, #0]
 80094de:	b103      	cbz	r3, 80094e2 <_write_r+0x1e>
 80094e0:	602b      	str	r3, [r5, #0]
 80094e2:	bd38      	pop	{r3, r4, r5, pc}
 80094e4:	20000620 	.word	0x20000620

080094e8 <_close_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	2300      	movs	r3, #0
 80094ec:	4c05      	ldr	r4, [pc, #20]	; (8009504 <_close_r+0x1c>)
 80094ee:	4605      	mov	r5, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	6023      	str	r3, [r4, #0]
 80094f4:	f7fe fed5 	bl	80082a2 <_close>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_close_r+0x1a>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_close_r+0x1a>
 8009500:	602b      	str	r3, [r5, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	20000620 	.word	0x20000620

08009508 <_fstat_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	2300      	movs	r3, #0
 800950c:	4c06      	ldr	r4, [pc, #24]	; (8009528 <_fstat_r+0x20>)
 800950e:	4605      	mov	r5, r0
 8009510:	4608      	mov	r0, r1
 8009512:	4611      	mov	r1, r2
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	f7fe fed0 	bl	80082ba <_fstat>
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	d102      	bne.n	8009524 <_fstat_r+0x1c>
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	b103      	cbz	r3, 8009524 <_fstat_r+0x1c>
 8009522:	602b      	str	r3, [r5, #0]
 8009524:	bd38      	pop	{r3, r4, r5, pc}
 8009526:	bf00      	nop
 8009528:	20000620 	.word	0x20000620

0800952c <_isatty_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	2300      	movs	r3, #0
 8009530:	4c05      	ldr	r4, [pc, #20]	; (8009548 <_isatty_r+0x1c>)
 8009532:	4605      	mov	r5, r0
 8009534:	4608      	mov	r0, r1
 8009536:	6023      	str	r3, [r4, #0]
 8009538:	f7fe fecf 	bl	80082da <_isatty>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d102      	bne.n	8009546 <_isatty_r+0x1a>
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	b103      	cbz	r3, 8009546 <_isatty_r+0x1a>
 8009544:	602b      	str	r3, [r5, #0]
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	20000620 	.word	0x20000620

0800954c <_lseek_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4605      	mov	r5, r0
 8009550:	4c06      	ldr	r4, [pc, #24]	; (800956c <_lseek_r+0x20>)
 8009552:	4608      	mov	r0, r1
 8009554:	4611      	mov	r1, r2
 8009556:	2200      	movs	r2, #0
 8009558:	6022      	str	r2, [r4, #0]
 800955a:	461a      	mov	r2, r3
 800955c:	f7fe fec8 	bl	80082f0 <_lseek>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_lseek_r+0x1e>
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	b103      	cbz	r3, 800956a <_lseek_r+0x1e>
 8009568:	602b      	str	r3, [r5, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	20000620 	.word	0x20000620

08009570 <memchr>:
 8009570:	b2c9      	uxtb	r1, r1
 8009572:	4402      	add	r2, r0
 8009574:	b510      	push	{r4, lr}
 8009576:	4290      	cmp	r0, r2
 8009578:	4603      	mov	r3, r0
 800957a:	d101      	bne.n	8009580 <memchr+0x10>
 800957c:	2300      	movs	r3, #0
 800957e:	e003      	b.n	8009588 <memchr+0x18>
 8009580:	781c      	ldrb	r4, [r3, #0]
 8009582:	3001      	adds	r0, #1
 8009584:	428c      	cmp	r4, r1
 8009586:	d1f6      	bne.n	8009576 <memchr+0x6>
 8009588:	4618      	mov	r0, r3
 800958a:	bd10      	pop	{r4, pc}

0800958c <__malloc_lock>:
 800958c:	4770      	bx	lr

0800958e <__malloc_unlock>:
 800958e:	4770      	bx	lr

08009590 <_read_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4605      	mov	r5, r0
 8009594:	4c06      	ldr	r4, [pc, #24]	; (80095b0 <_read_r+0x20>)
 8009596:	4608      	mov	r0, r1
 8009598:	4611      	mov	r1, r2
 800959a:	2200      	movs	r2, #0
 800959c:	6022      	str	r2, [r4, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	f7fe fe46 	bl	8008230 <_read>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_read_r+0x1e>
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_read_r+0x1e>
 80095ac:	602b      	str	r3, [r5, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	20000620 	.word	0x20000620

080095b4 <_init>:
 80095b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b6:	bf00      	nop
 80095b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ba:	bc08      	pop	{r3}
 80095bc:	469e      	mov	lr, r3
 80095be:	4770      	bx	lr

080095c0 <_fini>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	bf00      	nop
 80095c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c6:	bc08      	pop	{r3}
 80095c8:	469e      	mov	lr, r3
 80095ca:	4770      	bx	lr
 80095cc:	0000      	movs	r0, r0
	...
